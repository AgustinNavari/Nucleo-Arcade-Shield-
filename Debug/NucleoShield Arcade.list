
NucleoShield Arcade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000620c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080063dc  080063dc  000073dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006644  08006644  00008108  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800664c  0800664c  00008108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08006654  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000108  0800675c  00008108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800675c  00008428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008108  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f3  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb1  00000000  00000000  0001822b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b31  00000000  00000000  0001bd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e33  00000000  00000000  0001c879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014168  00000000  00000000  000406ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cefc9  00000000  00000000  00054814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001237dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000450c  00000000  00000000  00123820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00127d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000108 	.word	0x20000108
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080063c4 	.word	0x080063c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000010c 	.word	0x2000010c
 800020c:	080063c4 	.word	0x080063c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 fc07 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f821 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f91b 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f8ef 	bl	80007e0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000602:	f000 f8b7 	bl	8000774 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000606:	f000 f887 	bl	8000718 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e00c      	b.n	800062a <main+0x3e>
	  	debounceFSM_update(&buttons[i]);
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	4613      	mov	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <main+0x4c>)
 800061c:	4413      	add	r3, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f93a 	bl	8001898 <debounceFSM_update>
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	3301      	adds	r3, #1
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d9ef      	bls.n	8000610 <main+0x24>
	  }

	  arcadeFSM();
 8000630:	f000 fd34 	bl	800109c <arcadeFSM>
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8000634:	e7e9      	b.n	800060a <main+0x1e>
 8000636:	bf00      	nop
 8000638:	20000008 	.word	0x20000008

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	@ 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fe6b 	bl	8005326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <SystemClock_Config+0xd4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a29      	ldr	r2, [pc, #164]	@ (8000710 <SystemClock_Config+0xd4>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000688:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <SystemClock_Config+0xd8>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b0:	2310      	movs	r3, #16
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fb9c 	bl	8003e08 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f957 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f83c 	bl	8003774 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000702:	f000 f941 	bl	8000988 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2C1_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_I2C1_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000756:	f001 fee5 	bl	8002524 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f912 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000124 	.word	0x20000124
 800076c:	40005400 	.word	0x40005400
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_SPI2_Init+0x64>)
 800077a:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <MX_SPI2_Init+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_SPI2_Init+0x64>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_SPI2_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_SPI2_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_SPI2_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_SPI2_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_SPI2_Init+0x64>)
 80007a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_SPI2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_SPI2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_SPI2_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_SPI2_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_SPI2_Init+0x64>)
 80007c0:	220a      	movs	r2, #10
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_SPI2_Init+0x64>)
 80007c6:	f003 fdbd 	bl	8004344 <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f8da 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000178 	.word	0x20000178
 80007dc:	40003800 	.word	0x40003800

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f004 f95c 	bl	8004ad4 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f8b1 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001d0 	.word	0x200001d0
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b4a      	ldr	r3, [pc, #296]	@ (8000978 <MX_GPIO_Init+0x144>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a49      	ldr	r2, [pc, #292]	@ (8000978 <MX_GPIO_Init+0x144>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b47      	ldr	r3, [pc, #284]	@ (8000978 <MX_GPIO_Init+0x144>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <MX_GPIO_Init+0x144>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <MX_GPIO_Init+0x144>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <MX_GPIO_Init+0x144>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a3b      	ldr	r2, [pc, #236]	@ (8000978 <MX_GPIO_Init+0x144>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b39      	ldr	r3, [pc, #228]	@ (8000978 <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b35      	ldr	r3, [pc, #212]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a34      	ldr	r2, [pc, #208]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b32      	ldr	r3, [pc, #200]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	482f      	ldr	r0, [pc, #188]	@ (800097c <MX_GPIO_Init+0x148>)
 80008c0:	f001 fe16 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ca:	482d      	ldr	r0, [pc, #180]	@ (8000980 <MX_GPIO_Init+0x14c>)
 80008cc:	f001 fe10 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4826      	ldr	r0, [pc, #152]	@ (8000980 <MX_GPIO_Init+0x14c>)
 80008e8:	f001 fc56 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ec:	2320      	movs	r3, #32
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	481e      	ldr	r0, [pc, #120]	@ (800097c <MX_GPIO_Init+0x148>)
 8000904:	f001 fc48 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4819      	ldr	r0, [pc, #100]	@ (8000980 <MX_GPIO_Init+0x14c>)
 800091c:	f001 fc3c 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <MX_GPIO_Init+0x148>)
 8000936:	f001 fc2f 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800093a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480b      	ldr	r0, [pc, #44]	@ (8000980 <MX_GPIO_Init+0x14c>)
 8000954:	f001 fc20 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000958:	2370      	movs	r3, #112	@ 0x70
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <MX_GPIO_Init+0x150>)
 800096c:	f001 fc14 	bl	8002198 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020800 	.word	0x40020800
 8000984:	40020400 	.word	0x40020400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f001 fb7c 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a22:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f001 fbaa 	bl	8002198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a2c      	ldr	r2, [pc, #176]	@ (8000b44 <HAL_SPI_MspInit+0xd0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d152      	bne.n	8000b3c <HAL_SPI_MspInit+0xc8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a23      	ldr	r2, [pc, #140]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_SPI_MspInit+0xd4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aea:	2302      	movs	r3, #2
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <HAL_SPI_MspInit+0xd8>)
 8000b06:	f001 fb47 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <HAL_SPI_MspInit+0xdc>)
 8000b28:	f001 fb36 	bl	8002198 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2024      	movs	r0, #36	@ 0x24
 8000b32:	f001 fad8 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000b36:	2024      	movs	r0, #36	@ 0x24
 8000b38:	f001 faf1 	bl	800211e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40003800 	.word	0x40003800
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_UART_MspInit+0x8c>)
 8000bca:	f001 fae5 	bl	8002198 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f001 f935 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <SPI2_IRQHandler+0x10>)
 8000c4a:	f003 fd49 	bl	80046e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000178 	.word	0x20000178

08000c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return 1;
 8000c5c:	2301      	movs	r3, #1
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <_kill>:

int _kill(int pid, int sig)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c72:	f004 fba7 	bl	80053c4 <__errno>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2216      	movs	r2, #22
 8000c7a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_exit>:

void _exit (int status)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ffe7 	bl	8000c68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c9a:	bf00      	nop
 8000c9c:	e7fd      	b.n	8000c9a <_exit+0x12>

08000c9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e00a      	b.n	8000cc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb0:	f3af 8000 	nop.w
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	60ba      	str	r2, [r7, #8]
 8000cbc:	b2ca      	uxtb	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	dbf0      	blt.n	8000cb0 <_read+0x12>
  }

  return len;
 8000cce:	687b      	ldr	r3, [r7, #4]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e009      	b.n	8000cfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	60ba      	str	r2, [r7, #8]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbf1      	blt.n	8000cea <_write+0x12>
  }
  return len;
 8000d06:	687b      	ldr	r3, [r7, #4]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_close>:

int _close(int file)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d38:	605a      	str	r2, [r3, #4]
  return 0;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_isatty>:

int _isatty(int file)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d50:	2301      	movs	r3, #1
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f004 fb0c 	bl	80053c4 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20020000 	.word	0x20020000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000218 	.word	0x20000218
 8000de0:	20000428 	.word	0x20000428

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f004 facb 	bl	80053d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fbd7 	bl	80005ec <main>
  bx  lr    
 8000e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000e4c:	08006654 	.word	0x08006654
  ldr r2, =_sbss
 8000e50:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000e54:	20000428 	.word	0x20000428

08000e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>

08000e5a <saveScore>:
#include "At24c256.h"

void saveScore(uint16_t score) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	80fb      	strh	r3, [r7, #6]
    EEPROM_Write(score);
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f80c 	bl	8000e84 <EEPROM_Write>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <loadScore>:

uint16_t loadScore(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    return EEPROM_Read();
 8000e78:	f000 f838 	bl	8000eec <EEPROM_Read>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <EEPROM_Write>:
 #include "At24c256_port_stm32.h"


void EEPROM_Write(uint16_t num) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    data[0] = (uint8_t)(num >> 8);   // byte alto
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	753b      	strb	r3, [r7, #20]
    data[1] = (uint8_t)(num & 0xFF); // byte bajo
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	757b      	strb	r3, [r7, #21]

    uint8_t addr[2];
    addr[0] = (uint8_t)(SCORE_ADDR >> 8);
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	743b      	strb	r3, [r7, #16]
    addr[1] = (uint8_t)(SCORE_ADDR & 0xFF);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	747b      	strb	r3, [r7, #17]

    uint8_t tx[4] = {addr[0], addr[1], data[0], data[1]};
 8000ea6:	7c3b      	ldrb	r3, [r7, #16]
 8000ea8:	733b      	strb	r3, [r7, #12]
 8000eaa:	7c7b      	ldrb	r3, [r7, #17]
 8000eac:	737b      	strb	r3, [r7, #13]
 8000eae:	7d3b      	ldrb	r3, [r7, #20]
 8000eb0:	73bb      	strb	r3, [r7, #14]
 8000eb2:	7d7b      	ldrb	r3, [r7, #21]
 8000eb4:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c1, AT24C256_ADDR << 1, tx, 4, HAL_MAX_DELAY);
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	21a0      	movs	r1, #160	@ 0xa0
 8000ec4:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <EEPROM_Write+0x64>)
 8000ec6:	f001 fc71 	bl	80027ac <HAL_I2C_Master_Transmit>

    // Esperar hasta que termine de escribir (polling ACK)
    while (HAL_I2C_IsDeviceReady(&hi2c1, AT24C256_ADDR << 1, 1, 100) != HAL_OK);
 8000eca:	bf00      	nop
 8000ecc:	2364      	movs	r3, #100	@ 0x64
 8000ece:	2201      	movs	r2, #1
 8000ed0:	21a0      	movs	r1, #160	@ 0xa0
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <EEPROM_Write+0x64>)
 8000ed4:	f001 ff9a 	bl	8002e0c <HAL_I2C_IsDeviceReady>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f6      	bne.n	8000ecc <EEPROM_Write+0x48>
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000124 	.word	0x20000124

08000eec <EEPROM_Read>:

uint16_t EEPROM_Read(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af02      	add	r7, sp, #8
    uint8_t addr[2];
    uint8_t data[2];
    addr[0] = (uint8_t)(SCORE_ADDR >> 8);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	713b      	strb	r3, [r7, #4]
    addr[1] = (uint8_t)(SCORE_ADDR & 0xFF);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&hi2c1, AT24C256_ADDR << 1, addr, 2, HAL_MAX_DELAY);
 8000efa:	1d3a      	adds	r2, r7, #4
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2302      	movs	r3, #2
 8000f04:	21a0      	movs	r1, #160	@ 0xa0
 8000f06:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <EEPROM_Read+0x4c>)
 8000f08:	f001 fc50 	bl	80027ac <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, AT24C256_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000f0c:	463a      	mov	r2, r7
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2302      	movs	r3, #2
 8000f16:	21a0      	movs	r1, #160	@ 0xa0
 8000f18:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <EEPROM_Read+0x4c>)
 8000f1a:	f001 fd45 	bl	80029a8 <HAL_I2C_Master_Receive>

    return ((uint16_t)data[0] << 8) | data[1];
 8000f1e:	783b      	ldrb	r3, [r7, #0]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	b29b      	uxth	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000124 	.word	0x20000124

08000f3c <board_gpio_init>:
#include "boardConfig.h"

void board_gpio_init(void){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <board_gpio_init+0x150>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a4c      	ldr	r2, [pc, #304]	@ (800108c <board_gpio_init+0x150>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b4a      	ldr	r3, [pc, #296]	@ (800108c <board_gpio_init+0x150>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b46      	ldr	r3, [pc, #280]	@ (800108c <board_gpio_init+0x150>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a45      	ldr	r2, [pc, #276]	@ (800108c <board_gpio_init+0x150>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b43      	ldr	r3, [pc, #268]	@ (800108c <board_gpio_init+0x150>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800108c <board_gpio_init+0x150>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a3e      	ldr	r2, [pc, #248]	@ (800108c <board_gpio_init+0x150>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800108c <board_gpio_init+0x150>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b38      	ldr	r3, [pc, #224]	@ (800108c <board_gpio_init+0x150>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a37      	ldr	r2, [pc, #220]	@ (800108c <board_gpio_init+0x150>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b35      	ldr	r3, [pc, #212]	@ (800108c <board_gpio_init+0x150>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4832      	ldr	r0, [pc, #200]	@ (8001090 <board_gpio_init+0x154>)
 8000fc8:	f001 fa92 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fd2:	4830      	ldr	r0, [pc, #192]	@ (8001094 <board_gpio_init+0x158>)
 8000fd4:	f001 fa8c 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fde:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4829      	ldr	r0, [pc, #164]	@ (8001094 <board_gpio_init+0x158>)
 8000ff0:	f001 f8d2 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ff4:	2320      	movs	r3, #32
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4821      	ldr	r0, [pc, #132]	@ (8001090 <board_gpio_init+0x154>)
 800100c:	f001 f8c4 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	481a      	ldr	r0, [pc, #104]	@ (8001094 <board_gpio_init+0x158>)
 800102a:	f001 f8b5 	bl	8002198 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <board_gpio_init+0x158>)
 8001036:	f001 fa5b 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <board_gpio_init+0x158>)
 800104e:	f001 f8a3 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001052:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480a      	ldr	r0, [pc, #40]	@ (8001090 <board_gpio_init+0x154>)
 8001068:	f001 f896 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800106c:	2370      	movs	r3, #112	@ 0x70
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	2301      	movs	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <board_gpio_init+0x15c>)
 8001080:	f001 f88a 	bl	8002198 <HAL_GPIO_Init>


}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	@ 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020800 	.word	0x40020800
 8001098:	40020400 	.word	0x40020400

0800109c <arcadeFSM>:

ArcadeState_t arcadeState = BOOT;


void arcadeFSM(void)
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b0a4      	sub	sp, #144	@ 0x90
 80010a0:	af00      	add	r7, sp, #0
    switch (arcadeState){
 80010a2:	4b47      	ldr	r3, [pc, #284]	@ (80011c0 <arcadeFSM+0x124>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d87a      	bhi.n	80011a0 <arcadeFSM+0x104>
 80010aa:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <arcadeFSM+0x14>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	080010c9 	.word	0x080010c9
 80010b4:	080010d9 	.word	0x080010d9
 80010b8:	08001129 	.word	0x08001129
 80010bc:	080011a9 	.word	0x080011a9
 80010c0:	0800115b 	.word	0x0800115b
 80010c4:	080011a9 	.word	0x080011a9

        case BOOT:

        startScreen();
 80010c8:	f000 f88e 	bl	80011e8 <startScreen>
		systemInit();
 80010cc:	f000 f884 	bl	80011d8 <systemInit>
		arcadeState = MENU;
 80010d0:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <arcadeFSM+0x124>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]

            break;
 80010d6:	e06e      	b.n	80011b6 <arcadeFSM+0x11a>

        case MENU:
        	char text1[] = "NUCLEO ARCADE SHIELD VO1";
 80010d8:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <arcadeFSM+0x128>)
 80010da:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80010de:	461d      	mov	r5, r3
 80010e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e8:	c403      	stmia	r4!, {r0, r1}
 80010ea:	7022      	strb	r2, [r4, #0]
        	char text2[] = "PRESIONE START PARA COMENZAR";
 80010ec:	4b36      	ldr	r3, [pc, #216]	@ (80011c8 <arcadeFSM+0x12c>)
 80010ee:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80010f2:	461d      	mov	r5, r3
 80010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010fc:	c407      	stmia	r4!, {r0, r1, r2}
 80010fe:	7023      	strb	r3, [r4, #0]
        	scrollTextDual(0, text1, 8, text2);
 8001100:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001104:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8001108:	2208      	movs	r2, #8
 800110a:	2000      	movs	r0, #0
 800110c:	f000 fa84 	bl	8001618 <scrollTextDual>
        	if (readKey(1)){
 8001110:	2001      	movs	r0, #1
 8001112:	f000 fc63 	bl	80019dc <readKey>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d047      	beq.n	80011ac <arcadeFSM+0x110>
        		arcadeState = PLAYING;
 800111c:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <arcadeFSM+0x124>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
        		snakeInit();
 8001122:	f000 fcd1 	bl	8001ac8 <snakeInit>
        	}
            break;
 8001126:	e041      	b.n	80011ac <arcadeFSM+0x110>

        case PLAYING:
        	if(snakeUpdate() == false){
 8001128:	f000 fe0a 	bl	8001d40 <snakeUpdate>
 800112c:	4603      	mov	r3, r0
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d03b      	beq.n	80011b0 <arcadeFSM+0x114>
        		if(currentScore > loadScore()){
 8001138:	f7ff fe9c 	bl	8000e74 <loadScore>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <arcadeFSM+0x130>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d204      	bcs.n	8001152 <arcadeFSM+0xb6>
        			saveScore(currentScore);
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <arcadeFSM+0x130>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe84 	bl	8000e5a <saveScore>
        		}
        		arcadeState = GAME_OVER;
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <arcadeFSM+0x124>)
 8001154:	2204      	movs	r2, #4
 8001156:	701a      	strb	r2, [r3, #0]
        	}
            break;
 8001158:	e02a      	b.n	80011b0 <arcadeFSM+0x114>

            break;

        case GAME_OVER:
        	char text3[40];
        	sprintf(text3,"TU PUNTUACION FUE: %u", currentScore);
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <arcadeFSM+0x130>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	491b      	ldr	r1, [pc, #108]	@ (80011d0 <arcadeFSM+0x134>)
 8001164:	4618      	mov	r0, r3
 8001166:	f004 f879 	bl	800525c <siprintf>
        	char text4[40];
        	sprintf(text4,"LA PUNTUACION MAS ALTA ES: %u", loadScore());
 800116a:	f7ff fe83 	bl	8000e74 <loadScore>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001176:	4917      	ldr	r1, [pc, #92]	@ (80011d4 <arcadeFSM+0x138>)
 8001178:	4618      	mov	r0, r3
 800117a:	f004 f86f 	bl	800525c <siprintf>
        	scrollTextDual(0, text3, 8, text4);
 800117e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001182:	1d39      	adds	r1, r7, #4
 8001184:	2208      	movs	r2, #8
 8001186:	2000      	movs	r0, #0
 8001188:	f000 fa46 	bl	8001618 <scrollTextDual>
            if (readKey(1)) {
 800118c:	2001      	movs	r0, #1
 800118e:	f000 fc25 	bl	80019dc <readKey>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00d      	beq.n	80011b4 <arcadeFSM+0x118>
                arcadeState = MENU;
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <arcadeFSM+0x124>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
            }

            break;
 800119e:	e009      	b.n	80011b4 <arcadeFSM+0x118>
        case HSCORE:

            break;

        default:
            arcadeState = BOOT;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <arcadeFSM+0x124>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
            break;
 80011a6:	e006      	b.n	80011b6 <arcadeFSM+0x11a>
            break;
 80011a8:	bf00      	nop
 80011aa:	e004      	b.n	80011b6 <arcadeFSM+0x11a>
            break;
 80011ac:	bf00      	nop
 80011ae:	e002      	b.n	80011b6 <arcadeFSM+0x11a>
            break;
 80011b0:	bf00      	nop
 80011b2:	e000      	b.n	80011b6 <arcadeFSM+0x11a>
            break;
 80011b4:	bf00      	nop
    }
}
 80011b6:	bf00      	nop
 80011b8:	3790      	adds	r7, #144	@ 0x90
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000021c 	.word	0x2000021c
 80011c4:	08006414 	.word	0x08006414
 80011c8:	08006430 	.word	0x08006430
 80011cc:	200002d6 	.word	0x200002d6
 80011d0:	080063dc 	.word	0x080063dc
 80011d4:	080063f4 	.word	0x080063f4

080011d8 <systemInit>:

void systemInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    // Inicializa el hardware necesario
	board_gpio_init();
 80011dc:	f7ff feae 	bl	8000f3c <board_gpio_init>
	MAX7219_InitAll();
 80011e0:	f000 f82e 	bl	8001240 <MAX7219_InitAll>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <startScreen>:

void startScreen(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

    for(uint8_t k = 0 ; k < 20 ; k++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e018      	b.n	8001226 <startScreen+0x3e>

    	for(uint8_t x = 0; x < DISPLAY_ROWS ; x++){
 80011f4:	2300      	movs	r3, #0
 80011f6:	71bb      	strb	r3, [r7, #6]
 80011f8:	e008      	b.n	800120c <startScreen+0x24>
        	setPixel16(x, x, 1);
 80011fa:	79b9      	ldrb	r1, [r7, #6]
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	2201      	movs	r2, #1
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f875 	bl	80012f0 <setPixel16>
    	for(uint8_t x = 0; x < DISPLAY_ROWS ; x++){
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	3301      	adds	r3, #1
 800120a:	71bb      	strb	r3, [r7, #6]
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	d9f3      	bls.n	80011fa <startScreen+0x12>
        }
    	updateDisplay16();
 8001212:	f000 f8fb 	bl	800140c <updateDisplay16>
    	shiftLeft16();
 8001216:	f000 f939 	bl	800148c <shiftLeft16>
    	HAL_Delay(100);
 800121a:	2064      	movs	r0, #100	@ 0x64
 800121c:	f000 fe64 	bl	8001ee8 <HAL_Delay>
    for(uint8_t k = 0 ; k < 20 ; k++){
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	3301      	adds	r3, #1
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b13      	cmp	r3, #19
 800122a:	d9e3      	bls.n	80011f4 <startScreen+0xc>
    }
    fill16(0);
 800122c:	2000      	movs	r0, #0
 800122e:	f000 f9dd 	bl	80015ec <fill16>
    updateDisplay16();
 8001232:	f000 f8eb 	bl	800140c <updateDisplay16>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <MAX7219_InitAll>:
static uint8_t frameBuffer16[DISPLAY_ROWS][DISPLAY_COLS/8]; // representacion del display en RAM

// Se inicializan los 4 displays

void MAX7219_InitAll(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af02      	add	r7, sp, #8

    MAX7219_WriteRowAll(MAX7219_SHUTDOWN, 0x01, 0x01, 0x01, 0x01); // 0x0C -> Shutdown | 0x01 -> Operacion Normal
 8001246:	2301      	movs	r3, #1
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	2201      	movs	r2, #1
 800124e:	2101      	movs	r1, #1
 8001250:	200c      	movs	r0, #12
 8001252:	f000 faa5 	bl	80017a0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_SCAN, 0x07, 0x07, 0x07, 0x07); // 0x0B -> Escaneo del Display (filas) | 0x07 -> Habilita las 8 filas
 8001256:	2307      	movs	r3, #7
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2307      	movs	r3, #7
 800125c:	2207      	movs	r2, #7
 800125e:	2107      	movs	r1, #7
 8001260:	200b      	movs	r0, #11
 8001262:	f000 fa9d 	bl	80017a0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_MODE, 0x00, 0x00, 0x00, 0x00); // 0x09 -> Modo del Display (Matriz, 7 segmentos) | 0x00 -> Sin Decode (Matriz)
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2009      	movs	r0, #9
 8001272:	f000 fa95 	bl	80017a0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_BRIGHTNESS, 0x02, 0x02, 0x02, 0x02); // 0x0A -> Brillo del Display | 0x02 -> Configurable de 0 a 15 (PWM)
 8001276:	2302      	movs	r3, #2
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2302      	movs	r3, #2
 800127c:	2202      	movs	r2, #2
 800127e:	2102      	movs	r1, #2
 8001280:	200a      	movs	r0, #10
 8001282:	f000 fa8d 	bl	80017a0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_TEST, 0x00, 0x00, 0x00, 0x00); // 0x0F -> Test del Display | 0x00 -> Test Apagado
 8001286:	2300      	movs	r3, #0
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	200f      	movs	r0, #15
 8001292:	f000 fa85 	bl	80017a0 <MAX7219_WriteRowAll>

    // Limpia la pantalla
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 8001296:	2301      	movs	r3, #1
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	e00a      	b.n	80012b2 <MAX7219_InitAll+0x72>
        MAX7219_WriteRowAll(row, 0xFF, 0xFF, 0xFF, 0xFF);
 800129c:	79f8      	ldrb	r0, [r7, #7]
 800129e:	23ff      	movs	r3, #255	@ 0xff
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	23ff      	movs	r3, #255	@ 0xff
 80012a4:	22ff      	movs	r2, #255	@ 0xff
 80012a6:	21ff      	movs	r1, #255	@ 0xff
 80012a8:	f000 fa7a 	bl	80017a0 <MAX7219_WriteRowAll>
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	3301      	adds	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d9f1      	bls.n	800129c <MAX7219_InitAll+0x5c>
    }

    // Limpia el frameBuffer
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 80012b8:	2300      	movs	r3, #0
 80012ba:	71bb      	strb	r3, [r7, #6]
 80012bc:	e00d      	b.n	80012da <MAX7219_InitAll+0x9a>
    	frameBuffer16[row][0] = 0;
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <MAX7219_InitAll+0xac>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    	frameBuffer16[row][1] = 0;
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <MAX7219_InitAll+0xac>)
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	2200      	movs	r2, #0
 80012d2:	705a      	strb	r2, [r3, #1]
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	3301      	adds	r3, #1
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d9ee      	bls.n	80012be <MAX7219_InitAll+0x7e>
    }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000220 	.word	0x20000220

080012f0 <setPixel16>:


// enciende o apaga un pixel de la matriz
void setPixel16(uint8_t x, uint8_t y, bool on) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d840      	bhi.n	800138a <setPixel16+0x9a>
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	d83d      	bhi.n	800138a <setPixel16+0x9a>

    uint8_t byteIndex = x / 8;       // 0 o 1
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	73fb      	strb	r3, [r7, #15]
    uint8_t bitIndex  = x % 8;       // 0 a 7
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	73bb      	strb	r3, [r7, #14]

    if (on)
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d018      	beq.n	8001354 <setPixel16+0x64>
        frameBuffer16[y][byteIndex] |=  (1 << bitIndex);
 8001322:	79ba      	ldrb	r2, [r7, #6]
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	491c      	ldr	r1, [pc, #112]	@ (8001398 <setPixel16+0xa8>)
 8001328:	0052      	lsls	r2, r2, #1
 800132a:	440a      	add	r2, r1
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b25a      	sxtb	r2, r3
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	b25b      	sxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b259      	sxtb	r1, r3
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	b2c8      	uxtb	r0, r1
 8001346:	4914      	ldr	r1, [pc, #80]	@ (8001398 <setPixel16+0xa8>)
 8001348:	0052      	lsls	r2, r2, #1
 800134a:	440a      	add	r2, r1
 800134c:	4413      	add	r3, r2
 800134e:	4602      	mov	r2, r0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e01b      	b.n	800138c <setPixel16+0x9c>
    else
        frameBuffer16[y][byteIndex] &= ~(1 << bitIndex);
 8001354:	79ba      	ldrb	r2, [r7, #6]
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	490f      	ldr	r1, [pc, #60]	@ (8001398 <setPixel16+0xa8>)
 800135a:	0052      	lsls	r2, r2, #1
 800135c:	440a      	add	r2, r1
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b25a      	sxtb	r2, r3
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	b25b      	sxtb	r3, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	b25b      	sxtb	r3, r3
 8001372:	4013      	ands	r3, r2
 8001374:	b259      	sxtb	r1, r3
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	b2c8      	uxtb	r0, r1
 800137c:	4906      	ldr	r1, [pc, #24]	@ (8001398 <setPixel16+0xa8>)
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	440a      	add	r2, r1
 8001382:	4413      	add	r3, r2
 8001384:	4602      	mov	r2, r0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e000      	b.n	800138c <setPixel16+0x9c>
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 800138a:	bf00      	nop
}
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000220 	.word	0x20000220

0800139c <reverseBits>:

// funcion auxiliar para "dar vuelta" los displays de abajo
static uint8_t reverseBits(uint8_t b) {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	109b      	asrs	r3, r3, #2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	105b      	asrs	r3, r3, #1
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	71fb      	strb	r3, [r7, #7]
    return b;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <updateDisplay16>:

// actualiza el display con lo que hay en el frameBuffer
void updateDisplay16(void)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af02      	add	r7, sp, #8
    for (uint8_t y = 0; y < 8; y++) {
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	e02f      	b.n	8001478 <updateDisplay16+0x6c>
        uint8_t TL = frameBuffer16[y][1];
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <updateDisplay16+0x7c>)
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	71bb      	strb	r3, [r7, #6]
        uint8_t TR = frameBuffer16[y][0];
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4a18      	ldr	r2, [pc, #96]	@ (8001488 <updateDisplay16+0x7c>)
 8001428:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800142c:	717b      	strb	r3, [r7, #5]
        uint8_t BL = reverseBits(frameBuffer16[15-y][1]);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f1c3 030f 	rsb	r3, r3, #15
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <updateDisplay16+0x7c>)
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffad 	bl	800139c <reverseBits>
 8001442:	4603      	mov	r3, r0
 8001444:	713b      	strb	r3, [r7, #4]
        uint8_t BR = reverseBits(frameBuffer16[15-y][0]);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f1c3 030f 	rsb	r3, r3, #15
 800144c:	4a0e      	ldr	r2, [pc, #56]	@ (8001488 <updateDisplay16+0x7c>)
 800144e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ffa2 	bl	800139c <reverseBits>
 8001458:	4603      	mov	r3, r0
 800145a:	70fb      	strb	r3, [r7, #3]

        MAX7219_WriteRowAll(y + 1, TR, TL, BL, BR);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	3301      	adds	r3, #1
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	793c      	ldrb	r4, [r7, #4]
 8001464:	79ba      	ldrb	r2, [r7, #6]
 8001466:	7979      	ldrb	r1, [r7, #5]
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	4623      	mov	r3, r4
 800146e:	f000 f997 	bl	80017a0 <MAX7219_WriteRowAll>
    for (uint8_t y = 0; y < 8; y++) {
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	3301      	adds	r3, #1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d9cc      	bls.n	8001418 <updateDisplay16+0xc>
    }
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	20000220 	.word	0x20000220

0800148c <shiftLeft16>:

// desplaza lo que hay en el frameBuffer una posicion a la izquierda
void shiftLeft16(void){
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0

	for(uint8_t y = 0 ; y < DISPLAY_ROWS ; y++){
 8001492:	2300      	movs	r3, #0
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	e02e      	b.n	80014f6 <shiftLeft16+0x6a>

		uint16_t combined = ((uint16_t)frameBuffer16[y][0] << 8) | frameBuffer16[y][1];
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <shiftLeft16+0x80>)
 800149c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4918      	ldr	r1, [pc, #96]	@ (800150c <shiftLeft16+0x80>)
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	80bb      	strh	r3, [r7, #4]

		uint16_t msb = (combined & 0x8000) >> 15;
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	0bdb      	lsrs	r3, r3, #15
 80014bc:	807b      	strh	r3, [r7, #2]

		combined = (combined << 1) | msb;
 80014be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	80bb      	strh	r3, [r7, #4]

		frameBuffer16[y][0] =  combined >> 8 & 0xFF;
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	b2d1      	uxtb	r1, r2
 80014da:	4a0c      	ldr	r2, [pc, #48]	@ (800150c <shiftLeft16+0x80>)
 80014dc:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		frameBuffer16[y][1] =  combined & 0xFF;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	88ba      	ldrh	r2, [r7, #4]
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <shiftLeft16+0x80>)
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	460a      	mov	r2, r1
 80014ee:	705a      	strb	r2, [r3, #1]
	for(uint8_t y = 0 ; y < DISPLAY_ROWS ; y++){
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	3301      	adds	r3, #1
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d9cd      	bls.n	8001498 <shiftLeft16+0xc>
	}
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000220 	.word	0x20000220

08001510 <findChar>:

// funcion auxiliar que busca un caracter en la lista de caracteres y devuelve un puntero a ese caracter
static const Chars5x7* findChar(char character){
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]

	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e015      	b.n	800154c <findChar+0x3c>
		if(font5x7[k].ch == character){
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	490f      	ldr	r1, [pc, #60]	@ (8001560 <findChar+0x50>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	440b      	add	r3, r1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	429a      	cmp	r2, r3
 8001534:	d107      	bne.n	8001546 <findChar+0x36>
			return &font5x7[k];
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4a07      	ldr	r2, [pc, #28]	@ (8001560 <findChar+0x50>)
 8001542:	4413      	add	r3, r2
 8001544:	e006      	b.n	8001554 <findChar+0x44>
	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b27      	cmp	r3, #39	@ 0x27
 8001550:	d9e6      	bls.n	8001520 <findChar+0x10>
		}
	}
	return &font5x7[0];
 8001552:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <findChar+0x50>)
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	08006474 	.word	0x08006474

08001564 <drawChar16>:

// dibuja un caracter con la esquina superior izquierda ubicada en (x,y)

void drawChar16(uint8_t x, uint8_t y, char character) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	460b      	mov	r3, r1
 8001570:	71bb      	strb	r3, [r7, #6]
 8001572:	4613      	mov	r3, r2
 8001574:	717b      	strb	r3, [r7, #5]

	const Chars5x7* symbol = findChar(character);
 8001576:	797b      	ldrb	r3, [r7, #5]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffc9 	bl	8001510 <findChar>
 800157e:	6138      	str	r0, [r7, #16]

    for (uint8_t column = 0; column < 5; column++) {
 8001580:	2300      	movs	r3, #0
 8001582:	75fb      	strb	r3, [r7, #23]
 8001584:	e029      	b.n	80015da <drawChar16+0x76>
        uint8_t columnBits = symbol->col[column];
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4413      	add	r3, r2
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	73fb      	strb	r3, [r7, #15]

        for (uint8_t row = 0; row < 7; row++) {
 8001590:	2300      	movs	r3, #0
 8001592:	75bb      	strb	r3, [r7, #22]
 8001594:	e01b      	b.n	80015ce <drawChar16+0x6a>
            bool on = columnBits & (1 << row);
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	7dbb      	ldrb	r3, [r7, #22]
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	73bb      	strb	r3, [r7, #14]
            setPixel16(x + (4- column), y + row, on);
 80015ac:	79fa      	ldrb	r2, [r7, #7]
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3304      	adds	r3, #4
 80015b6:	b2d8      	uxtb	r0, r3
 80015b8:	79ba      	ldrb	r2, [r7, #6]
 80015ba:	7dbb      	ldrb	r3, [r7, #22]
 80015bc:	4413      	add	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	7bba      	ldrb	r2, [r7, #14]
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fe94 	bl	80012f0 <setPixel16>
        for (uint8_t row = 0; row < 7; row++) {
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	3301      	adds	r3, #1
 80015cc:	75bb      	strb	r3, [r7, #22]
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d9e0      	bls.n	8001596 <drawChar16+0x32>
    for (uint8_t column = 0; column < 5; column++) {
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	3301      	adds	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d9d2      	bls.n	8001586 <drawChar16+0x22>
        }
    }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <fill16>:

void fill16(bool on)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
    memset(frameBuffer16, on ? 0xFF : 0x00, sizeof(frameBuffer16)); // llena el buffer con 0 o con 1
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <fill16+0x14>
 80015fc:	23ff      	movs	r3, #255	@ 0xff
 80015fe:	e000      	b.n	8001602 <fill16+0x16>
 8001600:	2300      	movs	r3, #0
 8001602:	2220      	movs	r2, #32
 8001604:	4619      	mov	r1, r3
 8001606:	4803      	ldr	r0, [pc, #12]	@ (8001614 <fill16+0x28>)
 8001608:	f003 fe8d 	bl	8005326 <memset>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000220 	.word	0x20000220

08001618 <scrollTextDual>:


void scrollTextDual(uint8_t y1, char *text1, uint8_t y2, char *text2) {
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b08b      	sub	sp, #44	@ 0x2c
 800161c:	af00      	add	r7, sp, #0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	4613      	mov	r3, r2
 8001628:	73bb      	strb	r3, [r7, #14]

    static int16_t offset = -16;     // posición inicial (fuera de la pantalla)
    static delay_t scrollDelay;
    static bool initialized = false;

    if (!initialized) {
 800162a:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <scrollTextDual+0x14c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f083 0301 	eor.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <scrollTextDual+0x2e>
        delayInit(&scrollDelay, 120);  // velocidad del scroll
 8001638:	2178      	movs	r1, #120	@ 0x78
 800163a:	484b      	ldr	r0, [pc, #300]	@ (8001768 <scrollTextDual+0x150>)
 800163c:	f000 f8e2 	bl	8001804 <delayInit>
        initialized = true;
 8001640:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <scrollTextDual+0x14c>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
    }

    if (delayRead(&scrollDelay)) {
 8001646:	4848      	ldr	r0, [pc, #288]	@ (8001768 <scrollTextDual+0x150>)
 8001648:	f000 f8ed 	bl	8001826 <delayRead>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8083 	beq.w	800175a <scrollTextDual+0x142>
        fill16(0);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff ffc9 	bl	80015ec <fill16>

        // --- Primera línea ---
        int len1 = strlen(text1);
 800165a:	68b8      	ldr	r0, [r7, #8]
 800165c:	f7fe fdd8 	bl	8000210 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < len1; i++) {
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
 8001668:	e01a      	b.n	80016a0 <scrollTextDual+0x88>
            // Como X crece hacia la izquierda, restamos el avance
            int16_t x = offset - i * 6;
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	b29b      	uxth	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b3c      	ldr	r3, [pc, #240]	@ (800176c <scrollTextDual+0x154>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4413      	add	r3, r2
 8001682:	b29b      	uxth	r3, r3
 8001684:	823b      	strh	r3, [r7, #16]
            drawChar16(x, y1, text1[i]);
 8001686:	8a3b      	ldrh	r3, [r7, #16]
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	4413      	add	r3, r2
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff ff65 	bl	8001564 <drawChar16>
        for (int i = 0; i < len1; i++) {
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	3301      	adds	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbe0      	blt.n	800166a <scrollTextDual+0x52>
        }

        // --- Segunda línea ---
        int len2 = strlen(text2);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7fe fdb1 	bl	8000210 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < len2; i++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	e01a      	b.n	80016ee <scrollTextDual+0xd6>
            int16_t x = offset - i * 6;
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b29      	ldr	r3, [pc, #164]	@ (800176c <scrollTextDual+0x154>)
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	827b      	strh	r3, [r7, #18]
            drawChar16(x, y2, text2[i]);
 80016d4:	8a7b      	ldrh	r3, [r7, #18]
 80016d6:	b2d8      	uxtb	r0, r3
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff ff3e 	bl	8001564 <drawChar16>
        for (int i = 0; i < len2; i++) {
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	3301      	adds	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
 80016ee:	6a3a      	ldr	r2, [r7, #32]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbe0      	blt.n	80016b8 <scrollTextDual+0xa0>
        }

        updateDisplay16();
 80016f6:	f7ff fe89 	bl	800140c <updateDisplay16>

        // En tu sistema, para moverse “hacia la izquierda visual” hay que sumar
        offset++;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <scrollTextDual+0x154>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	b29b      	uxth	r3, r3
 8001702:	3301      	adds	r3, #1
 8001704:	b29b      	uxth	r3, r3
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <scrollTextDual+0x154>)
 800170a:	801a      	strh	r2, [r3, #0]

        // cuando el texto salió completamente del display, reinicia
        int textWidth = (strlen(text1) > strlen(text2) ? strlen(text1) : strlen(text2)) * 6;
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f7fe fd7f 	bl	8000210 <strlen>
 8001712:	4604      	mov	r4, r0
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7fe fd7b 	bl	8000210 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	429c      	cmp	r4, r3
 800171e:	d908      	bls.n	8001732 <scrollTextDual+0x11a>
 8001720:	68b8      	ldr	r0, [r7, #8]
 8001722:	f7fe fd75 	bl	8000210 <strlen>
 8001726:	4602      	mov	r2, r0
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	e007      	b.n	8001742 <scrollTextDual+0x12a>
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe fd6c 	bl	8000210 <strlen>
 8001738:	4602      	mov	r2, r0
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	617b      	str	r3, [r7, #20]
        if (offset > textWidth) offset = -16;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <scrollTextDual+0x154>)
 8001746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174a:	461a      	mov	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	4293      	cmp	r3, r2
 8001750:	da03      	bge.n	800175a <scrollTextDual+0x142>
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <scrollTextDual+0x154>)
 8001754:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8001758:	801a      	strh	r2, [r3, #0]
    }
}
 800175a:	bf00      	nop
 800175c:	372c      	adds	r7, #44	@ 0x2c
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000240 	.word	0x20000240
 8001768:	20000244 	.word	0x20000244
 800176c:	20000004 	.word	0x20000004

08001770 <MAX7219_Select>:
#include "max7219_port_stm32.h"
#include "boardConfig.h"

static void MAX7219_Select(void)   { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET); }
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800177a:	4802      	ldr	r0, [pc, #8]	@ (8001784 <MAX7219_Select+0x14>)
 800177c:	f000 feb8 	bl	80024f0 <HAL_GPIO_WritePin>
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020800 	.word	0x40020800

08001788 <MAX7219_Deselect>:
static void MAX7219_Deselect(void) { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET); }
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001792:	4802      	ldr	r0, [pc, #8]	@ (800179c <MAX7219_Deselect+0x14>)
 8001794:	f000 feac 	bl	80024f0 <HAL_GPIO_WritePin>
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020800 	.word	0x40020800

080017a0 <MAX7219_WriteRowAll>:

void MAX7219_WriteRowAll(uint8_t row, uint8_t TR, uint8_t TL, uint8_t BL, uint8_t BR)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4604      	mov	r4, r0
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4623      	mov	r3, r4
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	4603      	mov	r3, r0
 80017b4:	71bb      	strb	r3, [r7, #6]
 80017b6:	460b      	mov	r3, r1
 80017b8:	717b      	strb	r3, [r7, #5]
 80017ba:	4613      	mov	r3, r2
 80017bc:	713b      	strb	r3, [r7, #4]
    // Recordá: el primer par de bytes que mandamos termina en el módulo más LEJANO (BL)
    uint8_t frame[8] = {
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	723b      	strb	r3, [r7, #8]
 80017c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c6:	727b      	strb	r3, [r7, #9]
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	72bb      	strb	r3, [r7, #10]
 80017cc:	793b      	ldrb	r3, [r7, #4]
 80017ce:	72fb      	strb	r3, [r7, #11]
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	733b      	strb	r3, [r7, #12]
 80017d4:	797b      	ldrb	r3, [r7, #5]
 80017d6:	737b      	strb	r3, [r7, #13]
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	73bb      	strb	r3, [r7, #14]
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	73fb      	strb	r3, [r7, #15]
        row, BL,   // Display 3
        row, TL,   // Display 2
        row, TR    // Display 1 (más cercano al micro)
    };

    MAX7219_Select();
 80017e0:	f7ff ffc6 	bl	8001770 <MAX7219_Select>
    HAL_SPI_Transmit(&hspi2, frame, sizeof(frame), HAL_MAX_DELAY);
 80017e4:	f107 0108 	add.w	r1, r7, #8
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ec:	2208      	movs	r2, #8
 80017ee:	4804      	ldr	r0, [pc, #16]	@ (8001800 <MAX7219_WriteRowAll+0x60>)
 80017f0:	f002 fe31 	bl	8004456 <HAL_SPI_Transmit>
    MAX7219_Deselect();
 80017f4:	f7ff ffc8 	bl	8001788 <MAX7219_Deselect>
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	20000178 	.word	0x20000178

08001804 <delayInit>:

static bool_t delayIsRunning(delay_t * delay){
	return delay->running;
}

void delayInit(delay_t * delay, tick_t duration){
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

	delay->duration = duration;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	721a      	strb	r2, [r3, #8]

}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <delayRead>:

bool_t delayRead(delay_t * delay){
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]

	if (delay->running == false){
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7a1b      	ldrb	r3, [r3, #8]
 8001832:	f083 0301 	eor.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <delayRead+0x26>
		delay->startTime = HAL_GetTick();
 800183c:	f000 fb48 	bl	8001ed0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	721a      	strb	r2, [r3, #8]
	}

	if ((delay->running == true) && (HAL_GetTick() - delay->startTime > delay->duration)){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7a1b      	ldrb	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00e      	beq.n	8001872 <delayRead+0x4c>
 8001854:	f000 fb3c 	bl	8001ed0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1ad2      	subs	r2, r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	d904      	bls.n	8001872 <delayRead+0x4c>

		delay->running = false;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	721a      	strb	r2, [r3, #8]
		return true; //si paso el tiempo devuelve "true"
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <delayRead+0x4e>

	}else{
		return false; //si aun no paso el tiempo devuelve "false"
 8001872:	2300      	movs	r3, #0
	}
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <debounceFSM_init>:
		delay->duration = duration;
	}
}

// debounceFSM_init carga el estado inicial en BUTTON_UP
void debounceFSM_init(button_t * btn){
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	btn -> state = BUTTON_UP;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	719a      	strb	r2, [r3, #6]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <debounceFSM_update>:

// debounceFSM_update maneja los cambios de estado
void debounceFSM_update(button_t * btn){
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

	bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin); // lee el estado del pin
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	889b      	ldrh	r3, [r3, #4]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f000 fe08 	bl	80024c0 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]

	switch(btn -> state){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	799b      	ldrb	r3, [r3, #6]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d87c      	bhi.n	80019be <debounceFSM_update+0x126>
 80018c4:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <debounceFSM_update+0x34>)
 80018c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ca:	bf00      	nop
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	08001909 	.word	0x08001909
 80018d4:	08001957 	.word	0x08001957
 80018d8:	0800197d 	.word	0x0800197d
		case BUTTON_UP:

			if(!pin){
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	f083 0301 	eor.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d06e      	beq.n	80019c6 <debounceFSM_update+0x12e>
				btn -> state = BUTTON_FALLING;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	719a      	strb	r2, [r3, #6]
				delayInit(&btn->delay,debounceDelay);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3308      	adds	r3, #8
 80018f2:	221e      	movs	r2, #30
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff84 	bl	8001804 <delayInit>
				delayRead(&btn->delay);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3308      	adds	r3, #8
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff90 	bl	8001826 <delayRead>
			}
			break;
 8001906:	e05e      	b.n	80019c6 <debounceFSM_update+0x12e>

		case BUTTON_FALLING:

			if(delayRead(&btn->delay)==true){
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3308      	adds	r3, #8
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff8a 	bl	8001826 <delayRead>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d058      	beq.n	80019ca <debounceFSM_update+0x132>
				bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	889b      	ldrh	r3, [r3, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f000 fdcc 	bl	80024c0 <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	737b      	strb	r3, [r7, #13]
				if(!pin){										// si paso el tiempo y el boton continua apretado, se enciende el LED y cambia al estado BUTTON_DOWN
 8001934:	7b7b      	ldrb	r3, [r7, #13]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <debounceFSM_update+0xb6>
					btn->pressed = true; 						// buttonState se hace true cuando se confirma que el boton esta presionado
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	751a      	strb	r2, [r3, #20]
					btn -> state = BUTTON_DOWN;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	719a      	strb	r2, [r3, #6]
				}else{btn -> state = BUTTON_UP;}
			}

			break;
 800194c:	e03d      	b.n	80019ca <debounceFSM_update+0x132>
				}else{btn -> state = BUTTON_UP;}
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	719a      	strb	r2, [r3, #6]
			break;
 8001954:	e039      	b.n	80019ca <debounceFSM_update+0x132>

		case BUTTON_DOWN:

			if(pin){
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d038      	beq.n	80019ce <debounceFSM_update+0x136>
				btn -> state = BUTTON_RAISING;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2203      	movs	r2, #3
 8001960:	719a      	strb	r2, [r3, #6]
				delayInit(&btn->delay,debounceDelay);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3308      	adds	r3, #8
 8001966:	221e      	movs	r2, #30
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff4a 	bl	8001804 <delayInit>
				delayRead(&btn->delay);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3308      	adds	r3, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff56 	bl	8001826 <delayRead>
			}

			break;
 800197a:	e028      	b.n	80019ce <debounceFSM_update+0x136>

		case BUTTON_RAISING:

			if(delayRead(&btn->delay)==true){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3308      	adds	r3, #8
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff50 	bl	8001826 <delayRead>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d022      	beq.n	80019d2 <debounceFSM_update+0x13a>
				bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	889b      	ldrh	r3, [r3, #4]
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f000 fd92 	bl	80024c0 <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	73bb      	strb	r3, [r7, #14]
				if(pin){										// si paso el tiempo y el boton continua suelto, se apaga el LED y cambia al estado BUTTON_UP
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <debounceFSM_update+0x11e>
					btn -> state = BUTTON_UP;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	719a      	strb	r2, [r3, #6]
				}else{
					btn -> state = BUTTON_DOWN;
				}
			}

			break;
 80019b4:	e00d      	b.n	80019d2 <debounceFSM_update+0x13a>
					btn -> state = BUTTON_DOWN;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	719a      	strb	r2, [r3, #6]
			break;
 80019bc:	e009      	b.n	80019d2 <debounceFSM_update+0x13a>

		default:
			debounceFSM_init(btn);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff5c 	bl	800187c <debounceFSM_init>
			break;
 80019c4:	e006      	b.n	80019d4 <debounceFSM_update+0x13c>
			break;
 80019c6:	bf00      	nop
 80019c8:	e004      	b.n	80019d4 <debounceFSM_update+0x13c>
			break;
 80019ca:	bf00      	nop
 80019cc:	e002      	b.n	80019d4 <debounceFSM_update+0x13c>
			break;
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <debounceFSM_update+0x13c>
			break;
 80019d2:	bf00      	nop
	}
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <readKey>:

bool readKey(uint8_t i){												// readKey es una funcion publica a la que se le puede consultar por el estado del boton
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	if(buttons[i].pressed){
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	490e      	ldr	r1, [pc, #56]	@ (8001a24 <readKey+0x48>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3314      	adds	r3, #20
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <readKey+0x38>
		buttons[i].pressed = false;
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	4909      	ldr	r1, [pc, #36]	@ (8001a24 <readKey+0x48>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3314      	adds	r3, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
		return true;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <readKey+0x3a>
	}else{
		return false;
 8001a14:	2300      	movs	r3, #0
	}
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008

08001a28 <spawnFood>:

extern ArcadeState_t arcadeState;



static void spawnFood(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
    uint8_t valid = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]
    while (!valid) {
 8001a32:	e03c      	b.n	8001aae <spawnFood+0x86>
        food.pos.x = rand() % DISPLAY_COLS;
 8001a34:	f003 fb12 	bl	800505c <rand>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	425a      	negs	r2, r3
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	f002 020f 	and.w	r2, r2, #15
 8001a44:	bf58      	it	pl
 8001a46:	4253      	negpl	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <spawnFood+0x98>)
 8001a4c:	701a      	strb	r2, [r3, #0]
        food.pos.y = rand() % DISPLAY_ROWS;
 8001a4e:	f003 fb05 	bl	800505c <rand>
 8001a52:	4603      	mov	r3, r0
 8001a54:	425a      	negs	r2, r3
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	f002 020f 	and.w	r2, r2, #15
 8001a5e:	bf58      	it	pl
 8001a60:	4253      	negpl	r3, r2
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <spawnFood+0x98>)
 8001a66:	705a      	strb	r2, [r3, #1]
        valid = 1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	71fb      	strb	r3, [r7, #7]
        for (int i = 0; i < snake.length; i++) {
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	e016      	b.n	8001aa0 <spawnFood+0x78>
            if (food.pos.x == snake.body[i].x && food.pos.y == snake.body[i].y) {
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <spawnFood+0x98>)
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	4913      	ldr	r1, [pc, #76]	@ (8001ac4 <spawnFood+0x9c>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d10b      	bne.n	8001a9a <spawnFood+0x72>
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <spawnFood+0x98>)
 8001a84:	785a      	ldrb	r2, [r3, #1]
 8001a86:	490f      	ldr	r1, [pc, #60]	@ (8001ac4 <spawnFood+0x9c>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	440b      	add	r3, r1
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d102      	bne.n	8001a9a <spawnFood+0x72>
                valid = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71fb      	strb	r3, [r7, #7]
                break;
 8001a98:	e009      	b.n	8001aae <spawnFood+0x86>
        for (int i = 0; i < snake.length; i++) {
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <spawnFood+0x9c>)
 8001aa2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	dbe1      	blt.n	8001a72 <spawnFood+0x4a>
    while (!valid) {
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0bf      	beq.n	8001a34 <spawnFood+0xc>
            }
        }
    }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200002d4 	.word	0x200002d4
 8001ac4:	20000250 	.word	0x20000250

08001ac8 <snakeInit>:

void snakeInit(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0

	delayInit(&snakeSpeed, 120);
 8001ace:	2178      	movs	r1, #120	@ 0x78
 8001ad0:	4825      	ldr	r0, [pc, #148]	@ (8001b68 <snakeInit+0xa0>)
 8001ad2:	f7ff fe97 	bl	8001804 <delayInit>
    snakeSpeed.running = false;   // por las dudas
 8001ad6:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <snakeInit+0xa0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	721a      	strb	r2, [r3, #8]
    snakeSpeed.startTime = 0;
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <snakeInit+0xa0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
    snake.length = 3;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <snakeInit+0xa4>)
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    snake.dir = UP;
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <snakeInit+0xa4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    snake.snakeStatus = ALIVE;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <snakeInit+0xa4>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    snake.body[0] = (PositionXY_t){8, 8};
 8001afa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b6c <snakeInit+0xa4>)
 8001afc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <snakeInit+0xa8>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	8013      	strh	r3, [r2, #0]
    snake.body[1] = (PositionXY_t){7, 8};
 8001b02:	4a1a      	ldr	r2, [pc, #104]	@ (8001b6c <snakeInit+0xa4>)
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <snakeInit+0xac>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	8053      	strh	r3, [r2, #2]
    snake.body[2] = (PositionXY_t){6, 8};
 8001b0a:	4a18      	ldr	r2, [pc, #96]	@ (8001b6c <snakeInit+0xa4>)
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <snakeInit+0xb0>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	8093      	strh	r3, [r2, #4]
    currentScore = snake.length;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <snakeInit+0xa4>)
 8001b14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <snakeInit+0xb4>)
 8001b1c:	801a      	strh	r2, [r3, #0]
    fill16(0);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fd64 	bl	80015ec <fill16>
    spawnFood();
 8001b24:	f7ff ff80 	bl	8001a28 <spawnFood>

    for (int i = 0; i < snake.length; i++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e00f      	b.n	8001b4e <snakeInit+0x86>
        setPixel16(snake.body[i].x, snake.body[i].y, 1);
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <snakeInit+0xa4>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001b36:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <snakeInit+0xa4>)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff fbd4 	bl	80012f0 <setPixel16>
    for (int i = 0; i < snake.length; i++) {
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <snakeInit+0xa4>)
 8001b50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	dbe8      	blt.n	8001b2e <snakeInit+0x66>
    }
    updateDisplay16();
 8001b5c:	f7ff fc56 	bl	800140c <updateDisplay16>

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000098 	.word	0x20000098
 8001b6c:	20000250 	.word	0x20000250
 8001b70:	08006450 	.word	0x08006450
 8001b74:	08006454 	.word	0x08006454
 8001b78:	08006458 	.word	0x08006458
 8001b7c:	200002d6 	.word	0x200002d6

08001b80 <snakeMove>:


static void snakeMove(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0

    PositionXY_t nextMove = snake.body[0];     // determina la proxima posicion de la cabeza
 8001b86:	4b52      	ldr	r3, [pc, #328]	@ (8001cd0 <snakeMove+0x150>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	80bb      	strh	r3, [r7, #4]
    snake.snakeStatus = ALIVE;
 8001b8c:	4b50      	ldr	r3, [pc, #320]	@ (8001cd0 <snakeMove+0x150>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    switch (snake.dir) {
 8001b94:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd0 <snakeMove+0x150>)
 8001b96:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d82a      	bhi.n	8001bf4 <snakeMove+0x74>
 8001b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba4 <snakeMove+0x24>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bc5 	.word	0x08001bc5
 8001bac:	08001bd5 	.word	0x08001bd5
 8001bb0:	08001be5 	.word	0x08001be5
        case UP:
            if (nextMove.y > 0) nextMove.y--;
 8001bb4:	797b      	ldrb	r3, [r7, #5]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d021      	beq.n	8001bfe <snakeMove+0x7e>
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	717b      	strb	r3, [r7, #5]
            break;
 8001bc2:	e01c      	b.n	8001bfe <snakeMove+0x7e>
        case DOWN:
            if (nextMove.y < 15) nextMove.y++;
 8001bc4:	797b      	ldrb	r3, [r7, #5]
 8001bc6:	2b0e      	cmp	r3, #14
 8001bc8:	d81b      	bhi.n	8001c02 <snakeMove+0x82>
 8001bca:	797b      	ldrb	r3, [r7, #5]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	717b      	strb	r3, [r7, #5]
            break;
 8001bd2:	e016      	b.n	8001c02 <snakeMove+0x82>
        case LEFT:
            if (nextMove.x > 0) nextMove.x++;
 8001bd4:	793b      	ldrb	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d015      	beq.n	8001c06 <snakeMove+0x86>
 8001bda:	793b      	ldrb	r3, [r7, #4]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	713b      	strb	r3, [r7, #4]
            break;
 8001be2:	e010      	b.n	8001c06 <snakeMove+0x86>
        case RIGHT:
            if (nextMove.x < 15) nextMove.x--;
 8001be4:	793b      	ldrb	r3, [r7, #4]
 8001be6:	2b0e      	cmp	r3, #14
 8001be8:	d80f      	bhi.n	8001c0a <snakeMove+0x8a>
 8001bea:	793b      	ldrb	r3, [r7, #4]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	713b      	strb	r3, [r7, #4]
            break;
 8001bf2:	e00a      	b.n	8001c0a <snakeMove+0x8a>
        default:
        	snake.dir = UP;
 8001bf4:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <snakeMove+0x150>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            break;
 8001bfc:	e006      	b.n	8001c0c <snakeMove+0x8c>
            break;
 8001bfe:	bf00      	nop
 8001c00:	e004      	b.n	8001c0c <snakeMove+0x8c>
            break;
 8001c02:	bf00      	nop
 8001c04:	e002      	b.n	8001c0c <snakeMove+0x8c>
            break;
 8001c06:	bf00      	nop
 8001c08:	e000      	b.n	8001c0c <snakeMove+0x8c>
            break;
 8001c0a:	bf00      	nop
    }


    if (nextMove.x < 0 || nextMove.x > 15 || nextMove.y < 0 || nextMove.y > 15) { //detecta si choca con paredes
 8001c0c:	793b      	ldrb	r3, [r7, #4]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	d802      	bhi.n	8001c18 <snakeMove+0x98>
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d904      	bls.n	8001c22 <snakeMove+0xa2>
    	snake.snakeStatus = DEAD;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <snakeMove+0x150>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    	return;
 8001c20:	e052      	b.n	8001cc8 <snakeMove+0x148>
    }

    for (int i = 1; i < snake.length; i++) { // detecta si choca con sigo misma
 8001c22:	2301      	movs	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e016      	b.n	8001c56 <snakeMove+0xd6>
        if (snake.body[i].x == nextMove.x && snake.body[i].y == nextMove.y) {
 8001c28:	4a29      	ldr	r2, [pc, #164]	@ (8001cd0 <snakeMove+0x150>)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001c30:	793b      	ldrb	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d10c      	bne.n	8001c50 <snakeMove+0xd0>
 8001c36:	4a26      	ldr	r2, [pc, #152]	@ (8001cd0 <snakeMove+0x150>)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	785a      	ldrb	r2, [r3, #1]
 8001c40:	797b      	ldrb	r3, [r7, #5]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d104      	bne.n	8001c50 <snakeMove+0xd0>
        	snake.snakeStatus = DEAD;
 8001c46:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <snakeMove+0x150>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
        	return;
 8001c4e:	e03b      	b.n	8001cc8 <snakeMove+0x148>
    for (int i = 1; i < snake.length; i++) { // detecta si choca con sigo misma
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <snakeMove+0x150>)
 8001c58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	dbe1      	blt.n	8001c28 <snakeMove+0xa8>
        }
    }

    if((nextMove.x == food.pos.x) && (nextMove.y == food.pos.y)){
 8001c64:	793a      	ldrb	r2, [r7, #4]
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <snakeMove+0x154>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d114      	bne.n	8001c98 <snakeMove+0x118>
 8001c6e:	797a      	ldrb	r2, [r7, #5]
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <snakeMove+0x154>)
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10f      	bne.n	8001c98 <snakeMove+0x118>
    	snake.length += 1;
 8001c78:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <snakeMove+0x150>)
 8001c7a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <snakeMove+0x150>)
 8001c84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    	currentScore += 1;
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <snakeMove+0x158>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <snakeMove+0x158>)
 8001c92:	801a      	strh	r2, [r3, #0]
    	spawnFood();
 8001c94:	f7ff fec8 	bl	8001a28 <spawnFood>
    }


    for (int k = snake.length - 1; k > 0; k--) {
 8001c98:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <snakeMove+0x150>)
 8001c9a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	e00b      	b.n	8001cbc <snakeMove+0x13c>
        snake.body[k] = snake.body[k - 1];
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1e5a      	subs	r2, r3, #1
 8001ca8:	4909      	ldr	r1, [pc, #36]	@ (8001cd0 <snakeMove+0x150>)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4808      	ldr	r0, [pc, #32]	@ (8001cd0 <snakeMove+0x150>)
 8001cae:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001cb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int k = snake.length - 1; k > 0; k--) {
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	dcf0      	bgt.n	8001ca4 <snakeMove+0x124>
    }

    snake.body[0] = nextMove;
 8001cc2:	4a03      	ldr	r2, [pc, #12]	@ (8001cd0 <snakeMove+0x150>)
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	8013      	strh	r3, [r2, #0]
}
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000250 	.word	0x20000250
 8001cd4:	200002d4 	.word	0x200002d4
 8001cd8:	200002d6 	.word	0x200002d6

08001cdc <snakeDraw>:

static void snakeDraw(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0

	fill16(0);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fc82 	bl	80015ec <fill16>

    for (int i = 0; i < snake.length; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	e00f      	b.n	8001d0e <snakeDraw+0x32>
        setPixel16(snake.body[i].x, snake.body[i].y, 1);
 8001cee:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <snakeDraw+0x5c>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <snakeDraw+0x5c>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7ff faf4 	bl	80012f0 <setPixel16>
    for (int i = 0; i < snake.length; i++) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <snakeDraw+0x5c>)
 8001d10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	dbe8      	blt.n	8001cee <snakeDraw+0x12>
    }
    setPixel16(food.pos.x, food.pos.y, 1);
 8001d1c:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <snakeDraw+0x60>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <snakeDraw+0x60>)
 8001d22:	7851      	ldrb	r1, [r2, #1]
 8001d24:	2201      	movs	r2, #1
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fae2 	bl	80012f0 <setPixel16>
    updateDisplay16();
 8001d2c:	f7ff fb6e 	bl	800140c <updateDisplay16>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000250 	.word	0x20000250
 8001d3c:	200002d4 	.word	0x200002d4

08001d40 <snakeUpdate>:


bool snakeUpdate(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

	if (snake.snakeStatus == DEAD){
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <snakeUpdate+0xbc>)
 8001d46:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <snakeUpdate+0x12>
		return false;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e051      	b.n	8001df6 <snakeUpdate+0xb6>
	}

    if (readKey(2) && snake.dir != LEFT) snake.dir = RIGHT;
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff fe42 	bl	80019dc <readKey>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <snakeUpdate+0x30>
 8001d5e:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <snakeUpdate+0xbc>)
 8001d60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d003      	beq.n	8001d70 <snakeUpdate+0x30>
 8001d68:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <snakeUpdate+0xbc>)
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (readKey(3) && snake.dir != DOWN) snake.dir = UP;
 8001d70:	2003      	movs	r0, #3
 8001d72:	f7ff fe33 	bl	80019dc <readKey>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <snakeUpdate+0x4e>
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <snakeUpdate+0xbc>)
 8001d7e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d003      	beq.n	8001d8e <snakeUpdate+0x4e>
 8001d86:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <snakeUpdate+0xbc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (readKey(4) && snake.dir != RIGHT) snake.dir = LEFT;
 8001d8e:	2004      	movs	r0, #4
 8001d90:	f7ff fe24 	bl	80019dc <readKey>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <snakeUpdate+0x6c>
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <snakeUpdate+0xbc>)
 8001d9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d003      	beq.n	8001dac <snakeUpdate+0x6c>
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <snakeUpdate+0xbc>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (readKey(5) && snake.dir != UP) snake.dir = DOWN;
 8001dac:	2005      	movs	r0, #5
 8001dae:	f7ff fe15 	bl	80019dc <readKey>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <snakeUpdate+0x8a>
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <snakeUpdate+0xbc>)
 8001dba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <snakeUpdate+0x8a>
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <snakeUpdate+0xbc>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    if ((HAL_GetTick() - snakeSpeed.startTime) >= snakeSpeed.duration) {
 8001dca:	f000 f881 	bl	8001ed0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <snakeUpdate+0xc0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1ad2      	subs	r2, r2, r3
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <snakeUpdate+0xc0>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d30a      	bcc.n	8001df4 <snakeUpdate+0xb4>
        snakeSpeed.startTime = HAL_GetTick();
 8001dde:	f000 f877 	bl	8001ed0 <HAL_GetTick>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4a06      	ldr	r2, [pc, #24]	@ (8001e00 <snakeUpdate+0xc0>)
 8001de6:	6013      	str	r3, [r2, #0]

        snakeMove();
 8001de8:	f7ff feca 	bl	8001b80 <snakeMove>
        snakeDraw();
 8001dec:	f7ff ff76 	bl	8001cdc <snakeDraw>
        return true;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <snakeUpdate+0xb6>

    }
    return true;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000250 	.word	0x20000250
 8001e00:	20000098 	.word	0x20000098

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f94f 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7fe fdac 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f967 	bl	800213a <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e84:	f000 f92f 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	200000a8 	.word	0x200000a8
 8001ea4:	200000a4 	.word	0x200000a4

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200000a8 	.word	0x200000a8
 8001ecc:	200002d8 	.word	0x200002d8

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200002d8 	.word	0x200002d8

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200000a8 	.word	0x200000a8

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	@ (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	@ (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	@ (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	@ 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d004      	beq.n	8002170 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e00c      	b.n	800218a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2205      	movs	r2, #5
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	@ 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e165      	b.n	8002480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f040 8154 	bne.w	800247a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d005      	beq.n	80021ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d130      	bne.n	800224c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80ae 	beq.w	800247a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b5d      	ldr	r3, [pc, #372]	@ (8002498 <HAL_GPIO_Init+0x300>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	4a5c      	ldr	r2, [pc, #368]	@ (8002498 <HAL_GPIO_Init+0x300>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232c:	6453      	str	r3, [r2, #68]	@ 0x44
 800232e:	4b5a      	ldr	r3, [pc, #360]	@ (8002498 <HAL_GPIO_Init+0x300>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233a:	4a58      	ldr	r2, [pc, #352]	@ (800249c <HAL_GPIO_Init+0x304>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4f      	ldr	r2, [pc, #316]	@ (80024a0 <HAL_GPIO_Init+0x308>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d025      	beq.n	80023b2 <HAL_GPIO_Init+0x21a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4e      	ldr	r2, [pc, #312]	@ (80024a4 <HAL_GPIO_Init+0x30c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01f      	beq.n	80023ae <HAL_GPIO_Init+0x216>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4d      	ldr	r2, [pc, #308]	@ (80024a8 <HAL_GPIO_Init+0x310>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d019      	beq.n	80023aa <HAL_GPIO_Init+0x212>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4c      	ldr	r2, [pc, #304]	@ (80024ac <HAL_GPIO_Init+0x314>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0x20e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4b      	ldr	r2, [pc, #300]	@ (80024b0 <HAL_GPIO_Init+0x318>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00d      	beq.n	80023a2 <HAL_GPIO_Init+0x20a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4a      	ldr	r2, [pc, #296]	@ (80024b4 <HAL_GPIO_Init+0x31c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <HAL_GPIO_Init+0x206>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a49      	ldr	r2, [pc, #292]	@ (80024b8 <HAL_GPIO_Init+0x320>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_GPIO_Init+0x202>
 8002396:	2306      	movs	r3, #6
 8002398:	e00c      	b.n	80023b4 <HAL_GPIO_Init+0x21c>
 800239a:	2307      	movs	r3, #7
 800239c:	e00a      	b.n	80023b4 <HAL_GPIO_Init+0x21c>
 800239e:	2305      	movs	r3, #5
 80023a0:	e008      	b.n	80023b4 <HAL_GPIO_Init+0x21c>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x21c>
 80023a6:	2303      	movs	r3, #3
 80023a8:	e004      	b.n	80023b4 <HAL_GPIO_Init+0x21c>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_Init+0x21c>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x21c>
 80023b2:	2300      	movs	r3, #0
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	f002 0203 	and.w	r2, r2, #3
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	4093      	lsls	r3, r2
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c4:	4935      	ldr	r1, [pc, #212]	@ (800249c <HAL_GPIO_Init+0x304>)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d2:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <HAL_GPIO_Init+0x324>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f6:	4a31      	ldr	r2, [pc, #196]	@ (80024bc <HAL_GPIO_Init+0x324>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023fc:	4b2f      	ldr	r3, [pc, #188]	@ (80024bc <HAL_GPIO_Init+0x324>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002420:	4a26      	ldr	r2, [pc, #152]	@ (80024bc <HAL_GPIO_Init+0x324>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002426:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_GPIO_Init+0x324>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244a:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <HAL_GPIO_Init+0x324>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002450:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_GPIO_Init+0x324>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002474:	4a11      	ldr	r2, [pc, #68]	@ (80024bc <HAL_GPIO_Init+0x324>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b0f      	cmp	r3, #15
 8002484:	f67f ae96 	bls.w	80021b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40013800 	.word	0x40013800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40021400 	.word	0x40021400
 80024b8:	40021800 	.word	0x40021800
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800250c:	e003      	b.n	8002516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e12b      	b.n	800278e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe fa4a 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	@ 0x24
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002588:	f001 f9e6 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 800258c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a81      	ldr	r2, [pc, #516]	@ (8002798 <HAL_I2C_Init+0x274>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d807      	bhi.n	80025a8 <HAL_I2C_Init+0x84>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a80      	ldr	r2, [pc, #512]	@ (800279c <HAL_I2C_Init+0x278>)
 800259c:	4293      	cmp	r3, r2
 800259e:	bf94      	ite	ls
 80025a0:	2301      	movls	r3, #1
 80025a2:	2300      	movhi	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e006      	b.n	80025b6 <HAL_I2C_Init+0x92>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a7d      	ldr	r2, [pc, #500]	@ (80027a0 <HAL_I2C_Init+0x27c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	bf94      	ite	ls
 80025b0:	2301      	movls	r3, #1
 80025b2:	2300      	movhi	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0e7      	b.n	800278e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4a78      	ldr	r2, [pc, #480]	@ (80027a4 <HAL_I2C_Init+0x280>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0c9b      	lsrs	r3, r3, #18
 80025c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002798 <HAL_I2C_Init+0x274>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d802      	bhi.n	80025f8 <HAL_I2C_Init+0xd4>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	e009      	b.n	800260c <HAL_I2C_Init+0xe8>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	4a69      	ldr	r2, [pc, #420]	@ (80027a8 <HAL_I2C_Init+0x284>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	3301      	adds	r3, #1
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	430b      	orrs	r3, r1
 8002612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800261e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	495c      	ldr	r1, [pc, #368]	@ (8002798 <HAL_I2C_Init+0x274>)
 8002628:	428b      	cmp	r3, r1
 800262a:	d819      	bhi.n	8002660 <HAL_I2C_Init+0x13c>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e59      	subs	r1, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fbb1 f3f3 	udiv	r3, r1, r3
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002640:	400b      	ands	r3, r1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_I2C_Init+0x138>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e59      	subs	r1, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fbb1 f3f3 	udiv	r3, r1, r3
 8002654:	3301      	adds	r3, #1
 8002656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265a:	e051      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 800265c:	2304      	movs	r3, #4
 800265e:	e04f      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d111      	bne.n	800268c <HAL_I2C_Init+0x168>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e58      	subs	r0, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e012      	b.n	80026b2 <HAL_I2C_Init+0x18e>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	0099      	lsls	r1, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Init+0x196>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e022      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10e      	bne.n	80026e0 <HAL_I2C_Init+0x1bc>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1e58      	subs	r0, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	440b      	add	r3, r1
 80026d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026de:	e00f      	b.n	8002700 <HAL_I2C_Init+0x1dc>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	0099      	lsls	r1, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6809      	ldr	r1, [r1, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800272e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6911      	ldr	r1, [r2, #16]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	4311      	orrs	r1, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	430b      	orrs	r3, r1
 8002742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	000186a0 	.word	0x000186a0
 800279c:	001e847f 	.word	0x001e847f
 80027a0:	003d08ff 	.word	0x003d08ff
 80027a4:	431bde83 	.word	0x431bde83
 80027a8:	10624dd3 	.word	0x10624dd3

080027ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	461a      	mov	r2, r3
 80027b8:	460b      	mov	r3, r1
 80027ba:	817b      	strh	r3, [r7, #10]
 80027bc:	4613      	mov	r3, r2
 80027be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff fb86 	bl	8001ed0 <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	f040 80e0 	bne.w	8002994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2319      	movs	r3, #25
 80027da:	2201      	movs	r2, #1
 80027dc:	4970      	ldr	r1, [pc, #448]	@ (80029a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fd92 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
 80027ec:	e0d3      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_I2C_Master_Transmit+0x50>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0cc      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d007      	beq.n	8002822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2221      	movs	r2, #33	@ 0x21
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2210      	movs	r2, #16
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	893a      	ldrh	r2, [r7, #8]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a50      	ldr	r2, [pc, #320]	@ (80029a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002864:	8979      	ldrh	r1, [r7, #10]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fbfc 	bl	8003068 <I2C_MasterRequestWrite>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e08d      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002890:	e066      	b.n	8002960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	6a39      	ldr	r1, [r7, #32]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fe50 	bl	800353c <I2C_WaitOnTXEFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d107      	bne.n	80028ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06b      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d11b      	bne.n	8002934 <HAL_I2C_Master_Transmit+0x188>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d017      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	6a39      	ldr	r1, [r7, #32]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fe47 	bl	80035cc <I2C_WaitOnBTFFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00d      	beq.n	8002960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2b04      	cmp	r3, #4
 800294a:	d107      	bne.n	800295c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e01a      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d194      	bne.n	8002892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	00100002 	.word	0x00100002
 80029a4:	ffff0000 	.word	0xffff0000

080029a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	@ 0x30
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	461a      	mov	r2, r3
 80029b4:	460b      	mov	r3, r1
 80029b6:	817b      	strh	r3, [r7, #10]
 80029b8:	4613      	mov	r3, r2
 80029ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff fa88 	bl	8001ed0 <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	f040 8217 	bne.w	8002dfe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2319      	movs	r3, #25
 80029d6:	2201      	movs	r2, #1
 80029d8:	497c      	ldr	r1, [pc, #496]	@ (8002bcc <HAL_I2C_Master_Receive+0x224>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fc94 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	e20a      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_I2C_Master_Receive+0x50>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e203      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d007      	beq.n	8002a1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2222      	movs	r2, #34	@ 0x22
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd0 <HAL_I2C_Master_Receive+0x228>)
 8002a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a60:	8979      	ldrh	r1, [r7, #10]
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fb80 	bl	800316c <I2C_MasterRequestRead>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1c4      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d113      	bne.n	8002aa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	623b      	str	r3, [r7, #32]
 8002a92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e198      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d11b      	bne.n	8002ae6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e178      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d11b      	bne.n	8002b26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002afc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	e158      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b4c:	e144      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	f200 80f1 	bhi.w	8002d3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d123      	bne.n	8002ba8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fd79 	bl	800365c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e145      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ba6:	e117      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d14e      	bne.n	8002c4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4906      	ldr	r1, [pc, #24]	@ (8002bd4 <HAL_I2C_Master_Receive+0x22c>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fba4 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e11a      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
 8002bca:	bf00      	nop
 8002bcc:	00100002 	.word	0x00100002
 8002bd0:	ffff0000 	.word	0xffff0000
 8002bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c4c:	e0c4      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	2200      	movs	r2, #0
 8002c56:	496c      	ldr	r1, [pc, #432]	@ (8002e08 <HAL_I2C_Master_Receive+0x460>)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fb55 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cb      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4955      	ldr	r1, [pc, #340]	@ (8002e08 <HAL_I2C_Master_Receive+0x460>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fb27 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e09d      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d38:	e04e      	b.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fc8c 	bl	800365c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e058      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d124      	bne.n	8002dd8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d107      	bne.n	8002da6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f aeb6 	bne.w	8002b4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3728      	adds	r7, #40	@ 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	00010004 	.word	0x00010004

08002e0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff f858 	bl	8001ed0 <HAL_GetTick>
 8002e20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	f040 8111 	bne.w	8003056 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2319      	movs	r3, #25
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4988      	ldr	r1, [pc, #544]	@ (8003060 <HAL_I2C_IsDeviceReady+0x254>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fa62 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e104      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2C_IsDeviceReady+0x50>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0fd      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x24c>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d007      	beq.n	8002e82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2224      	movs	r2, #36	@ 0x24
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a70      	ldr	r2, [pc, #448]	@ (8003064 <HAL_I2C_IsDeviceReady+0x258>)
 8002ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa20 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002edc:	d103      	bne.n	8002ee6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0b6      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe ffe9 	bl	8001ed0 <HAL_GetTick>
 8002efe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f2e:	e025      	b.n	8002f7c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f30:	f7fe ffce 	bl	8001ed0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <HAL_I2C_IsDeviceReady+0x13a>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	22a0      	movs	r2, #160	@ 0xa0
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f86:	d005      	beq.n	8002f94 <HAL_I2C_IsDeviceReady+0x188>
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_I2C_IsDeviceReady+0x188>
 8002f8e:	7dbb      	ldrb	r3, [r7, #22]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0cd      	beq.n	8002f30 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d129      	bne.n	8002ffe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2319      	movs	r3, #25
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4921      	ldr	r1, [pc, #132]	@ (8003060 <HAL_I2C_IsDeviceReady+0x254>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f994 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e036      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e02c      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003016:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2319      	movs	r3, #25
 800301e:	2201      	movs	r2, #1
 8003020:	490f      	ldr	r1, [pc, #60]	@ (8003060 <HAL_I2C_IsDeviceReady+0x254>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f970 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e012      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	3301      	adds	r3, #1
 8003036:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	f4ff af32 	bcc.w	8002ea6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000

08003068 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	460b      	mov	r3, r1
 8003076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d006      	beq.n	8003092 <I2C_MasterRequestWrite+0x2a>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <I2C_MasterRequestWrite+0x2a>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003090:	d108      	bne.n	80030a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e00b      	b.n	80030bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	2b12      	cmp	r3, #18
 80030aa:	d107      	bne.n	80030bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f91d 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e2:	d103      	bne.n	80030ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e035      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030f8:	d108      	bne.n	800310c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	e01b      	b.n	8003144 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	11db      	asrs	r3, r3, #7
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 0306 	and.w	r3, r3, #6
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f063 030f 	orn	r3, r3, #15
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	490e      	ldr	r1, [pc, #56]	@ (8003164 <I2C_MasterRequestWrite+0xfc>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f966 	bl	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e010      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4907      	ldr	r1, [pc, #28]	@ (8003168 <I2C_MasterRequestWrite+0x100>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f956 	bl	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	00010008 	.word	0x00010008
 8003168:	00010002 	.word	0x00010002

0800316c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	460b      	mov	r3, r1
 800317a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003190:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d006      	beq.n	80031a6 <I2C_MasterRequestRead+0x3a>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d003      	beq.n	80031a6 <I2C_MasterRequestRead+0x3a>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031a4:	d108      	bne.n	80031b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e00b      	b.n	80031d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	2b11      	cmp	r3, #17
 80031be:	d107      	bne.n	80031d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f893 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031f6:	d103      	bne.n	8003200 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e079      	b.n	80032f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800320c:	d108      	bne.n	8003220 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	b2da      	uxtb	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	611a      	str	r2, [r3, #16]
 800321e:	e05f      	b.n	80032e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003220:	897b      	ldrh	r3, [r7, #10]
 8003222:	11db      	asrs	r3, r3, #7
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0306 	and.w	r3, r3, #6
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f063 030f 	orn	r3, r3, #15
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4930      	ldr	r1, [pc, #192]	@ (8003300 <I2C_MasterRequestRead+0x194>)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f8dc 	bl	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e054      	b.n	80032f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4929      	ldr	r1, [pc, #164]	@ (8003304 <I2C_MasterRequestRead+0x198>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f8cc 	bl	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e044      	b.n	80032f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003292:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f831 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ba:	d103      	bne.n	80032c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e017      	b.n	80032f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032c8:	897b      	ldrh	r3, [r7, #10]
 80032ca:	11db      	asrs	r3, r3, #7
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 0306 	and.w	r3, r3, #6
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f063 030e 	orn	r3, r3, #14
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4907      	ldr	r1, [pc, #28]	@ (8003304 <I2C_MasterRequestRead+0x198>)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f888 	bl	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	00010008 	.word	0x00010008
 8003304:	00010002 	.word	0x00010002

08003308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	e048      	b.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003320:	d044      	beq.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fe fdd5 	bl	8001ed0 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d139      	bne.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10d      	bne.n	800335e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	43da      	mvns	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	e00c      	b.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x70>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	429a      	cmp	r2, r3
 800337c:	d116      	bne.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e023      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10d      	bne.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	e00c      	b.n	80033ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	43da      	mvns	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d093      	beq.n	800331a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800340a:	e071      	b.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341a:	d123      	bne.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e067      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800346a:	d041      	beq.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346c:	f7fe fd30 	bl	8001ed0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d302      	bcc.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d136      	bne.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d10c      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e00b      	b.n	80034be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e021      	b.n	8003534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10c      	bne.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	43da      	mvns	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e00b      	b.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4013      	ands	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f af6d 	bne.w	800340c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003548:	e034      	b.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f8e3 	bl	8003716 <I2C_IsAcknowledgeFailed>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e034      	b.n	80035c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003560:	d028      	beq.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe fcb5 	bl	8001ed0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11d      	bne.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b80      	cmp	r3, #128	@ 0x80
 8003584:	d016      	beq.n	80035b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e007      	b.n	80035c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d1c3      	bne.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d8:	e034      	b.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f89b 	bl	8003716 <I2C_IsAcknowledgeFailed>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e034      	b.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035f0:	d028      	beq.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe fc6d 	bl	8001ed0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11d      	bne.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d016      	beq.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e007      	b.n	8003654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b04      	cmp	r3, #4
 8003650:	d1c3      	bne.n	80035da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003668:	e049      	b.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b10      	cmp	r3, #16
 8003676:	d119      	bne.n	80036ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0210 	mvn.w	r2, #16
 8003680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e030      	b.n	800370e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ac:	f7fe fc10 	bl	8001ed0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d302      	bcc.n	80036c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11d      	bne.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036cc:	2b40      	cmp	r3, #64	@ 0x40
 80036ce:	d016      	beq.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e007      	b.n	800370e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003708:	2b40      	cmp	r3, #64	@ 0x40
 800370a:	d1ae      	bne.n	800366a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800372c:	d11b      	bne.n	8003766 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003736:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	f043 0204 	orr.w	r2, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0cc      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b68      	ldr	r3, [pc, #416]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d90c      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b65      	ldr	r3, [pc, #404]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b63      	ldr	r3, [pc, #396]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b59      	ldr	r3, [pc, #356]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a58      	ldr	r2, [pc, #352]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a52      	ldr	r2, [pc, #328]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b50      	ldr	r3, [pc, #320]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	494d      	ldr	r1, [pc, #308]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d044      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b47      	ldr	r3, [pc, #284]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d119      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	2b03      	cmp	r3, #3
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b3f      	ldr	r3, [pc, #252]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3b      	ldr	r3, [pc, #236]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e067      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4934      	ldr	r1, [pc, #208]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fe fb34 	bl	8001ed0 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe fb30 	bl	8001ed0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e04f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b25      	ldr	r3, [pc, #148]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20c      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b22      	ldr	r3, [pc, #136]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e032      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4916      	ldr	r1, [pc, #88]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e6:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 f855 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490a      	ldr	r1, [pc, #40]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	@ (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fa94 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023c00 	.word	0x40023c00
 8003930:	40023800 	.word	0x40023800
 8003934:	0800645c 	.word	0x0800645c
 8003938:	20000000 	.word	0x20000000
 800393c:	200000a4 	.word	0x200000a4

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b03      	ldr	r3, [pc, #12]	@ (8003954 <HAL_RCC_GetHCLKFreq+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000000 	.word	0x20000000

08003958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800395c:	f7ff fff0 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0a9b      	lsrs	r3, r3, #10
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	@ (800397c <HAL_RCC_GetPCLK1Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	0800646c 	.word	0x0800646c

08003980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003984:	f7ff ffdc 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	0b5b      	lsrs	r3, r3, #13
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	4903      	ldr	r1, [pc, #12]	@ (80039a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40023800 	.word	0x40023800
 80039a4:	0800646c 	.word	0x0800646c

080039a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b0ae      	sub	sp, #184	@ 0xb8
 80039ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ce:	4bcb      	ldr	r3, [pc, #812]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	f200 8206 	bhi.w	8003de8 <HAL_RCC_GetSysClockFreq+0x440>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003de9 	.word	0x08003de9
 80039ec:	08003de9 	.word	0x08003de9
 80039f0:	08003de9 	.word	0x08003de9
 80039f4:	08003a21 	.word	0x08003a21
 80039f8:	08003de9 	.word	0x08003de9
 80039fc:	08003de9 	.word	0x08003de9
 8003a00:	08003de9 	.word	0x08003de9
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003de9 	.word	0x08003de9
 8003a0c:	08003de9 	.word	0x08003de9
 8003a10:	08003de9 	.word	0x08003de9
 8003a14:	08003c19 	.word	0x08003c19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4bb9      	ldr	r3, [pc, #740]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a1e:	e1e7      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a20:	4bb8      	ldr	r3, [pc, #736]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a26:	e1e3      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4bb4      	ldr	r3, [pc, #720]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a34:	4bb1      	ldr	r3, [pc, #708]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d071      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a40:	4bae      	ldr	r3, [pc, #696]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a4c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	f04f 0000 	mov.w	r0, #0
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	0159      	lsls	r1, r3, #5
 8003a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a78:	0150      	lsls	r0, r2, #5
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4621      	mov	r1, r4
 8003a80:	1a51      	subs	r1, r2, r1
 8003a82:	6439      	str	r1, [r7, #64]	@ 0x40
 8003a84:	4629      	mov	r1, r5
 8003a86:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003a98:	4649      	mov	r1, r9
 8003a9a:	018b      	lsls	r3, r1, #6
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	018a      	lsls	r2, r1, #6
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	1a51      	subs	r1, r2, r1
 8003aaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003aac:	4649      	mov	r1, r9
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	00cb      	lsls	r3, r1, #3
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aca:	4641      	mov	r1, r8
 8003acc:	00ca      	lsls	r2, r1, #3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ada:	462b      	mov	r3, r5
 8003adc:	460a      	mov	r2, r1
 8003ade:	eb42 0303 	adc.w	r3, r2, r3
 8003ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003af0:	4629      	mov	r1, r5
 8003af2:	024b      	lsls	r3, r1, #9
 8003af4:	4621      	mov	r1, r4
 8003af6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003afa:	4621      	mov	r1, r4
 8003afc:	024a      	lsls	r2, r1, #9
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b14:	f7fc fbd4 	bl	80002c0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b22:	e067      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b24:	4b75      	ldr	r3, [pc, #468]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b3e:	2300      	movs	r3, #0
 8003b40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b46:	4622      	mov	r2, r4
 8003b48:	462b      	mov	r3, r5
 8003b4a:	f04f 0000 	mov.w	r0, #0
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	0159      	lsls	r1, r3, #5
 8003b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b58:	0150      	lsls	r0, r2, #5
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4621      	mov	r1, r4
 8003b60:	1a51      	subs	r1, r2, r1
 8003b62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b64:	4629      	mov	r1, r5
 8003b66:	eb63 0301 	sbc.w	r3, r3, r1
 8003b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b78:	4649      	mov	r1, r9
 8003b7a:	018b      	lsls	r3, r1, #6
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b82:	4641      	mov	r1, r8
 8003b84:	018a      	lsls	r2, r1, #6
 8003b86:	4641      	mov	r1, r8
 8003b88:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ba2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ba6:	4692      	mov	sl, r2
 8003ba8:	469b      	mov	fp, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	eb1a 0303 	adds.w	r3, sl, r3
 8003bb0:	623b      	str	r3, [r7, #32]
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	028b      	lsls	r3, r1, #10
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	028a      	lsls	r2, r1, #10
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bdc:	2200      	movs	r2, #0
 8003bde:	673b      	str	r3, [r7, #112]	@ 0x70
 8003be0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003be2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003be6:	f7fc fb6b 	bl	80002c0 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4613      	mov	r3, r2
 8003bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bf4:	4b41      	ldr	r3, [pc, #260]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c16:	e0eb      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c18:	4b38      	ldr	r3, [pc, #224]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c24:	4b35      	ldr	r3, [pc, #212]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d06b      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c30:	4b32      	ldr	r3, [pc, #200]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x354>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	2200      	movs	r2, #0
 8003c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c44:	2300      	movs	r3, #0
 8003c46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	462b      	mov	r3, r5
 8003c50:	f04f 0000 	mov.w	r0, #0
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	0159      	lsls	r1, r3, #5
 8003c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5e:	0150      	lsls	r0, r2, #5
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4621      	mov	r1, r4
 8003c66:	1a51      	subs	r1, r2, r1
 8003c68:	61b9      	str	r1, [r7, #24]
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c7e:	4659      	mov	r1, fp
 8003c80:	018b      	lsls	r3, r1, #6
 8003c82:	4651      	mov	r1, sl
 8003c84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c88:	4651      	mov	r1, sl
 8003c8a:	018a      	lsls	r2, r1, #6
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ebb2 0801 	subs.w	r8, r2, r1
 8003c92:	4659      	mov	r1, fp
 8003c94:	eb63 0901 	sbc.w	r9, r3, r1
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cac:	4690      	mov	r8, r2
 8003cae:	4699      	mov	r9, r3
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	eb18 0303 	adds.w	r3, r8, r3
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	462b      	mov	r3, r5
 8003cba:	eb49 0303 	adc.w	r3, r9, r3
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ccc:	4629      	mov	r1, r5
 8003cce:	024b      	lsls	r3, r1, #9
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	024a      	lsls	r2, r1, #9
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ce6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ce8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cec:	f7fc fae8 	bl	80002c0 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cfa:	e065      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x420>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d08:	4b3d      	ldr	r3, [pc, #244]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	4611      	mov	r1, r2
 8003d14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d18:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	f04f 0000 	mov.w	r0, #0
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	0159      	lsls	r1, r3, #5
 8003d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d34:	0150      	lsls	r0, r2, #5
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	1a51      	subs	r1, r2, r1
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	4649      	mov	r1, r9
 8003d42:	eb63 0301 	sbc.w	r3, r3, r1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d54:	4659      	mov	r1, fp
 8003d56:	018b      	lsls	r3, r1, #6
 8003d58:	4651      	mov	r1, sl
 8003d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d5e:	4651      	mov	r1, sl
 8003d60:	018a      	lsls	r2, r1, #6
 8003d62:	4651      	mov	r1, sl
 8003d64:	1a54      	subs	r4, r2, r1
 8003d66:	4659      	mov	r1, fp
 8003d68:	eb63 0501 	sbc.w	r5, r3, r1
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	00eb      	lsls	r3, r5, #3
 8003d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d7a:	00e2      	lsls	r2, r4, #3
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	461d      	mov	r5, r3
 8003d80:	4643      	mov	r3, r8
 8003d82:	18e3      	adds	r3, r4, r3
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	464b      	mov	r3, r9
 8003d88:	eb45 0303 	adc.w	r3, r5, r3
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	028b      	lsls	r3, r1, #10
 8003d9e:	4621      	mov	r1, r4
 8003da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003da4:	4621      	mov	r1, r4
 8003da6:	028a      	lsls	r2, r1, #10
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003db0:	2200      	movs	r2, #0
 8003db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003db6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dba:	f7fc fa81 	bl	80002c0 <__aeabi_uldivmod>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	0f1b      	lsrs	r3, r3, #28
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003de6:	e003      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	37b8      	adds	r7, #184	@ 0xb8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	00f42400 	.word	0x00f42400

08003e08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e28d      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8083 	beq.w	8003f2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e28:	4b94      	ldr	r3, [pc, #592]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d019      	beq.n	8003e68 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e34:	4b91      	ldr	r3, [pc, #580]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e40:	4b8e      	ldr	r3, [pc, #568]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e4c:	d00c      	beq.n	8003e68 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d112      	bne.n	8003e80 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b88      	ldr	r3, [pc, #544]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e66:	d10b      	bne.n	8003e80 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	4b84      	ldr	r3, [pc, #528]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05b      	beq.n	8003f2c <HAL_RCC_OscConfig+0x124>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d157      	bne.n	8003f2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e25a      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e88:	d106      	bne.n	8003e98 <HAL_RCC_OscConfig+0x90>
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7b      	ldr	r2, [pc, #492]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e01d      	b.n	8003ed4 <HAL_RCC_OscConfig+0xcc>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0xb4>
 8003ea2:	4b76      	ldr	r3, [pc, #472]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a75      	ldr	r2, [pc, #468]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b73      	ldr	r3, [pc, #460]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a72      	ldr	r2, [pc, #456]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0xcc>
 8003ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fff8 	bl	8001ed0 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fd fff4 	bl	8001ed0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	@ 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e21f      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b61      	ldr	r3, [pc, #388]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xdc>
 8003f02:	e014      	b.n	8003f2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd ffe4 	bl	8001ed0 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fd ffe0 	bl	8001ed0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	@ 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e20b      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	4b57      	ldr	r3, [pc, #348]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x104>
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d06f      	beq.n	800401a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f3a:	4b50      	ldr	r3, [pc, #320]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f46:	4b4d      	ldr	r3, [pc, #308]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d105      	bne.n	8003f5e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f52:	4b4a      	ldr	r3, [pc, #296]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5e:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d11c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6a:	4b44      	ldr	r3, [pc, #272]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d116      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f76:	4b41      	ldr	r3, [pc, #260]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_RCC_OscConfig+0x186>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e1d3      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4937      	ldr	r1, [pc, #220]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa2:	e03a      	b.n	800401a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d020      	beq.n	8003fee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fac:	4b34      	ldr	r3, [pc, #208]	@ (8004080 <HAL_RCC_OscConfig+0x278>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fd ff8d 	bl	8001ed0 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fba:	f7fd ff89 	bl	8001ed0 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e1b4      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	4b28      	ldr	r3, [pc, #160]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4925      	ldr	r1, [pc, #148]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
 8003fec:	e015      	b.n	800401a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <HAL_RCC_OscConfig+0x278>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fd ff6c 	bl	8001ed0 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffc:	f7fd ff68 	bl	8001ed0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e193      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	4b1b      	ldr	r3, [pc, #108]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d036      	beq.n	8004094 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402e:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <HAL_RCC_OscConfig+0x27c>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd ff4c 	bl	8001ed0 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403c:	f7fd ff48 	bl	8001ed0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e173      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_RCC_OscConfig+0x274>)
 8004050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x234>
 800405a:	e01b      	b.n	8004094 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405c:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_RCC_OscConfig+0x27c>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7fd ff35 	bl	8001ed0 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	e00e      	b.n	8004088 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406a:	f7fd ff31 	bl	8001ed0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d907      	bls.n	8004088 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e15c      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
 800407c:	40023800 	.word	0x40023800
 8004080:	42470000 	.word	0x42470000
 8004084:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	4b8a      	ldr	r3, [pc, #552]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ea      	bne.n	800406a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8097 	beq.w	80041d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a6:	4b83      	ldr	r3, [pc, #524]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	4b7f      	ldr	r3, [pc, #508]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	4a7e      	ldr	r2, [pc, #504]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c2:	4b7c      	ldr	r3, [pc, #496]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ce:	2301      	movs	r3, #1
 80040d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d2:	4b79      	ldr	r3, [pc, #484]	@ (80042b8 <HAL_RCC_OscConfig+0x4b0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d118      	bne.n	8004110 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040de:	4b76      	ldr	r3, [pc, #472]	@ (80042b8 <HAL_RCC_OscConfig+0x4b0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a75      	ldr	r2, [pc, #468]	@ (80042b8 <HAL_RCC_OscConfig+0x4b0>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ea:	f7fd fef1 	bl	8001ed0 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f2:	f7fd feed 	bl	8001ed0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e118      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	4b6c      	ldr	r3, [pc, #432]	@ (80042b8 <HAL_RCC_OscConfig+0x4b0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x31e>
 8004118:	4b66      	ldr	r3, [pc, #408]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	4a65      	ldr	r2, [pc, #404]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
 8004124:	e01c      	b.n	8004160 <HAL_RCC_OscConfig+0x358>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b05      	cmp	r3, #5
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x340>
 800412e:	4b61      	ldr	r3, [pc, #388]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	4a60      	ldr	r2, [pc, #384]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	f043 0304 	orr.w	r3, r3, #4
 8004138:	6713      	str	r3, [r2, #112]	@ 0x70
 800413a:	4b5e      	ldr	r3, [pc, #376]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	4a5d      	ldr	r2, [pc, #372]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6713      	str	r3, [r2, #112]	@ 0x70
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0x358>
 8004148:	4b5a      	ldr	r3, [pc, #360]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414c:	4a59      	ldr	r2, [pc, #356]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	@ 0x70
 8004154:	4b57      	ldr	r3, [pc, #348]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004158:	4a56      	ldr	r2, [pc, #344]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800415a:	f023 0304 	bic.w	r3, r3, #4
 800415e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fd feb2 	bl	8001ed0 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416e:	e00a      	b.n	8004186 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004170:	f7fd feae 	bl	8001ed0 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e0d7      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	4b4b      	ldr	r3, [pc, #300]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0ee      	beq.n	8004170 <HAL_RCC_OscConfig+0x368>
 8004192:	e014      	b.n	80041be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fd fe9c 	bl	8001ed0 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419c:	f7fd fe98 	bl	8001ed0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e0c1      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b2:	4b40      	ldr	r3, [pc, #256]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ee      	bne.n	800419c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d105      	bne.n	80041d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c4:	4b3b      	ldr	r3, [pc, #236]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	4a3a      	ldr	r2, [pc, #232]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80041ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80ad 	beq.w	8004334 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041da:	4b36      	ldr	r3, [pc, #216]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d060      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d145      	bne.n	800427a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b33      	ldr	r3, [pc, #204]	@ (80042bc <HAL_RCC_OscConfig+0x4b4>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd fe6c 	bl	8001ed0 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fd fe68 	bl	8001ed0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e093      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	4b29      	ldr	r3, [pc, #164]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	019b      	lsls	r3, r3, #6
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	3b01      	subs	r3, #1
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	071b      	lsls	r3, r3, #28
 8004246:	491b      	ldr	r1, [pc, #108]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800424c:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <HAL_RCC_OscConfig+0x4b4>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fd fe3d 	bl	8001ed0 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7fd fe39 	bl	8001ed0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e064      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426c:	4b11      	ldr	r3, [pc, #68]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x452>
 8004278:	e05c      	b.n	8004334 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427a:	4b10      	ldr	r3, [pc, #64]	@ (80042bc <HAL_RCC_OscConfig+0x4b4>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd fe26 	bl	8001ed0 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fd fe22 	bl	8001ed0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e04d      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x480>
 80042a6:	e045      	b.n	8004334 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e040      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40007000 	.word	0x40007000
 80042bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004340 <HAL_RCC_OscConfig+0x538>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d030      	beq.n	8004330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d129      	bne.n	8004330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d122      	bne.n	8004330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d119      	bne.n	8004330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	3b01      	subs	r3, #1
 800430a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d10f      	bne.n	8004330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800

08004344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07b      	b.n	800444e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d108      	bne.n	8004370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004366:	d009      	beq.n	800437c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
 800436e:	e005      	b.n	800437c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fc fb6c 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004400:	ea42 0103 	orr.w	r1, r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	f003 0104 	and.w	r1, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	f003 0210 	and.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800443c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b088      	sub	sp, #32
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004466:	f7fd fd33 	bl	8001ed0 <HAL_GetTick>
 800446a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
 800447e:	e12a      	b.n	80046d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_Transmit+0x36>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e122      	b.n	80046d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_SPI_Transmit+0x48>
 800449a:	2302      	movs	r3, #2
 800449c:	e11b      	b.n	80046d6 <HAL_SPI_Transmit+0x280>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2203      	movs	r2, #3
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ec:	d10f      	bne.n	800450e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004518:	2b40      	cmp	r3, #64	@ 0x40
 800451a:	d007      	beq.n	800452c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800452a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004534:	d152      	bne.n	80045dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Transmit+0xee>
 800453e:	8b7b      	ldrh	r3, [r7, #26]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d145      	bne.n	80045d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004548:	881a      	ldrh	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	1c9a      	adds	r2, r3, #2
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004568:	e032      	b.n	80045d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d112      	bne.n	800459e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	881a      	ldrh	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800459c:	e018      	b.n	80045d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800459e:	f7fd fc97 	bl	8001ed0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d803      	bhi.n	80045b6 <HAL_SPI_Transmit+0x160>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045b4:	d102      	bne.n	80045bc <HAL_SPI_Transmit+0x166>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e082      	b.n	80046d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1c7      	bne.n	800456a <HAL_SPI_Transmit+0x114>
 80045da:	e053      	b.n	8004684 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SPI_Transmit+0x194>
 80045e4:	8b7b      	ldrh	r3, [r7, #26]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d147      	bne.n	800467a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004610:	e033      	b.n	800467a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	d113      	bne.n	8004648 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004646:	e018      	b.n	800467a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004648:	f7fd fc42 	bl	8001ed0 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d803      	bhi.n	8004660 <HAL_SPI_Transmit+0x20a>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800465e:	d102      	bne.n	8004666 <HAL_SPI_Transmit+0x210>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e02d      	b.n	80046d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1c6      	bne.n	8004612 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	6839      	ldr	r1, [r7, #0]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f9cf 	bl	8004a2c <SPI_EndRxTxTransaction>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	099b      	lsrs	r3, r3, #6
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	4798      	blx	r3
    return;
 8004722:	e0d7      	b.n	80048d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_SPI_IRQHandler+0x66>
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	09db      	lsrs	r3, r3, #7
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
    return;
 8004744:	e0c6      	b.n	80048d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_SPI_IRQHandler+0x8c>
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	099b      	lsrs	r3, r3, #6
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80b4 	beq.w	80048d4 <HAL_SPI_IRQHandler+0x1f4>
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80ad 	beq.w	80048d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d023      	beq.n	80047ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d011      	beq.n	80047b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	f043 0204 	orr.w	r2, r3, #4
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	e00b      	b.n	80047ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]
        return;
 80047cc:	e082      	b.n	80048d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00c      	beq.n	800482a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	f043 0208 	orr.w	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800481c:	2300      	movs	r3, #0
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04f      	beq.n	80048d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004840:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_SPI_IRQHandler+0x17e>
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d034      	beq.n	80048c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0203 	bic.w	r2, r2, #3
 800486c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d011      	beq.n	800489a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487a:	4a18      	ldr	r2, [pc, #96]	@ (80048dc <HAL_SPI_IRQHandler+0x1fc>)
 800487c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd fc65 	bl	8002152 <HAL_DMA_Abort_IT>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a6:	4a0d      	ldr	r2, [pc, #52]	@ (80048dc <HAL_SPI_IRQHandler+0x1fc>)
 80048a8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd fc4f 	bl	8002152 <HAL_DMA_Abort_IT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80048c6:	e003      	b.n	80048d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f809 	bl	80048e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048ce:	e000      	b.n	80048d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80048d0:	bf00      	nop
    return;
 80048d2:	bf00      	nop
  }
}
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	080048f5 	.word	0x080048f5

080048e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ffe6 	bl	80048e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800492c:	f7fd fad0 	bl	8001ed0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4413      	add	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800493c:	f7fd fac8 	bl	8001ed0 <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004942:	4b39      	ldr	r3, [pc, #228]	@ (8004a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	015b      	lsls	r3, r3, #5
 8004948:	0d1b      	lsrs	r3, r3, #20
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004952:	e055      	b.n	8004a00 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800495a:	d051      	beq.n	8004a00 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800495c:	f7fd fab8 	bl	8001ed0 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	d902      	bls.n	8004972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d13d      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498a:	d111      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004994:	d004      	beq.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499e:	d107      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b8:	d10f      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e018      	b.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e002      	b.n	8004a00 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d19a      	bne.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000000 	.word	0x20000000

08004a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	2102      	movs	r1, #2
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ff6a 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e032      	b.n	8004ac4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <SPI_EndRxTxTransaction+0xa0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad0 <SPI_EndRxTxTransaction+0xa4>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	0d5b      	lsrs	r3, r3, #21
 8004a6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a7c:	d112      	bne.n	8004aa4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2180      	movs	r1, #128	@ 0x80
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff ff47 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d016      	beq.n	8004ac2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e00f      	b.n	8004ac4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	2b80      	cmp	r3, #128	@ 0x80
 8004abc:	d0f2      	beq.n	8004aa4 <SPI_EndRxTxTransaction+0x78>
 8004abe:	e000      	b.n	8004ac2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004ac0:	bf00      	nop
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	165e9f81 	.word	0x165e9f81

08004ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e042      	b.n	8004b6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc f82a 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	@ 0x24
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f82b 	bl	8004b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b78:	b0c0      	sub	sp, #256	@ 0x100
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	ea40 0301 	orr.w	r3, r0, r1
 8004b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bcc:	f021 010c 	bic.w	r1, r1, #12
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bee:	6999      	ldr	r1, [r3, #24]
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	ea40 0301 	orr.w	r3, r0, r1
 8004bfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b8f      	ldr	r3, [pc, #572]	@ (8004e40 <UART_SetConfig+0x2cc>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d005      	beq.n	8004c14 <UART_SetConfig+0xa0>
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e44 <UART_SetConfig+0x2d0>)
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d104      	bne.n	8004c1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fe feb4 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 8004c18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c1c:	e003      	b.n	8004c26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c1e:	f7fe fe9b 	bl	8003958 <HAL_RCC_GetPCLK1Freq>
 8004c22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c30:	f040 810c 	bne.w	8004e4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c56:	4621      	mov	r1, r4
 8004c58:	eb12 0801 	adds.w	r8, r2, r1
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	eb43 0901 	adc.w	r9, r3, r1
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c76:	4690      	mov	r8, r2
 8004c78:	4699      	mov	r9, r3
 8004c7a:	4623      	mov	r3, r4
 8004c7c:	eb18 0303 	adds.w	r3, r8, r3
 8004c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c84:	462b      	mov	r3, r5
 8004c86:	eb49 0303 	adc.w	r3, r9, r3
 8004c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	18db      	adds	r3, r3, r3
 8004ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca8:	4613      	mov	r3, r2
 8004caa:	eb42 0303 	adc.w	r3, r2, r3
 8004cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cb8:	f7fb fb02 	bl	80002c0 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4b61      	ldr	r3, [pc, #388]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	011c      	lsls	r4, r3, #4
 8004cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cec:	4641      	mov	r1, r8
 8004cee:	eb12 0a01 	adds.w	sl, r2, r1
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d0c:	4692      	mov	sl, r2
 8004d0e:	469b      	mov	fp, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	eb1a 0303 	adds.w	r3, sl, r3
 8004d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	18db      	adds	r3, r3, r3
 8004d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3e:	4613      	mov	r3, r2
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d4e:	f7fb fab7 	bl	80002c0 <__aeabi_uldivmod>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2264      	movs	r2, #100	@ 0x64
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	1acb      	subs	r3, r1, r3
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d6e:	4b36      	ldr	r3, [pc, #216]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004d70:	fba3 2302 	umull	r2, r3, r3, r2
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d7c:	441c      	add	r4, r3
 8004d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d90:	4642      	mov	r2, r8
 8004d92:	464b      	mov	r3, r9
 8004d94:	1891      	adds	r1, r2, r2
 8004d96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d98:	415b      	adcs	r3, r3
 8004d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004da0:	4641      	mov	r1, r8
 8004da2:	1851      	adds	r1, r2, r1
 8004da4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004da6:	4649      	mov	r1, r9
 8004da8:	414b      	adcs	r3, r1
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004db8:	4659      	mov	r1, fp
 8004dba:	00cb      	lsls	r3, r1, #3
 8004dbc:	4651      	mov	r1, sl
 8004dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc2:	4651      	mov	r1, sl
 8004dc4:	00ca      	lsls	r2, r1, #3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4642      	mov	r2, r8
 8004dce:	189b      	adds	r3, r3, r2
 8004dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004df0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004df4:	460b      	mov	r3, r1
 8004df6:	18db      	adds	r3, r3, r3
 8004df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	eb42 0303 	adc.w	r3, r2, r3
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e0a:	f7fb fa59 	bl	80002c0 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004e14:	fba3 1302 	umull	r1, r3, r3, r2
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	2164      	movs	r1, #100	@ 0x64
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	3332      	adds	r3, #50	@ 0x32
 8004e26:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	f003 0207 	and.w	r2, r3, #7
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4422      	add	r2, r4
 8004e3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e3c:	e106      	b.n	800504c <UART_SetConfig+0x4d8>
 8004e3e:	bf00      	nop
 8004e40:	40011000 	.word	0x40011000
 8004e44:	40011400 	.word	0x40011400
 8004e48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e5e:	4642      	mov	r2, r8
 8004e60:	464b      	mov	r3, r9
 8004e62:	1891      	adds	r1, r2, r2
 8004e64:	6239      	str	r1, [r7, #32]
 8004e66:	415b      	adcs	r3, r3
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6e:	4641      	mov	r1, r8
 8004e70:	1854      	adds	r4, r2, r1
 8004e72:	4649      	mov	r1, r9
 8004e74:	eb43 0501 	adc.w	r5, r3, r1
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	00eb      	lsls	r3, r5, #3
 8004e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e86:	00e2      	lsls	r2, r4, #3
 8004e88:	4614      	mov	r4, r2
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	4643      	mov	r3, r8
 8004e8e:	18e3      	adds	r3, r4, r3
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e94:	464b      	mov	r3, r9
 8004e96:	eb45 0303 	adc.w	r3, r5, r3
 8004e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eba:	4629      	mov	r1, r5
 8004ebc:	008b      	lsls	r3, r1, #2
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	008a      	lsls	r2, r1, #2
 8004ec8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ecc:	f7fb f9f8 	bl	80002c0 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4b60      	ldr	r3, [pc, #384]	@ (8005058 <UART_SetConfig+0x4e4>)
 8004ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	011c      	lsls	r4, r3, #4
 8004ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004eec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	61b9      	str	r1, [r7, #24]
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f00:	4641      	mov	r1, r8
 8004f02:	1851      	adds	r1, r2, r1
 8004f04:	6139      	str	r1, [r7, #16]
 8004f06:	4649      	mov	r1, r9
 8004f08:	414b      	adcs	r3, r1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f18:	4659      	mov	r1, fp
 8004f1a:	00cb      	lsls	r3, r1, #3
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f22:	4651      	mov	r1, sl
 8004f24:	00ca      	lsls	r2, r1, #3
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f34:	464b      	mov	r3, r9
 8004f36:	460a      	mov	r2, r1
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f58:	4649      	mov	r1, r9
 8004f5a:	008b      	lsls	r3, r1, #2
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f62:	4641      	mov	r1, r8
 8004f64:	008a      	lsls	r2, r1, #2
 8004f66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f6a:	f7fb f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	4b38      	ldr	r3, [pc, #224]	@ (8005058 <UART_SetConfig+0x4e4>)
 8004f76:	fba3 2301 	umull	r2, r3, r3, r1
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2264      	movs	r2, #100	@ 0x64
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	1acb      	subs	r3, r1, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	3332      	adds	r3, #50	@ 0x32
 8004f88:	4a33      	ldr	r2, [pc, #204]	@ (8005058 <UART_SetConfig+0x4e4>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f94:	441c      	add	r4, r3
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	415b      	adcs	r3, r3
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	1851      	adds	r1, r2, r1
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	4649      	mov	r1, r9
 8004fbc:	414b      	adcs	r3, r1
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fcc:	4659      	mov	r1, fp
 8004fce:	00cb      	lsls	r3, r1, #3
 8004fd0:	4651      	mov	r1, sl
 8004fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	00ca      	lsls	r2, r1, #3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	460a      	mov	r2, r1
 8004fea:	eb42 0303 	adc.w	r3, r2, r3
 8004fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ffa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005008:	4649      	mov	r1, r9
 800500a:	008b      	lsls	r3, r1, #2
 800500c:	4641      	mov	r1, r8
 800500e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005012:	4641      	mov	r1, r8
 8005014:	008a      	lsls	r2, r1, #2
 8005016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800501a:	f7fb f951 	bl	80002c0 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <UART_SetConfig+0x4e4>)
 8005024:	fba3 1302 	umull	r1, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	2164      	movs	r1, #100	@ 0x64
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	3332      	adds	r3, #50	@ 0x32
 8005036:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <UART_SetConfig+0x4e4>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4422      	add	r2, r4
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <rand>:
 800505c:	4b16      	ldr	r3, [pc, #88]	@ (80050b8 <rand+0x5c>)
 800505e:	b510      	push	{r4, lr}
 8005060:	681c      	ldr	r4, [r3, #0]
 8005062:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005064:	b9b3      	cbnz	r3, 8005094 <rand+0x38>
 8005066:	2018      	movs	r0, #24
 8005068:	f000 fa42 	bl	80054f0 <malloc>
 800506c:	4602      	mov	r2, r0
 800506e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005070:	b920      	cbnz	r0, 800507c <rand+0x20>
 8005072:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <rand+0x60>)
 8005074:	4812      	ldr	r0, [pc, #72]	@ (80050c0 <rand+0x64>)
 8005076:	2152      	movs	r1, #82	@ 0x52
 8005078:	f000 f9d2 	bl	8005420 <__assert_func>
 800507c:	4911      	ldr	r1, [pc, #68]	@ (80050c4 <rand+0x68>)
 800507e:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <rand+0x6c>)
 8005080:	e9c0 1300 	strd	r1, r3, [r0]
 8005084:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <rand+0x70>)
 8005086:	6083      	str	r3, [r0, #8]
 8005088:	230b      	movs	r3, #11
 800508a:	8183      	strh	r3, [r0, #12]
 800508c:	2100      	movs	r1, #0
 800508e:	2001      	movs	r0, #1
 8005090:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005094:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005096:	480e      	ldr	r0, [pc, #56]	@ (80050d0 <rand+0x74>)
 8005098:	690b      	ldr	r3, [r1, #16]
 800509a:	694c      	ldr	r4, [r1, #20]
 800509c:	4a0d      	ldr	r2, [pc, #52]	@ (80050d4 <rand+0x78>)
 800509e:	4358      	muls	r0, r3
 80050a0:	fb02 0004 	mla	r0, r2, r4, r0
 80050a4:	fba3 3202 	umull	r3, r2, r3, r2
 80050a8:	3301      	adds	r3, #1
 80050aa:	eb40 0002 	adc.w	r0, r0, r2
 80050ae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80050b2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80050b6:	bd10      	pop	{r4, pc}
 80050b8:	200000b8 	.word	0x200000b8
 80050bc:	08006564 	.word	0x08006564
 80050c0:	0800657b 	.word	0x0800657b
 80050c4:	abcd330e 	.word	0xabcd330e
 80050c8:	e66d1234 	.word	0xe66d1234
 80050cc:	0005deec 	.word	0x0005deec
 80050d0:	5851f42d 	.word	0x5851f42d
 80050d4:	4c957f2d 	.word	0x4c957f2d

080050d8 <std>:
 80050d8:	2300      	movs	r3, #0
 80050da:	b510      	push	{r4, lr}
 80050dc:	4604      	mov	r4, r0
 80050de:	e9c0 3300 	strd	r3, r3, [r0]
 80050e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050e6:	6083      	str	r3, [r0, #8]
 80050e8:	8181      	strh	r1, [r0, #12]
 80050ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80050ec:	81c2      	strh	r2, [r0, #14]
 80050ee:	6183      	str	r3, [r0, #24]
 80050f0:	4619      	mov	r1, r3
 80050f2:	2208      	movs	r2, #8
 80050f4:	305c      	adds	r0, #92	@ 0x5c
 80050f6:	f000 f916 	bl	8005326 <memset>
 80050fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <std+0x58>)
 80050fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80050fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005134 <std+0x5c>)
 8005100:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005102:	4b0d      	ldr	r3, [pc, #52]	@ (8005138 <std+0x60>)
 8005104:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005106:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <std+0x64>)
 8005108:	6323      	str	r3, [r4, #48]	@ 0x30
 800510a:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <std+0x68>)
 800510c:	6224      	str	r4, [r4, #32]
 800510e:	429c      	cmp	r4, r3
 8005110:	d006      	beq.n	8005120 <std+0x48>
 8005112:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005116:	4294      	cmp	r4, r2
 8005118:	d002      	beq.n	8005120 <std+0x48>
 800511a:	33d0      	adds	r3, #208	@ 0xd0
 800511c:	429c      	cmp	r4, r3
 800511e:	d105      	bne.n	800512c <std+0x54>
 8005120:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005128:	f000 b976 	b.w	8005418 <__retarget_lock_init_recursive>
 800512c:	bd10      	pop	{r4, pc}
 800512e:	bf00      	nop
 8005130:	080052a1 	.word	0x080052a1
 8005134:	080052c3 	.word	0x080052c3
 8005138:	080052fb 	.word	0x080052fb
 800513c:	0800531f 	.word	0x0800531f
 8005140:	200002dc 	.word	0x200002dc

08005144 <stdio_exit_handler>:
 8005144:	4a02      	ldr	r2, [pc, #8]	@ (8005150 <stdio_exit_handler+0xc>)
 8005146:	4903      	ldr	r1, [pc, #12]	@ (8005154 <stdio_exit_handler+0x10>)
 8005148:	4803      	ldr	r0, [pc, #12]	@ (8005158 <stdio_exit_handler+0x14>)
 800514a:	f000 b869 	b.w	8005220 <_fwalk_sglue>
 800514e:	bf00      	nop
 8005150:	200000ac 	.word	0x200000ac
 8005154:	08005d2d 	.word	0x08005d2d
 8005158:	200000bc 	.word	0x200000bc

0800515c <cleanup_stdio>:
 800515c:	6841      	ldr	r1, [r0, #4]
 800515e:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <cleanup_stdio+0x34>)
 8005160:	4299      	cmp	r1, r3
 8005162:	b510      	push	{r4, lr}
 8005164:	4604      	mov	r4, r0
 8005166:	d001      	beq.n	800516c <cleanup_stdio+0x10>
 8005168:	f000 fde0 	bl	8005d2c <_fflush_r>
 800516c:	68a1      	ldr	r1, [r4, #8]
 800516e:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <cleanup_stdio+0x38>)
 8005170:	4299      	cmp	r1, r3
 8005172:	d002      	beq.n	800517a <cleanup_stdio+0x1e>
 8005174:	4620      	mov	r0, r4
 8005176:	f000 fdd9 	bl	8005d2c <_fflush_r>
 800517a:	68e1      	ldr	r1, [r4, #12]
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <cleanup_stdio+0x3c>)
 800517e:	4299      	cmp	r1, r3
 8005180:	d004      	beq.n	800518c <cleanup_stdio+0x30>
 8005182:	4620      	mov	r0, r4
 8005184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005188:	f000 bdd0 	b.w	8005d2c <_fflush_r>
 800518c:	bd10      	pop	{r4, pc}
 800518e:	bf00      	nop
 8005190:	200002dc 	.word	0x200002dc
 8005194:	20000344 	.word	0x20000344
 8005198:	200003ac 	.word	0x200003ac

0800519c <global_stdio_init.part.0>:
 800519c:	b510      	push	{r4, lr}
 800519e:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <global_stdio_init.part.0+0x30>)
 80051a0:	4c0b      	ldr	r4, [pc, #44]	@ (80051d0 <global_stdio_init.part.0+0x34>)
 80051a2:	4a0c      	ldr	r2, [pc, #48]	@ (80051d4 <global_stdio_init.part.0+0x38>)
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	4620      	mov	r0, r4
 80051a8:	2200      	movs	r2, #0
 80051aa:	2104      	movs	r1, #4
 80051ac:	f7ff ff94 	bl	80050d8 <std>
 80051b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051b4:	2201      	movs	r2, #1
 80051b6:	2109      	movs	r1, #9
 80051b8:	f7ff ff8e 	bl	80050d8 <std>
 80051bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051c0:	2202      	movs	r2, #2
 80051c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c6:	2112      	movs	r1, #18
 80051c8:	f7ff bf86 	b.w	80050d8 <std>
 80051cc:	20000414 	.word	0x20000414
 80051d0:	200002dc 	.word	0x200002dc
 80051d4:	08005145 	.word	0x08005145

080051d8 <__sfp_lock_acquire>:
 80051d8:	4801      	ldr	r0, [pc, #4]	@ (80051e0 <__sfp_lock_acquire+0x8>)
 80051da:	f000 b91e 	b.w	800541a <__retarget_lock_acquire_recursive>
 80051de:	bf00      	nop
 80051e0:	2000041d 	.word	0x2000041d

080051e4 <__sfp_lock_release>:
 80051e4:	4801      	ldr	r0, [pc, #4]	@ (80051ec <__sfp_lock_release+0x8>)
 80051e6:	f000 b919 	b.w	800541c <__retarget_lock_release_recursive>
 80051ea:	bf00      	nop
 80051ec:	2000041d 	.word	0x2000041d

080051f0 <__sinit>:
 80051f0:	b510      	push	{r4, lr}
 80051f2:	4604      	mov	r4, r0
 80051f4:	f7ff fff0 	bl	80051d8 <__sfp_lock_acquire>
 80051f8:	6a23      	ldr	r3, [r4, #32]
 80051fa:	b11b      	cbz	r3, 8005204 <__sinit+0x14>
 80051fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005200:	f7ff bff0 	b.w	80051e4 <__sfp_lock_release>
 8005204:	4b04      	ldr	r3, [pc, #16]	@ (8005218 <__sinit+0x28>)
 8005206:	6223      	str	r3, [r4, #32]
 8005208:	4b04      	ldr	r3, [pc, #16]	@ (800521c <__sinit+0x2c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f5      	bne.n	80051fc <__sinit+0xc>
 8005210:	f7ff ffc4 	bl	800519c <global_stdio_init.part.0>
 8005214:	e7f2      	b.n	80051fc <__sinit+0xc>
 8005216:	bf00      	nop
 8005218:	0800515d 	.word	0x0800515d
 800521c:	20000414 	.word	0x20000414

08005220 <_fwalk_sglue>:
 8005220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005224:	4607      	mov	r7, r0
 8005226:	4688      	mov	r8, r1
 8005228:	4614      	mov	r4, r2
 800522a:	2600      	movs	r6, #0
 800522c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005230:	f1b9 0901 	subs.w	r9, r9, #1
 8005234:	d505      	bpl.n	8005242 <_fwalk_sglue+0x22>
 8005236:	6824      	ldr	r4, [r4, #0]
 8005238:	2c00      	cmp	r4, #0
 800523a:	d1f7      	bne.n	800522c <_fwalk_sglue+0xc>
 800523c:	4630      	mov	r0, r6
 800523e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005242:	89ab      	ldrh	r3, [r5, #12]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d907      	bls.n	8005258 <_fwalk_sglue+0x38>
 8005248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800524c:	3301      	adds	r3, #1
 800524e:	d003      	beq.n	8005258 <_fwalk_sglue+0x38>
 8005250:	4629      	mov	r1, r5
 8005252:	4638      	mov	r0, r7
 8005254:	47c0      	blx	r8
 8005256:	4306      	orrs	r6, r0
 8005258:	3568      	adds	r5, #104	@ 0x68
 800525a:	e7e9      	b.n	8005230 <_fwalk_sglue+0x10>

0800525c <siprintf>:
 800525c:	b40e      	push	{r1, r2, r3}
 800525e:	b510      	push	{r4, lr}
 8005260:	b09d      	sub	sp, #116	@ 0x74
 8005262:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005264:	9002      	str	r0, [sp, #8]
 8005266:	9006      	str	r0, [sp, #24]
 8005268:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800526c:	480a      	ldr	r0, [pc, #40]	@ (8005298 <siprintf+0x3c>)
 800526e:	9107      	str	r1, [sp, #28]
 8005270:	9104      	str	r1, [sp, #16]
 8005272:	490a      	ldr	r1, [pc, #40]	@ (800529c <siprintf+0x40>)
 8005274:	f853 2b04 	ldr.w	r2, [r3], #4
 8005278:	9105      	str	r1, [sp, #20]
 800527a:	2400      	movs	r4, #0
 800527c:	a902      	add	r1, sp, #8
 800527e:	6800      	ldr	r0, [r0, #0]
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005284:	f000 fa46 	bl	8005714 <_svfiprintf_r>
 8005288:	9b02      	ldr	r3, [sp, #8]
 800528a:	701c      	strb	r4, [r3, #0]
 800528c:	b01d      	add	sp, #116	@ 0x74
 800528e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005292:	b003      	add	sp, #12
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	200000b8 	.word	0x200000b8
 800529c:	ffff0208 	.word	0xffff0208

080052a0 <__sread>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	460c      	mov	r4, r1
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	f000 f868 	bl	800537c <_read_r>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	bfab      	itete	ge
 80052b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052b2:	89a3      	ldrhlt	r3, [r4, #12]
 80052b4:	181b      	addge	r3, r3, r0
 80052b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052ba:	bfac      	ite	ge
 80052bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052be:	81a3      	strhlt	r3, [r4, #12]
 80052c0:	bd10      	pop	{r4, pc}

080052c2 <__swrite>:
 80052c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	461f      	mov	r7, r3
 80052c8:	898b      	ldrh	r3, [r1, #12]
 80052ca:	05db      	lsls	r3, r3, #23
 80052cc:	4605      	mov	r5, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	4616      	mov	r6, r2
 80052d2:	d505      	bpl.n	80052e0 <__swrite+0x1e>
 80052d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d8:	2302      	movs	r3, #2
 80052da:	2200      	movs	r2, #0
 80052dc:	f000 f83c 	bl	8005358 <_lseek_r>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	4632      	mov	r2, r6
 80052ee:	463b      	mov	r3, r7
 80052f0:	4628      	mov	r0, r5
 80052f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052f6:	f000 b853 	b.w	80053a0 <_write_r>

080052fa <__sseek>:
 80052fa:	b510      	push	{r4, lr}
 80052fc:	460c      	mov	r4, r1
 80052fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005302:	f000 f829 	bl	8005358 <_lseek_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	bf15      	itete	ne
 800530c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800530e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005316:	81a3      	strheq	r3, [r4, #12]
 8005318:	bf18      	it	ne
 800531a:	81a3      	strhne	r3, [r4, #12]
 800531c:	bd10      	pop	{r4, pc}

0800531e <__sclose>:
 800531e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005322:	f000 b809 	b.w	8005338 <_close_r>

08005326 <memset>:
 8005326:	4402      	add	r2, r0
 8005328:	4603      	mov	r3, r0
 800532a:	4293      	cmp	r3, r2
 800532c:	d100      	bne.n	8005330 <memset+0xa>
 800532e:	4770      	bx	lr
 8005330:	f803 1b01 	strb.w	r1, [r3], #1
 8005334:	e7f9      	b.n	800532a <memset+0x4>
	...

08005338 <_close_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d06      	ldr	r5, [pc, #24]	@ (8005354 <_close_r+0x1c>)
 800533c:	2300      	movs	r3, #0
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	602b      	str	r3, [r5, #0]
 8005344:	f7fb fce4 	bl	8000d10 <_close>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_close_r+0x1a>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_close_r+0x1a>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20000418 	.word	0x20000418

08005358 <_lseek_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d07      	ldr	r5, [pc, #28]	@ (8005378 <_lseek_r+0x20>)
 800535c:	4604      	mov	r4, r0
 800535e:	4608      	mov	r0, r1
 8005360:	4611      	mov	r1, r2
 8005362:	2200      	movs	r2, #0
 8005364:	602a      	str	r2, [r5, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	f7fb fcf9 	bl	8000d5e <_lseek>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_lseek_r+0x1e>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_lseek_r+0x1e>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000418 	.word	0x20000418

0800537c <_read_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d07      	ldr	r5, [pc, #28]	@ (800539c <_read_r+0x20>)
 8005380:	4604      	mov	r4, r0
 8005382:	4608      	mov	r0, r1
 8005384:	4611      	mov	r1, r2
 8005386:	2200      	movs	r2, #0
 8005388:	602a      	str	r2, [r5, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f7fb fc87 	bl	8000c9e <_read>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_read_r+0x1e>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_read_r+0x1e>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	20000418 	.word	0x20000418

080053a0 <_write_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	@ (80053c0 <_write_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fb fc92 	bl	8000cd8 <_write>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_write_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_write_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20000418 	.word	0x20000418

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	@ (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	200000b8 	.word	0x200000b8

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005408 <__libc_init_array+0x38>)
 80053d4:	4c0d      	ldr	r4, [pc, #52]	@ (800540c <__libc_init_array+0x3c>)
 80053d6:	1b64      	subs	r4, r4, r5
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	2600      	movs	r6, #0
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005410 <__libc_init_array+0x40>)
 80053e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005414 <__libc_init_array+0x44>)
 80053e4:	f000 ffee 	bl	80063c4 <_init>
 80053e8:	1b64      	subs	r4, r4, r5
 80053ea:	10a4      	asrs	r4, r4, #2
 80053ec:	2600      	movs	r6, #0
 80053ee:	42a6      	cmp	r6, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f8:	4798      	blx	r3
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005402:	4798      	blx	r3
 8005404:	3601      	adds	r6, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	0800664c 	.word	0x0800664c
 800540c:	0800664c 	.word	0x0800664c
 8005410:	0800664c 	.word	0x0800664c
 8005414:	08006650 	.word	0x08006650

08005418 <__retarget_lock_init_recursive>:
 8005418:	4770      	bx	lr

0800541a <__retarget_lock_acquire_recursive>:
 800541a:	4770      	bx	lr

0800541c <__retarget_lock_release_recursive>:
 800541c:	4770      	bx	lr
	...

08005420 <__assert_func>:
 8005420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005422:	4614      	mov	r4, r2
 8005424:	461a      	mov	r2, r3
 8005426:	4b09      	ldr	r3, [pc, #36]	@ (800544c <__assert_func+0x2c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4605      	mov	r5, r0
 800542c:	68d8      	ldr	r0, [r3, #12]
 800542e:	b14c      	cbz	r4, 8005444 <__assert_func+0x24>
 8005430:	4b07      	ldr	r3, [pc, #28]	@ (8005450 <__assert_func+0x30>)
 8005432:	9100      	str	r1, [sp, #0]
 8005434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005438:	4906      	ldr	r1, [pc, #24]	@ (8005454 <__assert_func+0x34>)
 800543a:	462b      	mov	r3, r5
 800543c:	f000 fc9e 	bl	8005d7c <fiprintf>
 8005440:	f000 fce6 	bl	8005e10 <abort>
 8005444:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <__assert_func+0x38>)
 8005446:	461c      	mov	r4, r3
 8005448:	e7f3      	b.n	8005432 <__assert_func+0x12>
 800544a:	bf00      	nop
 800544c:	200000b8 	.word	0x200000b8
 8005450:	080065d3 	.word	0x080065d3
 8005454:	080065e0 	.word	0x080065e0
 8005458:	0800660e 	.word	0x0800660e

0800545c <_free_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4605      	mov	r5, r0
 8005460:	2900      	cmp	r1, #0
 8005462:	d041      	beq.n	80054e8 <_free_r+0x8c>
 8005464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005468:	1f0c      	subs	r4, r1, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	bfb8      	it	lt
 800546e:	18e4      	addlt	r4, r4, r3
 8005470:	f000 f8e8 	bl	8005644 <__malloc_lock>
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <_free_r+0x90>)
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	b933      	cbnz	r3, 8005488 <_free_r+0x2c>
 800547a:	6063      	str	r3, [r4, #4]
 800547c:	6014      	str	r4, [r2, #0]
 800547e:	4628      	mov	r0, r5
 8005480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005484:	f000 b8e4 	b.w	8005650 <__malloc_unlock>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d908      	bls.n	800549e <_free_r+0x42>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	1821      	adds	r1, r4, r0
 8005490:	428b      	cmp	r3, r1
 8005492:	bf01      	itttt	eq
 8005494:	6819      	ldreq	r1, [r3, #0]
 8005496:	685b      	ldreq	r3, [r3, #4]
 8005498:	1809      	addeq	r1, r1, r0
 800549a:	6021      	streq	r1, [r4, #0]
 800549c:	e7ed      	b.n	800547a <_free_r+0x1e>
 800549e:	461a      	mov	r2, r3
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	b10b      	cbz	r3, 80054a8 <_free_r+0x4c>
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d9fa      	bls.n	800549e <_free_r+0x42>
 80054a8:	6811      	ldr	r1, [r2, #0]
 80054aa:	1850      	adds	r0, r2, r1
 80054ac:	42a0      	cmp	r0, r4
 80054ae:	d10b      	bne.n	80054c8 <_free_r+0x6c>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	4401      	add	r1, r0
 80054b4:	1850      	adds	r0, r2, r1
 80054b6:	4283      	cmp	r3, r0
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	d1e0      	bne.n	800547e <_free_r+0x22>
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	6053      	str	r3, [r2, #4]
 80054c2:	4408      	add	r0, r1
 80054c4:	6010      	str	r0, [r2, #0]
 80054c6:	e7da      	b.n	800547e <_free_r+0x22>
 80054c8:	d902      	bls.n	80054d0 <_free_r+0x74>
 80054ca:	230c      	movs	r3, #12
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	e7d6      	b.n	800547e <_free_r+0x22>
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	1821      	adds	r1, r4, r0
 80054d4:	428b      	cmp	r3, r1
 80054d6:	bf04      	itt	eq
 80054d8:	6819      	ldreq	r1, [r3, #0]
 80054da:	685b      	ldreq	r3, [r3, #4]
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	bf04      	itt	eq
 80054e0:	1809      	addeq	r1, r1, r0
 80054e2:	6021      	streq	r1, [r4, #0]
 80054e4:	6054      	str	r4, [r2, #4]
 80054e6:	e7ca      	b.n	800547e <_free_r+0x22>
 80054e8:	bd38      	pop	{r3, r4, r5, pc}
 80054ea:	bf00      	nop
 80054ec:	20000424 	.word	0x20000424

080054f0 <malloc>:
 80054f0:	4b02      	ldr	r3, [pc, #8]	@ (80054fc <malloc+0xc>)
 80054f2:	4601      	mov	r1, r0
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f000 b825 	b.w	8005544 <_malloc_r>
 80054fa:	bf00      	nop
 80054fc:	200000b8 	.word	0x200000b8

08005500 <sbrk_aligned>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4e0f      	ldr	r6, [pc, #60]	@ (8005540 <sbrk_aligned+0x40>)
 8005504:	460c      	mov	r4, r1
 8005506:	6831      	ldr	r1, [r6, #0]
 8005508:	4605      	mov	r5, r0
 800550a:	b911      	cbnz	r1, 8005512 <sbrk_aligned+0x12>
 800550c:	f000 fc62 	bl	8005dd4 <_sbrk_r>
 8005510:	6030      	str	r0, [r6, #0]
 8005512:	4621      	mov	r1, r4
 8005514:	4628      	mov	r0, r5
 8005516:	f000 fc5d 	bl	8005dd4 <_sbrk_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	d103      	bne.n	8005526 <sbrk_aligned+0x26>
 800551e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005522:	4620      	mov	r0, r4
 8005524:	bd70      	pop	{r4, r5, r6, pc}
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d0f8      	beq.n	8005522 <sbrk_aligned+0x22>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 fc4e 	bl	8005dd4 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d1f2      	bne.n	8005522 <sbrk_aligned+0x22>
 800553c:	e7ef      	b.n	800551e <sbrk_aligned+0x1e>
 800553e:	bf00      	nop
 8005540:	20000420 	.word	0x20000420

08005544 <_malloc_r>:
 8005544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005548:	1ccd      	adds	r5, r1, #3
 800554a:	f025 0503 	bic.w	r5, r5, #3
 800554e:	3508      	adds	r5, #8
 8005550:	2d0c      	cmp	r5, #12
 8005552:	bf38      	it	cc
 8005554:	250c      	movcc	r5, #12
 8005556:	2d00      	cmp	r5, #0
 8005558:	4606      	mov	r6, r0
 800555a:	db01      	blt.n	8005560 <_malloc_r+0x1c>
 800555c:	42a9      	cmp	r1, r5
 800555e:	d904      	bls.n	800556a <_malloc_r+0x26>
 8005560:	230c      	movs	r3, #12
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	2000      	movs	r0, #0
 8005566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800556a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005640 <_malloc_r+0xfc>
 800556e:	f000 f869 	bl	8005644 <__malloc_lock>
 8005572:	f8d8 3000 	ldr.w	r3, [r8]
 8005576:	461c      	mov	r4, r3
 8005578:	bb44      	cbnz	r4, 80055cc <_malloc_r+0x88>
 800557a:	4629      	mov	r1, r5
 800557c:	4630      	mov	r0, r6
 800557e:	f7ff ffbf 	bl	8005500 <sbrk_aligned>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	4604      	mov	r4, r0
 8005586:	d158      	bne.n	800563a <_malloc_r+0xf6>
 8005588:	f8d8 4000 	ldr.w	r4, [r8]
 800558c:	4627      	mov	r7, r4
 800558e:	2f00      	cmp	r7, #0
 8005590:	d143      	bne.n	800561a <_malloc_r+0xd6>
 8005592:	2c00      	cmp	r4, #0
 8005594:	d04b      	beq.n	800562e <_malloc_r+0xea>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	eb04 0903 	add.w	r9, r4, r3
 80055a0:	f000 fc18 	bl	8005dd4 <_sbrk_r>
 80055a4:	4581      	cmp	r9, r0
 80055a6:	d142      	bne.n	800562e <_malloc_r+0xea>
 80055a8:	6821      	ldr	r1, [r4, #0]
 80055aa:	1a6d      	subs	r5, r5, r1
 80055ac:	4629      	mov	r1, r5
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ffa6 	bl	8005500 <sbrk_aligned>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d03a      	beq.n	800562e <_malloc_r+0xea>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	442b      	add	r3, r5
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	f8d8 3000 	ldr.w	r3, [r8]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	bb62      	cbnz	r2, 8005620 <_malloc_r+0xdc>
 80055c6:	f8c8 7000 	str.w	r7, [r8]
 80055ca:	e00f      	b.n	80055ec <_malloc_r+0xa8>
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	1b52      	subs	r2, r2, r5
 80055d0:	d420      	bmi.n	8005614 <_malloc_r+0xd0>
 80055d2:	2a0b      	cmp	r2, #11
 80055d4:	d917      	bls.n	8005606 <_malloc_r+0xc2>
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	42a3      	cmp	r3, r4
 80055da:	6025      	str	r5, [r4, #0]
 80055dc:	bf18      	it	ne
 80055de:	6059      	strne	r1, [r3, #4]
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	bf08      	it	eq
 80055e4:	f8c8 1000 	streq.w	r1, [r8]
 80055e8:	5162      	str	r2, [r4, r5]
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 f82f 	bl	8005650 <__malloc_unlock>
 80055f2:	f104 000b 	add.w	r0, r4, #11
 80055f6:	1d23      	adds	r3, r4, #4
 80055f8:	f020 0007 	bic.w	r0, r0, #7
 80055fc:	1ac2      	subs	r2, r0, r3
 80055fe:	bf1c      	itt	ne
 8005600:	1a1b      	subne	r3, r3, r0
 8005602:	50a3      	strne	r3, [r4, r2]
 8005604:	e7af      	b.n	8005566 <_malloc_r+0x22>
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	42a3      	cmp	r3, r4
 800560a:	bf0c      	ite	eq
 800560c:	f8c8 2000 	streq.w	r2, [r8]
 8005610:	605a      	strne	r2, [r3, #4]
 8005612:	e7eb      	b.n	80055ec <_malloc_r+0xa8>
 8005614:	4623      	mov	r3, r4
 8005616:	6864      	ldr	r4, [r4, #4]
 8005618:	e7ae      	b.n	8005578 <_malloc_r+0x34>
 800561a:	463c      	mov	r4, r7
 800561c:	687f      	ldr	r7, [r7, #4]
 800561e:	e7b6      	b.n	800558e <_malloc_r+0x4a>
 8005620:	461a      	mov	r2, r3
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	42a3      	cmp	r3, r4
 8005626:	d1fb      	bne.n	8005620 <_malloc_r+0xdc>
 8005628:	2300      	movs	r3, #0
 800562a:	6053      	str	r3, [r2, #4]
 800562c:	e7de      	b.n	80055ec <_malloc_r+0xa8>
 800562e:	230c      	movs	r3, #12
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f80c 	bl	8005650 <__malloc_unlock>
 8005638:	e794      	b.n	8005564 <_malloc_r+0x20>
 800563a:	6005      	str	r5, [r0, #0]
 800563c:	e7d6      	b.n	80055ec <_malloc_r+0xa8>
 800563e:	bf00      	nop
 8005640:	20000424 	.word	0x20000424

08005644 <__malloc_lock>:
 8005644:	4801      	ldr	r0, [pc, #4]	@ (800564c <__malloc_lock+0x8>)
 8005646:	f7ff bee8 	b.w	800541a <__retarget_lock_acquire_recursive>
 800564a:	bf00      	nop
 800564c:	2000041c 	.word	0x2000041c

08005650 <__malloc_unlock>:
 8005650:	4801      	ldr	r0, [pc, #4]	@ (8005658 <__malloc_unlock+0x8>)
 8005652:	f7ff bee3 	b.w	800541c <__retarget_lock_release_recursive>
 8005656:	bf00      	nop
 8005658:	2000041c 	.word	0x2000041c

0800565c <__ssputs_r>:
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	688e      	ldr	r6, [r1, #8]
 8005662:	461f      	mov	r7, r3
 8005664:	42be      	cmp	r6, r7
 8005666:	680b      	ldr	r3, [r1, #0]
 8005668:	4682      	mov	sl, r0
 800566a:	460c      	mov	r4, r1
 800566c:	4690      	mov	r8, r2
 800566e:	d82d      	bhi.n	80056cc <__ssputs_r+0x70>
 8005670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005678:	d026      	beq.n	80056c8 <__ssputs_r+0x6c>
 800567a:	6965      	ldr	r5, [r4, #20]
 800567c:	6909      	ldr	r1, [r1, #16]
 800567e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005682:	eba3 0901 	sub.w	r9, r3, r1
 8005686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800568a:	1c7b      	adds	r3, r7, #1
 800568c:	444b      	add	r3, r9
 800568e:	106d      	asrs	r5, r5, #1
 8005690:	429d      	cmp	r5, r3
 8005692:	bf38      	it	cc
 8005694:	461d      	movcc	r5, r3
 8005696:	0553      	lsls	r3, r2, #21
 8005698:	d527      	bpl.n	80056ea <__ssputs_r+0x8e>
 800569a:	4629      	mov	r1, r5
 800569c:	f7ff ff52 	bl	8005544 <_malloc_r>
 80056a0:	4606      	mov	r6, r0
 80056a2:	b360      	cbz	r0, 80056fe <__ssputs_r+0xa2>
 80056a4:	6921      	ldr	r1, [r4, #16]
 80056a6:	464a      	mov	r2, r9
 80056a8:	f000 fba4 	bl	8005df4 <memcpy>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b6:	81a3      	strh	r3, [r4, #12]
 80056b8:	6126      	str	r6, [r4, #16]
 80056ba:	6165      	str	r5, [r4, #20]
 80056bc:	444e      	add	r6, r9
 80056be:	eba5 0509 	sub.w	r5, r5, r9
 80056c2:	6026      	str	r6, [r4, #0]
 80056c4:	60a5      	str	r5, [r4, #8]
 80056c6:	463e      	mov	r6, r7
 80056c8:	42be      	cmp	r6, r7
 80056ca:	d900      	bls.n	80056ce <__ssputs_r+0x72>
 80056cc:	463e      	mov	r6, r7
 80056ce:	6820      	ldr	r0, [r4, #0]
 80056d0:	4632      	mov	r2, r6
 80056d2:	4641      	mov	r1, r8
 80056d4:	f000 fb64 	bl	8005da0 <memmove>
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	1b9b      	subs	r3, r3, r6
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	4433      	add	r3, r6
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	2000      	movs	r0, #0
 80056e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ea:	462a      	mov	r2, r5
 80056ec:	f000 fb97 	bl	8005e1e <_realloc_r>
 80056f0:	4606      	mov	r6, r0
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d1e0      	bne.n	80056b8 <__ssputs_r+0x5c>
 80056f6:	6921      	ldr	r1, [r4, #16]
 80056f8:	4650      	mov	r0, sl
 80056fa:	f7ff feaf 	bl	800545c <_free_r>
 80056fe:	230c      	movs	r3, #12
 8005700:	f8ca 3000 	str.w	r3, [sl]
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800570a:	81a3      	strh	r3, [r4, #12]
 800570c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005710:	e7e9      	b.n	80056e6 <__ssputs_r+0x8a>
	...

08005714 <_svfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	4698      	mov	r8, r3
 800571a:	898b      	ldrh	r3, [r1, #12]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	b09d      	sub	sp, #116	@ 0x74
 8005720:	4607      	mov	r7, r0
 8005722:	460d      	mov	r5, r1
 8005724:	4614      	mov	r4, r2
 8005726:	d510      	bpl.n	800574a <_svfiprintf_r+0x36>
 8005728:	690b      	ldr	r3, [r1, #16]
 800572a:	b973      	cbnz	r3, 800574a <_svfiprintf_r+0x36>
 800572c:	2140      	movs	r1, #64	@ 0x40
 800572e:	f7ff ff09 	bl	8005544 <_malloc_r>
 8005732:	6028      	str	r0, [r5, #0]
 8005734:	6128      	str	r0, [r5, #16]
 8005736:	b930      	cbnz	r0, 8005746 <_svfiprintf_r+0x32>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005740:	b01d      	add	sp, #116	@ 0x74
 8005742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005746:	2340      	movs	r3, #64	@ 0x40
 8005748:	616b      	str	r3, [r5, #20]
 800574a:	2300      	movs	r3, #0
 800574c:	9309      	str	r3, [sp, #36]	@ 0x24
 800574e:	2320      	movs	r3, #32
 8005750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005754:	f8cd 800c 	str.w	r8, [sp, #12]
 8005758:	2330      	movs	r3, #48	@ 0x30
 800575a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058f8 <_svfiprintf_r+0x1e4>
 800575e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005762:	f04f 0901 	mov.w	r9, #1
 8005766:	4623      	mov	r3, r4
 8005768:	469a      	mov	sl, r3
 800576a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576e:	b10a      	cbz	r2, 8005774 <_svfiprintf_r+0x60>
 8005770:	2a25      	cmp	r2, #37	@ 0x25
 8005772:	d1f9      	bne.n	8005768 <_svfiprintf_r+0x54>
 8005774:	ebba 0b04 	subs.w	fp, sl, r4
 8005778:	d00b      	beq.n	8005792 <_svfiprintf_r+0x7e>
 800577a:	465b      	mov	r3, fp
 800577c:	4622      	mov	r2, r4
 800577e:	4629      	mov	r1, r5
 8005780:	4638      	mov	r0, r7
 8005782:	f7ff ff6b 	bl	800565c <__ssputs_r>
 8005786:	3001      	adds	r0, #1
 8005788:	f000 80a7 	beq.w	80058da <_svfiprintf_r+0x1c6>
 800578c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800578e:	445a      	add	r2, fp
 8005790:	9209      	str	r2, [sp, #36]	@ 0x24
 8005792:	f89a 3000 	ldrb.w	r3, [sl]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 809f 	beq.w	80058da <_svfiprintf_r+0x1c6>
 800579c:	2300      	movs	r3, #0
 800579e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a6:	f10a 0a01 	add.w	sl, sl, #1
 80057aa:	9304      	str	r3, [sp, #16]
 80057ac:	9307      	str	r3, [sp, #28]
 80057ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80057b4:	4654      	mov	r4, sl
 80057b6:	2205      	movs	r2, #5
 80057b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057bc:	484e      	ldr	r0, [pc, #312]	@ (80058f8 <_svfiprintf_r+0x1e4>)
 80057be:	f7fa fd2f 	bl	8000220 <memchr>
 80057c2:	9a04      	ldr	r2, [sp, #16]
 80057c4:	b9d8      	cbnz	r0, 80057fe <_svfiprintf_r+0xea>
 80057c6:	06d0      	lsls	r0, r2, #27
 80057c8:	bf44      	itt	mi
 80057ca:	2320      	movmi	r3, #32
 80057cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057d0:	0711      	lsls	r1, r2, #28
 80057d2:	bf44      	itt	mi
 80057d4:	232b      	movmi	r3, #43	@ 0x2b
 80057d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057da:	f89a 3000 	ldrb.w	r3, [sl]
 80057de:	2b2a      	cmp	r3, #42	@ 0x2a
 80057e0:	d015      	beq.n	800580e <_svfiprintf_r+0xfa>
 80057e2:	9a07      	ldr	r2, [sp, #28]
 80057e4:	4654      	mov	r4, sl
 80057e6:	2000      	movs	r0, #0
 80057e8:	f04f 0c0a 	mov.w	ip, #10
 80057ec:	4621      	mov	r1, r4
 80057ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f2:	3b30      	subs	r3, #48	@ 0x30
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	d94b      	bls.n	8005890 <_svfiprintf_r+0x17c>
 80057f8:	b1b0      	cbz	r0, 8005828 <_svfiprintf_r+0x114>
 80057fa:	9207      	str	r2, [sp, #28]
 80057fc:	e014      	b.n	8005828 <_svfiprintf_r+0x114>
 80057fe:	eba0 0308 	sub.w	r3, r0, r8
 8005802:	fa09 f303 	lsl.w	r3, r9, r3
 8005806:	4313      	orrs	r3, r2
 8005808:	9304      	str	r3, [sp, #16]
 800580a:	46a2      	mov	sl, r4
 800580c:	e7d2      	b.n	80057b4 <_svfiprintf_r+0xa0>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	1d19      	adds	r1, r3, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	9103      	str	r1, [sp, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfbb      	ittet	lt
 800581a:	425b      	neglt	r3, r3
 800581c:	f042 0202 	orrlt.w	r2, r2, #2
 8005820:	9307      	strge	r3, [sp, #28]
 8005822:	9307      	strlt	r3, [sp, #28]
 8005824:	bfb8      	it	lt
 8005826:	9204      	strlt	r2, [sp, #16]
 8005828:	7823      	ldrb	r3, [r4, #0]
 800582a:	2b2e      	cmp	r3, #46	@ 0x2e
 800582c:	d10a      	bne.n	8005844 <_svfiprintf_r+0x130>
 800582e:	7863      	ldrb	r3, [r4, #1]
 8005830:	2b2a      	cmp	r3, #42	@ 0x2a
 8005832:	d132      	bne.n	800589a <_svfiprintf_r+0x186>
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	9203      	str	r2, [sp, #12]
 800583c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005840:	3402      	adds	r4, #2
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005908 <_svfiprintf_r+0x1f4>
 8005848:	7821      	ldrb	r1, [r4, #0]
 800584a:	2203      	movs	r2, #3
 800584c:	4650      	mov	r0, sl
 800584e:	f7fa fce7 	bl	8000220 <memchr>
 8005852:	b138      	cbz	r0, 8005864 <_svfiprintf_r+0x150>
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	eba0 000a 	sub.w	r0, r0, sl
 800585a:	2240      	movs	r2, #64	@ 0x40
 800585c:	4082      	lsls	r2, r0
 800585e:	4313      	orrs	r3, r2
 8005860:	3401      	adds	r4, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	4824      	ldr	r0, [pc, #144]	@ (80058fc <_svfiprintf_r+0x1e8>)
 800586a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800586e:	2206      	movs	r2, #6
 8005870:	f7fa fcd6 	bl	8000220 <memchr>
 8005874:	2800      	cmp	r0, #0
 8005876:	d036      	beq.n	80058e6 <_svfiprintf_r+0x1d2>
 8005878:	4b21      	ldr	r3, [pc, #132]	@ (8005900 <_svfiprintf_r+0x1ec>)
 800587a:	bb1b      	cbnz	r3, 80058c4 <_svfiprintf_r+0x1b0>
 800587c:	9b03      	ldr	r3, [sp, #12]
 800587e:	3307      	adds	r3, #7
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	3308      	adds	r3, #8
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588a:	4433      	add	r3, r6
 800588c:	9309      	str	r3, [sp, #36]	@ 0x24
 800588e:	e76a      	b.n	8005766 <_svfiprintf_r+0x52>
 8005890:	fb0c 3202 	mla	r2, ip, r2, r3
 8005894:	460c      	mov	r4, r1
 8005896:	2001      	movs	r0, #1
 8005898:	e7a8      	b.n	80057ec <_svfiprintf_r+0xd8>
 800589a:	2300      	movs	r3, #0
 800589c:	3401      	adds	r4, #1
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	4619      	mov	r1, r3
 80058a2:	f04f 0c0a 	mov.w	ip, #10
 80058a6:	4620      	mov	r0, r4
 80058a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ac:	3a30      	subs	r2, #48	@ 0x30
 80058ae:	2a09      	cmp	r2, #9
 80058b0:	d903      	bls.n	80058ba <_svfiprintf_r+0x1a6>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0c6      	beq.n	8005844 <_svfiprintf_r+0x130>
 80058b6:	9105      	str	r1, [sp, #20]
 80058b8:	e7c4      	b.n	8005844 <_svfiprintf_r+0x130>
 80058ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80058be:	4604      	mov	r4, r0
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7f0      	b.n	80058a6 <_svfiprintf_r+0x192>
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <_svfiprintf_r+0x1f0>)
 80058cc:	a904      	add	r1, sp, #16
 80058ce:	4638      	mov	r0, r7
 80058d0:	f3af 8000 	nop.w
 80058d4:	1c42      	adds	r2, r0, #1
 80058d6:	4606      	mov	r6, r0
 80058d8:	d1d6      	bne.n	8005888 <_svfiprintf_r+0x174>
 80058da:	89ab      	ldrh	r3, [r5, #12]
 80058dc:	065b      	lsls	r3, r3, #25
 80058de:	f53f af2d 	bmi.w	800573c <_svfiprintf_r+0x28>
 80058e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058e4:	e72c      	b.n	8005740 <_svfiprintf_r+0x2c>
 80058e6:	ab03      	add	r3, sp, #12
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	462a      	mov	r2, r5
 80058ec:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <_svfiprintf_r+0x1f0>)
 80058ee:	a904      	add	r1, sp, #16
 80058f0:	4638      	mov	r0, r7
 80058f2:	f000 f879 	bl	80059e8 <_printf_i>
 80058f6:	e7ed      	b.n	80058d4 <_svfiprintf_r+0x1c0>
 80058f8:	0800660f 	.word	0x0800660f
 80058fc:	08006619 	.word	0x08006619
 8005900:	00000000 	.word	0x00000000
 8005904:	0800565d 	.word	0x0800565d
 8005908:	08006615 	.word	0x08006615

0800590c <_printf_common>:
 800590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	4616      	mov	r6, r2
 8005912:	4698      	mov	r8, r3
 8005914:	688a      	ldr	r2, [r1, #8]
 8005916:	690b      	ldr	r3, [r1, #16]
 8005918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800591c:	4293      	cmp	r3, r2
 800591e:	bfb8      	it	lt
 8005920:	4613      	movlt	r3, r2
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005928:	4607      	mov	r7, r0
 800592a:	460c      	mov	r4, r1
 800592c:	b10a      	cbz	r2, 8005932 <_printf_common+0x26>
 800592e:	3301      	adds	r3, #1
 8005930:	6033      	str	r3, [r6, #0]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	0699      	lsls	r1, r3, #26
 8005936:	bf42      	ittt	mi
 8005938:	6833      	ldrmi	r3, [r6, #0]
 800593a:	3302      	addmi	r3, #2
 800593c:	6033      	strmi	r3, [r6, #0]
 800593e:	6825      	ldr	r5, [r4, #0]
 8005940:	f015 0506 	ands.w	r5, r5, #6
 8005944:	d106      	bne.n	8005954 <_printf_common+0x48>
 8005946:	f104 0a19 	add.w	sl, r4, #25
 800594a:	68e3      	ldr	r3, [r4, #12]
 800594c:	6832      	ldr	r2, [r6, #0]
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	42ab      	cmp	r3, r5
 8005952:	dc26      	bgt.n	80059a2 <_printf_common+0x96>
 8005954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	3b00      	subs	r3, #0
 800595c:	bf18      	it	ne
 800595e:	2301      	movne	r3, #1
 8005960:	0692      	lsls	r2, r2, #26
 8005962:	d42b      	bmi.n	80059bc <_printf_common+0xb0>
 8005964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005968:	4641      	mov	r1, r8
 800596a:	4638      	mov	r0, r7
 800596c:	47c8      	blx	r9
 800596e:	3001      	adds	r0, #1
 8005970:	d01e      	beq.n	80059b0 <_printf_common+0xa4>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	6922      	ldr	r2, [r4, #16]
 8005976:	f003 0306 	and.w	r3, r3, #6
 800597a:	2b04      	cmp	r3, #4
 800597c:	bf02      	ittt	eq
 800597e:	68e5      	ldreq	r5, [r4, #12]
 8005980:	6833      	ldreq	r3, [r6, #0]
 8005982:	1aed      	subeq	r5, r5, r3
 8005984:	68a3      	ldr	r3, [r4, #8]
 8005986:	bf0c      	ite	eq
 8005988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800598c:	2500      	movne	r5, #0
 800598e:	4293      	cmp	r3, r2
 8005990:	bfc4      	itt	gt
 8005992:	1a9b      	subgt	r3, r3, r2
 8005994:	18ed      	addgt	r5, r5, r3
 8005996:	2600      	movs	r6, #0
 8005998:	341a      	adds	r4, #26
 800599a:	42b5      	cmp	r5, r6
 800599c:	d11a      	bne.n	80059d4 <_printf_common+0xc8>
 800599e:	2000      	movs	r0, #0
 80059a0:	e008      	b.n	80059b4 <_printf_common+0xa8>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4641      	mov	r1, r8
 80059a8:	4638      	mov	r0, r7
 80059aa:	47c8      	blx	r9
 80059ac:	3001      	adds	r0, #1
 80059ae:	d103      	bne.n	80059b8 <_printf_common+0xac>
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b8:	3501      	adds	r5, #1
 80059ba:	e7c6      	b.n	800594a <_printf_common+0x3e>
 80059bc:	18e1      	adds	r1, r4, r3
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	2030      	movs	r0, #48	@ 0x30
 80059c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059c6:	4422      	add	r2, r4
 80059c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059d0:	3302      	adds	r3, #2
 80059d2:	e7c7      	b.n	8005964 <_printf_common+0x58>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4622      	mov	r2, r4
 80059d8:	4641      	mov	r1, r8
 80059da:	4638      	mov	r0, r7
 80059dc:	47c8      	blx	r9
 80059de:	3001      	adds	r0, #1
 80059e0:	d0e6      	beq.n	80059b0 <_printf_common+0xa4>
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7d9      	b.n	800599a <_printf_common+0x8e>
	...

080059e8 <_printf_i>:
 80059e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	7e0f      	ldrb	r7, [r1, #24]
 80059ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059f0:	2f78      	cmp	r7, #120	@ 0x78
 80059f2:	4691      	mov	r9, r2
 80059f4:	4680      	mov	r8, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	469a      	mov	sl, r3
 80059fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059fe:	d807      	bhi.n	8005a10 <_printf_i+0x28>
 8005a00:	2f62      	cmp	r7, #98	@ 0x62
 8005a02:	d80a      	bhi.n	8005a1a <_printf_i+0x32>
 8005a04:	2f00      	cmp	r7, #0
 8005a06:	f000 80d1 	beq.w	8005bac <_printf_i+0x1c4>
 8005a0a:	2f58      	cmp	r7, #88	@ 0x58
 8005a0c:	f000 80b8 	beq.w	8005b80 <_printf_i+0x198>
 8005a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a18:	e03a      	b.n	8005a90 <_printf_i+0xa8>
 8005a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a1e:	2b15      	cmp	r3, #21
 8005a20:	d8f6      	bhi.n	8005a10 <_printf_i+0x28>
 8005a22:	a101      	add	r1, pc, #4	@ (adr r1, 8005a28 <_printf_i+0x40>)
 8005a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a95 	.word	0x08005a95
 8005a30:	08005a11 	.word	0x08005a11
 8005a34:	08005a11 	.word	0x08005a11
 8005a38:	08005a11 	.word	0x08005a11
 8005a3c:	08005a11 	.word	0x08005a11
 8005a40:	08005a95 	.word	0x08005a95
 8005a44:	08005a11 	.word	0x08005a11
 8005a48:	08005a11 	.word	0x08005a11
 8005a4c:	08005a11 	.word	0x08005a11
 8005a50:	08005a11 	.word	0x08005a11
 8005a54:	08005b93 	.word	0x08005b93
 8005a58:	08005abf 	.word	0x08005abf
 8005a5c:	08005b4d 	.word	0x08005b4d
 8005a60:	08005a11 	.word	0x08005a11
 8005a64:	08005a11 	.word	0x08005a11
 8005a68:	08005bb5 	.word	0x08005bb5
 8005a6c:	08005a11 	.word	0x08005a11
 8005a70:	08005abf 	.word	0x08005abf
 8005a74:	08005a11 	.word	0x08005a11
 8005a78:	08005a11 	.word	0x08005a11
 8005a7c:	08005b55 	.word	0x08005b55
 8005a80:	6833      	ldr	r3, [r6, #0]
 8005a82:	1d1a      	adds	r2, r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6032      	str	r2, [r6, #0]
 8005a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a90:	2301      	movs	r3, #1
 8005a92:	e09c      	b.n	8005bce <_printf_i+0x1e6>
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	6031      	str	r1, [r6, #0]
 8005a9c:	0606      	lsls	r6, r0, #24
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_i+0xbc>
 8005aa0:	681d      	ldr	r5, [r3, #0]
 8005aa2:	e003      	b.n	8005aac <_printf_i+0xc4>
 8005aa4:	0645      	lsls	r5, r0, #25
 8005aa6:	d5fb      	bpl.n	8005aa0 <_printf_i+0xb8>
 8005aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005aac:	2d00      	cmp	r5, #0
 8005aae:	da03      	bge.n	8005ab8 <_printf_i+0xd0>
 8005ab0:	232d      	movs	r3, #45	@ 0x2d
 8005ab2:	426d      	negs	r5, r5
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab8:	4858      	ldr	r0, [pc, #352]	@ (8005c1c <_printf_i+0x234>)
 8005aba:	230a      	movs	r3, #10
 8005abc:	e011      	b.n	8005ae2 <_printf_i+0xfa>
 8005abe:	6821      	ldr	r1, [r4, #0]
 8005ac0:	6833      	ldr	r3, [r6, #0]
 8005ac2:	0608      	lsls	r0, r1, #24
 8005ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ac8:	d402      	bmi.n	8005ad0 <_printf_i+0xe8>
 8005aca:	0649      	lsls	r1, r1, #25
 8005acc:	bf48      	it	mi
 8005ace:	b2ad      	uxthmi	r5, r5
 8005ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ad2:	4852      	ldr	r0, [pc, #328]	@ (8005c1c <_printf_i+0x234>)
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	bf14      	ite	ne
 8005ad8:	230a      	movne	r3, #10
 8005ada:	2308      	moveq	r3, #8
 8005adc:	2100      	movs	r1, #0
 8005ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ae2:	6866      	ldr	r6, [r4, #4]
 8005ae4:	60a6      	str	r6, [r4, #8]
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	db05      	blt.n	8005af6 <_printf_i+0x10e>
 8005aea:	6821      	ldr	r1, [r4, #0]
 8005aec:	432e      	orrs	r6, r5
 8005aee:	f021 0104 	bic.w	r1, r1, #4
 8005af2:	6021      	str	r1, [r4, #0]
 8005af4:	d04b      	beq.n	8005b8e <_printf_i+0x1a6>
 8005af6:	4616      	mov	r6, r2
 8005af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005afc:	fb03 5711 	mls	r7, r3, r1, r5
 8005b00:	5dc7      	ldrb	r7, [r0, r7]
 8005b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b06:	462f      	mov	r7, r5
 8005b08:	42bb      	cmp	r3, r7
 8005b0a:	460d      	mov	r5, r1
 8005b0c:	d9f4      	bls.n	8005af8 <_printf_i+0x110>
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d10b      	bne.n	8005b2a <_printf_i+0x142>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	07df      	lsls	r7, r3, #31
 8005b16:	d508      	bpl.n	8005b2a <_printf_i+0x142>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	6861      	ldr	r1, [r4, #4]
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	bfde      	ittt	le
 8005b20:	2330      	movle	r3, #48	@ 0x30
 8005b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005b2a:	1b92      	subs	r2, r2, r6
 8005b2c:	6122      	str	r2, [r4, #16]
 8005b2e:	f8cd a000 	str.w	sl, [sp]
 8005b32:	464b      	mov	r3, r9
 8005b34:	aa03      	add	r2, sp, #12
 8005b36:	4621      	mov	r1, r4
 8005b38:	4640      	mov	r0, r8
 8005b3a:	f7ff fee7 	bl	800590c <_printf_common>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d14a      	bne.n	8005bd8 <_printf_i+0x1f0>
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b46:	b004      	add	sp, #16
 8005b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	f043 0320 	orr.w	r3, r3, #32
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	4832      	ldr	r0, [pc, #200]	@ (8005c20 <_printf_i+0x238>)
 8005b56:	2778      	movs	r7, #120	@ 0x78
 8005b58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	6831      	ldr	r1, [r6, #0]
 8005b60:	061f      	lsls	r7, r3, #24
 8005b62:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b66:	d402      	bmi.n	8005b6e <_printf_i+0x186>
 8005b68:	065f      	lsls	r7, r3, #25
 8005b6a:	bf48      	it	mi
 8005b6c:	b2ad      	uxthmi	r5, r5
 8005b6e:	6031      	str	r1, [r6, #0]
 8005b70:	07d9      	lsls	r1, r3, #31
 8005b72:	bf44      	itt	mi
 8005b74:	f043 0320 	orrmi.w	r3, r3, #32
 8005b78:	6023      	strmi	r3, [r4, #0]
 8005b7a:	b11d      	cbz	r5, 8005b84 <_printf_i+0x19c>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	e7ad      	b.n	8005adc <_printf_i+0xf4>
 8005b80:	4826      	ldr	r0, [pc, #152]	@ (8005c1c <_printf_i+0x234>)
 8005b82:	e7e9      	b.n	8005b58 <_printf_i+0x170>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	f023 0320 	bic.w	r3, r3, #32
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	e7f6      	b.n	8005b7c <_printf_i+0x194>
 8005b8e:	4616      	mov	r6, r2
 8005b90:	e7bd      	b.n	8005b0e <_printf_i+0x126>
 8005b92:	6833      	ldr	r3, [r6, #0]
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	6961      	ldr	r1, [r4, #20]
 8005b98:	1d18      	adds	r0, r3, #4
 8005b9a:	6030      	str	r0, [r6, #0]
 8005b9c:	062e      	lsls	r6, r5, #24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	d501      	bpl.n	8005ba6 <_printf_i+0x1be>
 8005ba2:	6019      	str	r1, [r3, #0]
 8005ba4:	e002      	b.n	8005bac <_printf_i+0x1c4>
 8005ba6:	0668      	lsls	r0, r5, #25
 8005ba8:	d5fb      	bpl.n	8005ba2 <_printf_i+0x1ba>
 8005baa:	8019      	strh	r1, [r3, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	e7bc      	b.n	8005b2e <_printf_i+0x146>
 8005bb4:	6833      	ldr	r3, [r6, #0]
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	6032      	str	r2, [r6, #0]
 8005bba:	681e      	ldr	r6, [r3, #0]
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7fa fb2d 	bl	8000220 <memchr>
 8005bc6:	b108      	cbz	r0, 8005bcc <_printf_i+0x1e4>
 8005bc8:	1b80      	subs	r0, r0, r6
 8005bca:	6060      	str	r0, [r4, #4]
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bd6:	e7aa      	b.n	8005b2e <_printf_i+0x146>
 8005bd8:	6923      	ldr	r3, [r4, #16]
 8005bda:	4632      	mov	r2, r6
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4640      	mov	r0, r8
 8005be0:	47d0      	blx	sl
 8005be2:	3001      	adds	r0, #1
 8005be4:	d0ad      	beq.n	8005b42 <_printf_i+0x15a>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	079b      	lsls	r3, r3, #30
 8005bea:	d413      	bmi.n	8005c14 <_printf_i+0x22c>
 8005bec:	68e0      	ldr	r0, [r4, #12]
 8005bee:	9b03      	ldr	r3, [sp, #12]
 8005bf0:	4298      	cmp	r0, r3
 8005bf2:	bfb8      	it	lt
 8005bf4:	4618      	movlt	r0, r3
 8005bf6:	e7a6      	b.n	8005b46 <_printf_i+0x15e>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4640      	mov	r0, r8
 8005c00:	47d0      	blx	sl
 8005c02:	3001      	adds	r0, #1
 8005c04:	d09d      	beq.n	8005b42 <_printf_i+0x15a>
 8005c06:	3501      	adds	r5, #1
 8005c08:	68e3      	ldr	r3, [r4, #12]
 8005c0a:	9903      	ldr	r1, [sp, #12]
 8005c0c:	1a5b      	subs	r3, r3, r1
 8005c0e:	42ab      	cmp	r3, r5
 8005c10:	dcf2      	bgt.n	8005bf8 <_printf_i+0x210>
 8005c12:	e7eb      	b.n	8005bec <_printf_i+0x204>
 8005c14:	2500      	movs	r5, #0
 8005c16:	f104 0619 	add.w	r6, r4, #25
 8005c1a:	e7f5      	b.n	8005c08 <_printf_i+0x220>
 8005c1c:	08006620 	.word	0x08006620
 8005c20:	08006631 	.word	0x08006631

08005c24 <__sflush_r>:
 8005c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2c:	0716      	lsls	r6, r2, #28
 8005c2e:	4605      	mov	r5, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	d454      	bmi.n	8005cde <__sflush_r+0xba>
 8005c34:	684b      	ldr	r3, [r1, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	dc02      	bgt.n	8005c40 <__sflush_r+0x1c>
 8005c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dd48      	ble.n	8005cd2 <__sflush_r+0xae>
 8005c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	d045      	beq.n	8005cd2 <__sflush_r+0xae>
 8005c46:	2300      	movs	r3, #0
 8005c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c4c:	682f      	ldr	r7, [r5, #0]
 8005c4e:	6a21      	ldr	r1, [r4, #32]
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	d030      	beq.n	8005cb6 <__sflush_r+0x92>
 8005c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	0759      	lsls	r1, r3, #29
 8005c5a:	d505      	bpl.n	8005c68 <__sflush_r+0x44>
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c62:	b10b      	cbz	r3, 8005c68 <__sflush_r+0x44>
 8005c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c66:	1ad2      	subs	r2, r2, r3
 8005c68:	2300      	movs	r3, #0
 8005c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c6c:	6a21      	ldr	r1, [r4, #32]
 8005c6e:	4628      	mov	r0, r5
 8005c70:	47b0      	blx	r6
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	d106      	bne.n	8005c86 <__sflush_r+0x62>
 8005c78:	6829      	ldr	r1, [r5, #0]
 8005c7a:	291d      	cmp	r1, #29
 8005c7c:	d82b      	bhi.n	8005cd6 <__sflush_r+0xb2>
 8005c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d28 <__sflush_r+0x104>)
 8005c80:	40ca      	lsrs	r2, r1
 8005c82:	07d6      	lsls	r6, r2, #31
 8005c84:	d527      	bpl.n	8005cd6 <__sflush_r+0xb2>
 8005c86:	2200      	movs	r2, #0
 8005c88:	6062      	str	r2, [r4, #4]
 8005c8a:	04d9      	lsls	r1, r3, #19
 8005c8c:	6922      	ldr	r2, [r4, #16]
 8005c8e:	6022      	str	r2, [r4, #0]
 8005c90:	d504      	bpl.n	8005c9c <__sflush_r+0x78>
 8005c92:	1c42      	adds	r2, r0, #1
 8005c94:	d101      	bne.n	8005c9a <__sflush_r+0x76>
 8005c96:	682b      	ldr	r3, [r5, #0]
 8005c98:	b903      	cbnz	r3, 8005c9c <__sflush_r+0x78>
 8005c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c9e:	602f      	str	r7, [r5, #0]
 8005ca0:	b1b9      	cbz	r1, 8005cd2 <__sflush_r+0xae>
 8005ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	d002      	beq.n	8005cb0 <__sflush_r+0x8c>
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7ff fbd6 	bl	800545c <_free_r>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cb4:	e00d      	b.n	8005cd2 <__sflush_r+0xae>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b0      	blx	r6
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	1c50      	adds	r0, r2, #1
 8005cc0:	d1c9      	bne.n	8005c56 <__sflush_r+0x32>
 8005cc2:	682b      	ldr	r3, [r5, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0c6      	beq.n	8005c56 <__sflush_r+0x32>
 8005cc8:	2b1d      	cmp	r3, #29
 8005cca:	d001      	beq.n	8005cd0 <__sflush_r+0xac>
 8005ccc:	2b16      	cmp	r3, #22
 8005cce:	d11e      	bne.n	8005d0e <__sflush_r+0xea>
 8005cd0:	602f      	str	r7, [r5, #0]
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e022      	b.n	8005d1c <__sflush_r+0xf8>
 8005cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cda:	b21b      	sxth	r3, r3
 8005cdc:	e01b      	b.n	8005d16 <__sflush_r+0xf2>
 8005cde:	690f      	ldr	r7, [r1, #16]
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	d0f6      	beq.n	8005cd2 <__sflush_r+0xae>
 8005ce4:	0793      	lsls	r3, r2, #30
 8005ce6:	680e      	ldr	r6, [r1, #0]
 8005ce8:	bf08      	it	eq
 8005cea:	694b      	ldreq	r3, [r1, #20]
 8005cec:	600f      	str	r7, [r1, #0]
 8005cee:	bf18      	it	ne
 8005cf0:	2300      	movne	r3, #0
 8005cf2:	eba6 0807 	sub.w	r8, r6, r7
 8005cf6:	608b      	str	r3, [r1, #8]
 8005cf8:	f1b8 0f00 	cmp.w	r8, #0
 8005cfc:	dde9      	ble.n	8005cd2 <__sflush_r+0xae>
 8005cfe:	6a21      	ldr	r1, [r4, #32]
 8005d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d02:	4643      	mov	r3, r8
 8005d04:	463a      	mov	r2, r7
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b0      	blx	r6
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	dc08      	bgt.n	8005d20 <__sflush_r+0xfc>
 8005d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d20:	4407      	add	r7, r0
 8005d22:	eba8 0800 	sub.w	r8, r8, r0
 8005d26:	e7e7      	b.n	8005cf8 <__sflush_r+0xd4>
 8005d28:	20400001 	.word	0x20400001

08005d2c <_fflush_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	690b      	ldr	r3, [r1, #16]
 8005d30:	4605      	mov	r5, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b913      	cbnz	r3, 8005d3c <_fflush_r+0x10>
 8005d36:	2500      	movs	r5, #0
 8005d38:	4628      	mov	r0, r5
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	b118      	cbz	r0, 8005d46 <_fflush_r+0x1a>
 8005d3e:	6a03      	ldr	r3, [r0, #32]
 8005d40:	b90b      	cbnz	r3, 8005d46 <_fflush_r+0x1a>
 8005d42:	f7ff fa55 	bl	80051f0 <__sinit>
 8005d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f3      	beq.n	8005d36 <_fflush_r+0xa>
 8005d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d50:	07d0      	lsls	r0, r2, #31
 8005d52:	d404      	bmi.n	8005d5e <_fflush_r+0x32>
 8005d54:	0599      	lsls	r1, r3, #22
 8005d56:	d402      	bmi.n	8005d5e <_fflush_r+0x32>
 8005d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d5a:	f7ff fb5e 	bl	800541a <__retarget_lock_acquire_recursive>
 8005d5e:	4628      	mov	r0, r5
 8005d60:	4621      	mov	r1, r4
 8005d62:	f7ff ff5f 	bl	8005c24 <__sflush_r>
 8005d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d68:	07da      	lsls	r2, r3, #31
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	d4e4      	bmi.n	8005d38 <_fflush_r+0xc>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	059b      	lsls	r3, r3, #22
 8005d72:	d4e1      	bmi.n	8005d38 <_fflush_r+0xc>
 8005d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d76:	f7ff fb51 	bl	800541c <__retarget_lock_release_recursive>
 8005d7a:	e7dd      	b.n	8005d38 <_fflush_r+0xc>

08005d7c <fiprintf>:
 8005d7c:	b40e      	push	{r1, r2, r3}
 8005d7e:	b503      	push	{r0, r1, lr}
 8005d80:	4601      	mov	r1, r0
 8005d82:	ab03      	add	r3, sp, #12
 8005d84:	4805      	ldr	r0, [pc, #20]	@ (8005d9c <fiprintf+0x20>)
 8005d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	f000 f89d 	bl	8005ecc <_vfiprintf_r>
 8005d92:	b002      	add	sp, #8
 8005d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d98:	b003      	add	sp, #12
 8005d9a:	4770      	bx	lr
 8005d9c:	200000b8 	.word	0x200000b8

08005da0 <memmove>:
 8005da0:	4288      	cmp	r0, r1
 8005da2:	b510      	push	{r4, lr}
 8005da4:	eb01 0402 	add.w	r4, r1, r2
 8005da8:	d902      	bls.n	8005db0 <memmove+0x10>
 8005daa:	4284      	cmp	r4, r0
 8005dac:	4623      	mov	r3, r4
 8005dae:	d807      	bhi.n	8005dc0 <memmove+0x20>
 8005db0:	1e43      	subs	r3, r0, #1
 8005db2:	42a1      	cmp	r1, r4
 8005db4:	d008      	beq.n	8005dc8 <memmove+0x28>
 8005db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dbe:	e7f8      	b.n	8005db2 <memmove+0x12>
 8005dc0:	4402      	add	r2, r0
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	428a      	cmp	r2, r1
 8005dc6:	d100      	bne.n	8005dca <memmove+0x2a>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dd2:	e7f7      	b.n	8005dc4 <memmove+0x24>

08005dd4 <_sbrk_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d06      	ldr	r5, [pc, #24]	@ (8005df0 <_sbrk_r+0x1c>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fa ffca 	bl	8000d78 <_sbrk>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_sbrk_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_sbrk_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20000418 	.word	0x20000418

08005df4 <memcpy>:
 8005df4:	440a      	add	r2, r1
 8005df6:	4291      	cmp	r1, r2
 8005df8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005dfc:	d100      	bne.n	8005e00 <memcpy+0xc>
 8005dfe:	4770      	bx	lr
 8005e00:	b510      	push	{r4, lr}
 8005e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e0a:	4291      	cmp	r1, r2
 8005e0c:	d1f9      	bne.n	8005e02 <memcpy+0xe>
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <abort>:
 8005e10:	b508      	push	{r3, lr}
 8005e12:	2006      	movs	r0, #6
 8005e14:	f000 fa2e 	bl	8006274 <raise>
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f7fa ff35 	bl	8000c88 <_exit>

08005e1e <_realloc_r>:
 8005e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e22:	4607      	mov	r7, r0
 8005e24:	4614      	mov	r4, r2
 8005e26:	460d      	mov	r5, r1
 8005e28:	b921      	cbnz	r1, 8005e34 <_realloc_r+0x16>
 8005e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2e:	4611      	mov	r1, r2
 8005e30:	f7ff bb88 	b.w	8005544 <_malloc_r>
 8005e34:	b92a      	cbnz	r2, 8005e42 <_realloc_r+0x24>
 8005e36:	f7ff fb11 	bl	800545c <_free_r>
 8005e3a:	4625      	mov	r5, r4
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e42:	f000 fa33 	bl	80062ac <_malloc_usable_size_r>
 8005e46:	4284      	cmp	r4, r0
 8005e48:	4606      	mov	r6, r0
 8005e4a:	d802      	bhi.n	8005e52 <_realloc_r+0x34>
 8005e4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e50:	d8f4      	bhi.n	8005e3c <_realloc_r+0x1e>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4638      	mov	r0, r7
 8005e56:	f7ff fb75 	bl	8005544 <_malloc_r>
 8005e5a:	4680      	mov	r8, r0
 8005e5c:	b908      	cbnz	r0, 8005e62 <_realloc_r+0x44>
 8005e5e:	4645      	mov	r5, r8
 8005e60:	e7ec      	b.n	8005e3c <_realloc_r+0x1e>
 8005e62:	42b4      	cmp	r4, r6
 8005e64:	4622      	mov	r2, r4
 8005e66:	4629      	mov	r1, r5
 8005e68:	bf28      	it	cs
 8005e6a:	4632      	movcs	r2, r6
 8005e6c:	f7ff ffc2 	bl	8005df4 <memcpy>
 8005e70:	4629      	mov	r1, r5
 8005e72:	4638      	mov	r0, r7
 8005e74:	f7ff faf2 	bl	800545c <_free_r>
 8005e78:	e7f1      	b.n	8005e5e <_realloc_r+0x40>

08005e7a <__sfputc_r>:
 8005e7a:	6893      	ldr	r3, [r2, #8]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	b410      	push	{r4}
 8005e82:	6093      	str	r3, [r2, #8]
 8005e84:	da08      	bge.n	8005e98 <__sfputc_r+0x1e>
 8005e86:	6994      	ldr	r4, [r2, #24]
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	db01      	blt.n	8005e90 <__sfputc_r+0x16>
 8005e8c:	290a      	cmp	r1, #10
 8005e8e:	d103      	bne.n	8005e98 <__sfputc_r+0x1e>
 8005e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e94:	f000 b932 	b.w	80060fc <__swbuf_r>
 8005e98:	6813      	ldr	r3, [r2, #0]
 8005e9a:	1c58      	adds	r0, r3, #1
 8005e9c:	6010      	str	r0, [r2, #0]
 8005e9e:	7019      	strb	r1, [r3, #0]
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <__sfputs_r>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460f      	mov	r7, r1
 8005eae:	4614      	mov	r4, r2
 8005eb0:	18d5      	adds	r5, r2, r3
 8005eb2:	42ac      	cmp	r4, r5
 8005eb4:	d101      	bne.n	8005eba <__sfputs_r+0x12>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e007      	b.n	8005eca <__sfputs_r+0x22>
 8005eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ebe:	463a      	mov	r2, r7
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f7ff ffda 	bl	8005e7a <__sfputc_r>
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d1f3      	bne.n	8005eb2 <__sfputs_r+0xa>
 8005eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ecc <_vfiprintf_r>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	b09d      	sub	sp, #116	@ 0x74
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	4698      	mov	r8, r3
 8005ed8:	4606      	mov	r6, r0
 8005eda:	b118      	cbz	r0, 8005ee4 <_vfiprintf_r+0x18>
 8005edc:	6a03      	ldr	r3, [r0, #32]
 8005ede:	b90b      	cbnz	r3, 8005ee4 <_vfiprintf_r+0x18>
 8005ee0:	f7ff f986 	bl	80051f0 <__sinit>
 8005ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ee6:	07d9      	lsls	r1, r3, #31
 8005ee8:	d405      	bmi.n	8005ef6 <_vfiprintf_r+0x2a>
 8005eea:	89ab      	ldrh	r3, [r5, #12]
 8005eec:	059a      	lsls	r2, r3, #22
 8005eee:	d402      	bmi.n	8005ef6 <_vfiprintf_r+0x2a>
 8005ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ef2:	f7ff fa92 	bl	800541a <__retarget_lock_acquire_recursive>
 8005ef6:	89ab      	ldrh	r3, [r5, #12]
 8005ef8:	071b      	lsls	r3, r3, #28
 8005efa:	d501      	bpl.n	8005f00 <_vfiprintf_r+0x34>
 8005efc:	692b      	ldr	r3, [r5, #16]
 8005efe:	b99b      	cbnz	r3, 8005f28 <_vfiprintf_r+0x5c>
 8005f00:	4629      	mov	r1, r5
 8005f02:	4630      	mov	r0, r6
 8005f04:	f000 f938 	bl	8006178 <__swsetup_r>
 8005f08:	b170      	cbz	r0, 8005f28 <_vfiprintf_r+0x5c>
 8005f0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f0c:	07dc      	lsls	r4, r3, #31
 8005f0e:	d504      	bpl.n	8005f1a <_vfiprintf_r+0x4e>
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f14:	b01d      	add	sp, #116	@ 0x74
 8005f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1a:	89ab      	ldrh	r3, [r5, #12]
 8005f1c:	0598      	lsls	r0, r3, #22
 8005f1e:	d4f7      	bmi.n	8005f10 <_vfiprintf_r+0x44>
 8005f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f22:	f7ff fa7b 	bl	800541c <__retarget_lock_release_recursive>
 8005f26:	e7f3      	b.n	8005f10 <_vfiprintf_r+0x44>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f36:	2330      	movs	r3, #48	@ 0x30
 8005f38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060e8 <_vfiprintf_r+0x21c>
 8005f3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f40:	f04f 0901 	mov.w	r9, #1
 8005f44:	4623      	mov	r3, r4
 8005f46:	469a      	mov	sl, r3
 8005f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f4c:	b10a      	cbz	r2, 8005f52 <_vfiprintf_r+0x86>
 8005f4e:	2a25      	cmp	r2, #37	@ 0x25
 8005f50:	d1f9      	bne.n	8005f46 <_vfiprintf_r+0x7a>
 8005f52:	ebba 0b04 	subs.w	fp, sl, r4
 8005f56:	d00b      	beq.n	8005f70 <_vfiprintf_r+0xa4>
 8005f58:	465b      	mov	r3, fp
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f7ff ffa2 	bl	8005ea8 <__sfputs_r>
 8005f64:	3001      	adds	r0, #1
 8005f66:	f000 80a7 	beq.w	80060b8 <_vfiprintf_r+0x1ec>
 8005f6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f6c:	445a      	add	r2, fp
 8005f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f70:	f89a 3000 	ldrb.w	r3, [sl]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 809f 	beq.w	80060b8 <_vfiprintf_r+0x1ec>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f84:	f10a 0a01 	add.w	sl, sl, #1
 8005f88:	9304      	str	r3, [sp, #16]
 8005f8a:	9307      	str	r3, [sp, #28]
 8005f8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f90:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f92:	4654      	mov	r4, sl
 8005f94:	2205      	movs	r2, #5
 8005f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9a:	4853      	ldr	r0, [pc, #332]	@ (80060e8 <_vfiprintf_r+0x21c>)
 8005f9c:	f7fa f940 	bl	8000220 <memchr>
 8005fa0:	9a04      	ldr	r2, [sp, #16]
 8005fa2:	b9d8      	cbnz	r0, 8005fdc <_vfiprintf_r+0x110>
 8005fa4:	06d1      	lsls	r1, r2, #27
 8005fa6:	bf44      	itt	mi
 8005fa8:	2320      	movmi	r3, #32
 8005faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fae:	0713      	lsls	r3, r2, #28
 8005fb0:	bf44      	itt	mi
 8005fb2:	232b      	movmi	r3, #43	@ 0x2b
 8005fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fbe:	d015      	beq.n	8005fec <_vfiprintf_r+0x120>
 8005fc0:	9a07      	ldr	r2, [sp, #28]
 8005fc2:	4654      	mov	r4, sl
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f04f 0c0a 	mov.w	ip, #10
 8005fca:	4621      	mov	r1, r4
 8005fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fd0:	3b30      	subs	r3, #48	@ 0x30
 8005fd2:	2b09      	cmp	r3, #9
 8005fd4:	d94b      	bls.n	800606e <_vfiprintf_r+0x1a2>
 8005fd6:	b1b0      	cbz	r0, 8006006 <_vfiprintf_r+0x13a>
 8005fd8:	9207      	str	r2, [sp, #28]
 8005fda:	e014      	b.n	8006006 <_vfiprintf_r+0x13a>
 8005fdc:	eba0 0308 	sub.w	r3, r0, r8
 8005fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	46a2      	mov	sl, r4
 8005fea:	e7d2      	b.n	8005f92 <_vfiprintf_r+0xc6>
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	1d19      	adds	r1, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	9103      	str	r1, [sp, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	bfbb      	ittet	lt
 8005ff8:	425b      	neglt	r3, r3
 8005ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8005ffe:	9307      	strge	r3, [sp, #28]
 8006000:	9307      	strlt	r3, [sp, #28]
 8006002:	bfb8      	it	lt
 8006004:	9204      	strlt	r2, [sp, #16]
 8006006:	7823      	ldrb	r3, [r4, #0]
 8006008:	2b2e      	cmp	r3, #46	@ 0x2e
 800600a:	d10a      	bne.n	8006022 <_vfiprintf_r+0x156>
 800600c:	7863      	ldrb	r3, [r4, #1]
 800600e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006010:	d132      	bne.n	8006078 <_vfiprintf_r+0x1ac>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	9203      	str	r2, [sp, #12]
 800601a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800601e:	3402      	adds	r4, #2
 8006020:	9305      	str	r3, [sp, #20]
 8006022:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060f8 <_vfiprintf_r+0x22c>
 8006026:	7821      	ldrb	r1, [r4, #0]
 8006028:	2203      	movs	r2, #3
 800602a:	4650      	mov	r0, sl
 800602c:	f7fa f8f8 	bl	8000220 <memchr>
 8006030:	b138      	cbz	r0, 8006042 <_vfiprintf_r+0x176>
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	eba0 000a 	sub.w	r0, r0, sl
 8006038:	2240      	movs	r2, #64	@ 0x40
 800603a:	4082      	lsls	r2, r0
 800603c:	4313      	orrs	r3, r2
 800603e:	3401      	adds	r4, #1
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006046:	4829      	ldr	r0, [pc, #164]	@ (80060ec <_vfiprintf_r+0x220>)
 8006048:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800604c:	2206      	movs	r2, #6
 800604e:	f7fa f8e7 	bl	8000220 <memchr>
 8006052:	2800      	cmp	r0, #0
 8006054:	d03f      	beq.n	80060d6 <_vfiprintf_r+0x20a>
 8006056:	4b26      	ldr	r3, [pc, #152]	@ (80060f0 <_vfiprintf_r+0x224>)
 8006058:	bb1b      	cbnz	r3, 80060a2 <_vfiprintf_r+0x1d6>
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	3307      	adds	r3, #7
 800605e:	f023 0307 	bic.w	r3, r3, #7
 8006062:	3308      	adds	r3, #8
 8006064:	9303      	str	r3, [sp, #12]
 8006066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006068:	443b      	add	r3, r7
 800606a:	9309      	str	r3, [sp, #36]	@ 0x24
 800606c:	e76a      	b.n	8005f44 <_vfiprintf_r+0x78>
 800606e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006072:	460c      	mov	r4, r1
 8006074:	2001      	movs	r0, #1
 8006076:	e7a8      	b.n	8005fca <_vfiprintf_r+0xfe>
 8006078:	2300      	movs	r3, #0
 800607a:	3401      	adds	r4, #1
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	4619      	mov	r1, r3
 8006080:	f04f 0c0a 	mov.w	ip, #10
 8006084:	4620      	mov	r0, r4
 8006086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800608a:	3a30      	subs	r2, #48	@ 0x30
 800608c:	2a09      	cmp	r2, #9
 800608e:	d903      	bls.n	8006098 <_vfiprintf_r+0x1cc>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0c6      	beq.n	8006022 <_vfiprintf_r+0x156>
 8006094:	9105      	str	r1, [sp, #20]
 8006096:	e7c4      	b.n	8006022 <_vfiprintf_r+0x156>
 8006098:	fb0c 2101 	mla	r1, ip, r1, r2
 800609c:	4604      	mov	r4, r0
 800609e:	2301      	movs	r3, #1
 80060a0:	e7f0      	b.n	8006084 <_vfiprintf_r+0x1b8>
 80060a2:	ab03      	add	r3, sp, #12
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	462a      	mov	r2, r5
 80060a8:	4b12      	ldr	r3, [pc, #72]	@ (80060f4 <_vfiprintf_r+0x228>)
 80060aa:	a904      	add	r1, sp, #16
 80060ac:	4630      	mov	r0, r6
 80060ae:	f3af 8000 	nop.w
 80060b2:	4607      	mov	r7, r0
 80060b4:	1c78      	adds	r0, r7, #1
 80060b6:	d1d6      	bne.n	8006066 <_vfiprintf_r+0x19a>
 80060b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060ba:	07d9      	lsls	r1, r3, #31
 80060bc:	d405      	bmi.n	80060ca <_vfiprintf_r+0x1fe>
 80060be:	89ab      	ldrh	r3, [r5, #12]
 80060c0:	059a      	lsls	r2, r3, #22
 80060c2:	d402      	bmi.n	80060ca <_vfiprintf_r+0x1fe>
 80060c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060c6:	f7ff f9a9 	bl	800541c <__retarget_lock_release_recursive>
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	065b      	lsls	r3, r3, #25
 80060ce:	f53f af1f 	bmi.w	8005f10 <_vfiprintf_r+0x44>
 80060d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060d4:	e71e      	b.n	8005f14 <_vfiprintf_r+0x48>
 80060d6:	ab03      	add	r3, sp, #12
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	462a      	mov	r2, r5
 80060dc:	4b05      	ldr	r3, [pc, #20]	@ (80060f4 <_vfiprintf_r+0x228>)
 80060de:	a904      	add	r1, sp, #16
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff fc81 	bl	80059e8 <_printf_i>
 80060e6:	e7e4      	b.n	80060b2 <_vfiprintf_r+0x1e6>
 80060e8:	0800660f 	.word	0x0800660f
 80060ec:	08006619 	.word	0x08006619
 80060f0:	00000000 	.word	0x00000000
 80060f4:	08005ea9 	.word	0x08005ea9
 80060f8:	08006615 	.word	0x08006615

080060fc <__swbuf_r>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	460e      	mov	r6, r1
 8006100:	4614      	mov	r4, r2
 8006102:	4605      	mov	r5, r0
 8006104:	b118      	cbz	r0, 800610e <__swbuf_r+0x12>
 8006106:	6a03      	ldr	r3, [r0, #32]
 8006108:	b90b      	cbnz	r3, 800610e <__swbuf_r+0x12>
 800610a:	f7ff f871 	bl	80051f0 <__sinit>
 800610e:	69a3      	ldr	r3, [r4, #24]
 8006110:	60a3      	str	r3, [r4, #8]
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	071a      	lsls	r2, r3, #28
 8006116:	d501      	bpl.n	800611c <__swbuf_r+0x20>
 8006118:	6923      	ldr	r3, [r4, #16]
 800611a:	b943      	cbnz	r3, 800612e <__swbuf_r+0x32>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f82a 	bl	8006178 <__swsetup_r>
 8006124:	b118      	cbz	r0, 800612e <__swbuf_r+0x32>
 8006126:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800612a:	4638      	mov	r0, r7
 800612c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	6922      	ldr	r2, [r4, #16]
 8006132:	1a98      	subs	r0, r3, r2
 8006134:	6963      	ldr	r3, [r4, #20]
 8006136:	b2f6      	uxtb	r6, r6
 8006138:	4283      	cmp	r3, r0
 800613a:	4637      	mov	r7, r6
 800613c:	dc05      	bgt.n	800614a <__swbuf_r+0x4e>
 800613e:	4621      	mov	r1, r4
 8006140:	4628      	mov	r0, r5
 8006142:	f7ff fdf3 	bl	8005d2c <_fflush_r>
 8006146:	2800      	cmp	r0, #0
 8006148:	d1ed      	bne.n	8006126 <__swbuf_r+0x2a>
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	3b01      	subs	r3, #1
 800614e:	60a3      	str	r3, [r4, #8]
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	701e      	strb	r6, [r3, #0]
 8006158:	6962      	ldr	r2, [r4, #20]
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	429a      	cmp	r2, r3
 800615e:	d004      	beq.n	800616a <__swbuf_r+0x6e>
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	07db      	lsls	r3, r3, #31
 8006164:	d5e1      	bpl.n	800612a <__swbuf_r+0x2e>
 8006166:	2e0a      	cmp	r6, #10
 8006168:	d1df      	bne.n	800612a <__swbuf_r+0x2e>
 800616a:	4621      	mov	r1, r4
 800616c:	4628      	mov	r0, r5
 800616e:	f7ff fddd 	bl	8005d2c <_fflush_r>
 8006172:	2800      	cmp	r0, #0
 8006174:	d0d9      	beq.n	800612a <__swbuf_r+0x2e>
 8006176:	e7d6      	b.n	8006126 <__swbuf_r+0x2a>

08006178 <__swsetup_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4b29      	ldr	r3, [pc, #164]	@ (8006220 <__swsetup_r+0xa8>)
 800617c:	4605      	mov	r5, r0
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	460c      	mov	r4, r1
 8006182:	b118      	cbz	r0, 800618c <__swsetup_r+0x14>
 8006184:	6a03      	ldr	r3, [r0, #32]
 8006186:	b90b      	cbnz	r3, 800618c <__swsetup_r+0x14>
 8006188:	f7ff f832 	bl	80051f0 <__sinit>
 800618c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006190:	0719      	lsls	r1, r3, #28
 8006192:	d422      	bmi.n	80061da <__swsetup_r+0x62>
 8006194:	06da      	lsls	r2, r3, #27
 8006196:	d407      	bmi.n	80061a8 <__swsetup_r+0x30>
 8006198:	2209      	movs	r2, #9
 800619a:	602a      	str	r2, [r5, #0]
 800619c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061a6:	e033      	b.n	8006210 <__swsetup_r+0x98>
 80061a8:	0758      	lsls	r0, r3, #29
 80061aa:	d512      	bpl.n	80061d2 <__swsetup_r+0x5a>
 80061ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061ae:	b141      	cbz	r1, 80061c2 <__swsetup_r+0x4a>
 80061b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061b4:	4299      	cmp	r1, r3
 80061b6:	d002      	beq.n	80061be <__swsetup_r+0x46>
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7ff f94f 	bl	800545c <_free_r>
 80061be:	2300      	movs	r3, #0
 80061c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	2300      	movs	r3, #0
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	f043 0308 	orr.w	r3, r3, #8
 80061d8:	81a3      	strh	r3, [r4, #12]
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	b94b      	cbnz	r3, 80061f2 <__swsetup_r+0x7a>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e8:	d003      	beq.n	80061f2 <__swsetup_r+0x7a>
 80061ea:	4621      	mov	r1, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 f88b 	bl	8006308 <__smakebuf_r>
 80061f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f6:	f013 0201 	ands.w	r2, r3, #1
 80061fa:	d00a      	beq.n	8006212 <__swsetup_r+0x9a>
 80061fc:	2200      	movs	r2, #0
 80061fe:	60a2      	str	r2, [r4, #8]
 8006200:	6962      	ldr	r2, [r4, #20]
 8006202:	4252      	negs	r2, r2
 8006204:	61a2      	str	r2, [r4, #24]
 8006206:	6922      	ldr	r2, [r4, #16]
 8006208:	b942      	cbnz	r2, 800621c <__swsetup_r+0xa4>
 800620a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800620e:	d1c5      	bne.n	800619c <__swsetup_r+0x24>
 8006210:	bd38      	pop	{r3, r4, r5, pc}
 8006212:	0799      	lsls	r1, r3, #30
 8006214:	bf58      	it	pl
 8006216:	6962      	ldrpl	r2, [r4, #20]
 8006218:	60a2      	str	r2, [r4, #8]
 800621a:	e7f4      	b.n	8006206 <__swsetup_r+0x8e>
 800621c:	2000      	movs	r0, #0
 800621e:	e7f7      	b.n	8006210 <__swsetup_r+0x98>
 8006220:	200000b8 	.word	0x200000b8

08006224 <_raise_r>:
 8006224:	291f      	cmp	r1, #31
 8006226:	b538      	push	{r3, r4, r5, lr}
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	d904      	bls.n	8006238 <_raise_r+0x14>
 800622e:	2316      	movs	r3, #22
 8006230:	6003      	str	r3, [r0, #0]
 8006232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800623a:	b112      	cbz	r2, 8006242 <_raise_r+0x1e>
 800623c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006240:	b94b      	cbnz	r3, 8006256 <_raise_r+0x32>
 8006242:	4628      	mov	r0, r5
 8006244:	f000 f830 	bl	80062a8 <_getpid_r>
 8006248:	4622      	mov	r2, r4
 800624a:	4601      	mov	r1, r0
 800624c:	4628      	mov	r0, r5
 800624e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006252:	f000 b817 	b.w	8006284 <_kill_r>
 8006256:	2b01      	cmp	r3, #1
 8006258:	d00a      	beq.n	8006270 <_raise_r+0x4c>
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	d103      	bne.n	8006266 <_raise_r+0x42>
 800625e:	2316      	movs	r3, #22
 8006260:	6003      	str	r3, [r0, #0]
 8006262:	2001      	movs	r0, #1
 8006264:	e7e7      	b.n	8006236 <_raise_r+0x12>
 8006266:	2100      	movs	r1, #0
 8006268:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800626c:	4620      	mov	r0, r4
 800626e:	4798      	blx	r3
 8006270:	2000      	movs	r0, #0
 8006272:	e7e0      	b.n	8006236 <_raise_r+0x12>

08006274 <raise>:
 8006274:	4b02      	ldr	r3, [pc, #8]	@ (8006280 <raise+0xc>)
 8006276:	4601      	mov	r1, r0
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	f7ff bfd3 	b.w	8006224 <_raise_r>
 800627e:	bf00      	nop
 8006280:	200000b8 	.word	0x200000b8

08006284 <_kill_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d07      	ldr	r5, [pc, #28]	@ (80062a4 <_kill_r+0x20>)
 8006288:	2300      	movs	r3, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	602b      	str	r3, [r5, #0]
 8006292:	f7fa fce9 	bl	8000c68 <_kill>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d102      	bne.n	80062a0 <_kill_r+0x1c>
 800629a:	682b      	ldr	r3, [r5, #0]
 800629c:	b103      	cbz	r3, 80062a0 <_kill_r+0x1c>
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	bd38      	pop	{r3, r4, r5, pc}
 80062a2:	bf00      	nop
 80062a4:	20000418 	.word	0x20000418

080062a8 <_getpid_r>:
 80062a8:	f7fa bcd6 	b.w	8000c58 <_getpid>

080062ac <_malloc_usable_size_r>:
 80062ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b0:	1f18      	subs	r0, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bfbc      	itt	lt
 80062b6:	580b      	ldrlt	r3, [r1, r0]
 80062b8:	18c0      	addlt	r0, r0, r3
 80062ba:	4770      	bx	lr

080062bc <__swhatbuf_r>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	460c      	mov	r4, r1
 80062c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	b096      	sub	sp, #88	@ 0x58
 80062c8:	4615      	mov	r5, r2
 80062ca:	461e      	mov	r6, r3
 80062cc:	da0d      	bge.n	80062ea <__swhatbuf_r+0x2e>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062d4:	f04f 0100 	mov.w	r1, #0
 80062d8:	bf14      	ite	ne
 80062da:	2340      	movne	r3, #64	@ 0x40
 80062dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062e0:	2000      	movs	r0, #0
 80062e2:	6031      	str	r1, [r6, #0]
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	b016      	add	sp, #88	@ 0x58
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	466a      	mov	r2, sp
 80062ec:	f000 f848 	bl	8006380 <_fstat_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	dbec      	blt.n	80062ce <__swhatbuf_r+0x12>
 80062f4:	9901      	ldr	r1, [sp, #4]
 80062f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062fe:	4259      	negs	r1, r3
 8006300:	4159      	adcs	r1, r3
 8006302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006306:	e7eb      	b.n	80062e0 <__swhatbuf_r+0x24>

08006308 <__smakebuf_r>:
 8006308:	898b      	ldrh	r3, [r1, #12]
 800630a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630c:	079d      	lsls	r5, r3, #30
 800630e:	4606      	mov	r6, r0
 8006310:	460c      	mov	r4, r1
 8006312:	d507      	bpl.n	8006324 <__smakebuf_r+0x1c>
 8006314:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	2301      	movs	r3, #1
 800631e:	6163      	str	r3, [r4, #20]
 8006320:	b003      	add	sp, #12
 8006322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006324:	ab01      	add	r3, sp, #4
 8006326:	466a      	mov	r2, sp
 8006328:	f7ff ffc8 	bl	80062bc <__swhatbuf_r>
 800632c:	9f00      	ldr	r7, [sp, #0]
 800632e:	4605      	mov	r5, r0
 8006330:	4639      	mov	r1, r7
 8006332:	4630      	mov	r0, r6
 8006334:	f7ff f906 	bl	8005544 <_malloc_r>
 8006338:	b948      	cbnz	r0, 800634e <__smakebuf_r+0x46>
 800633a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633e:	059a      	lsls	r2, r3, #22
 8006340:	d4ee      	bmi.n	8006320 <__smakebuf_r+0x18>
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	f043 0302 	orr.w	r3, r3, #2
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	e7e2      	b.n	8006314 <__smakebuf_r+0xc>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	6020      	str	r0, [r4, #0]
 8006352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	9b01      	ldr	r3, [sp, #4]
 800635a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800635e:	b15b      	cbz	r3, 8006378 <__smakebuf_r+0x70>
 8006360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006364:	4630      	mov	r0, r6
 8006366:	f000 f81d 	bl	80063a4 <_isatty_r>
 800636a:	b128      	cbz	r0, 8006378 <__smakebuf_r+0x70>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	f043 0301 	orr.w	r3, r3, #1
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	431d      	orrs	r5, r3
 800637c:	81a5      	strh	r5, [r4, #12]
 800637e:	e7cf      	b.n	8006320 <__smakebuf_r+0x18>

08006380 <_fstat_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	@ (80063a0 <_fstat_r+0x20>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	602b      	str	r3, [r5, #0]
 800638e:	f7fa fccb 	bl	8000d28 <_fstat>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d102      	bne.n	800639c <_fstat_r+0x1c>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	b103      	cbz	r3, 800639c <_fstat_r+0x1c>
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	bf00      	nop
 80063a0:	20000418 	.word	0x20000418

080063a4 <_isatty_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	@ (80063c0 <_isatty_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fa fcca 	bl	8000d48 <_isatty>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_isatty_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_isatty_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	20000418 	.word	0x20000418

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
