
NucleoShield Arcade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08005bcc  08005bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e20  08005e20  000070f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e20  08005e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e28  08005e28  000070f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e28  08005e28  00006e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08005e30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200000f8  08005f28  000070f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08005f28  00007564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce5d  00000000  00000000  00007128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d6  00000000  00000000  00013f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00016960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000961  00000000  00000000  000175a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c4b  00000000  00000000  00017f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c72  00000000  00000000  0003bb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce98d  00000000  00000000  0004d7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  0011c198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0011fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bb4 	.word	0x08005bb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	08005bb4 	.word	0x08005bb4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 ffbd 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f819 	bl	800062c <SystemClock_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e00c      	b.n	800061a <main+0x2e>
	  	debounceFSM_update(&buttons[i]);
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <main+0x3c>)
 800060c:	4413      	add	r3, r2
 800060e:	4618      	mov	r0, r3
 8000610:	f000 feea 	bl	80013e8 <debounceFSM_update>
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	3301      	adds	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d9ef      	bls.n	8000600 <main+0x14>
	  }

	  arcadeFSM();
 8000620:	f003 fdfa 	bl	8004218 <arcadeFSM>
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8000624:	e7e9      	b.n	80005fa <main+0xe>
 8000626:	bf00      	nop
 8000628:	20000004 	.word	0x20000004

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	@ 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fa6b 	bl	8004b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <SystemClock_Config+0xd4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a29      	ldr	r2, [pc, #164]	@ (8000700 <SystemClock_Config+0xd4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <SystemClock_Config+0xd4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a22      	ldr	r2, [pc, #136]	@ (8000704 <SystemClock_Config+0xd8>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 ff46 	bl	800354c <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006c6:	f000 faab 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fbfa 	bl	8002ee0 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006f2:	f000 fa95 	bl	8000c20 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000716:	4a0f      	ldr	r2, [pc, #60]	@ (8000754 <HAL_MspInit+0x4c>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071c:	6453      	str	r3, [r2, #68]	@ 0x44
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000732:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	@ 0x40
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000746:	2007      	movs	r0, #7
 8000748:	f001 f878 	bl	800183c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_I2C_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000796:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <HAL_I2C_MspInit+0x8c>)
 80007b4:	f001 f8a6 	bl	8001904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a2c      	ldr	r2, [pc, #176]	@ (80008b8 <HAL_SPI_MspInit+0xd0>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d152      	bne.n	80008b0 <HAL_SPI_MspInit+0xc8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000818:	6413      	str	r3, [r2, #64]	@ 0x40
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a23      	ldr	r2, [pc, #140]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_SPI_MspInit+0xd4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800086e:	2307      	movs	r3, #7
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <HAL_SPI_MspInit+0xd8>)
 800087a:	f001 f843 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000890:	2305      	movs	r3, #5
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480a      	ldr	r0, [pc, #40]	@ (80008c4 <HAL_SPI_MspInit+0xdc>)
 800089c:	f001 f832 	bl	8001904 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2024      	movs	r0, #36	@ 0x24
 80008a6:	f000 ffd4 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008aa:	2024      	movs	r0, #36	@ 0x24
 80008ac:	f000 ffed 	bl	800188a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	@ 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40003800 	.word	0x40003800
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020400 	.word	0x40020400

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 fe79 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <SPI2_IRQHandler+0x10>)
 800092e:	f003 fa79 	bl	8003e24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000118 	.word	0x20000118

0800093c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return 1;
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_kill>:

int _kill(int pid, int sig)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000956:	f004 f92d 	bl	8004bb4 <__errno>
 800095a:	4603      	mov	r3, r0
 800095c:	2216      	movs	r2, #22
 800095e:	601a      	str	r2, [r3, #0]
  return -1;
 8000960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_exit>:

void _exit (int status)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000974:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffe7 	bl	800094c <_kill>
  while (1) {}    /* Make sure we hang here */
 800097e:	bf00      	nop
 8000980:	e7fd      	b.n	800097e <_exit+0x12>

08000982 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e00a      	b.n	80009aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000994:	f3af 8000 	nop.w
 8000998:	4601      	mov	r1, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	60ba      	str	r2, [r7, #8]
 80009a0:	b2ca      	uxtb	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf0      	blt.n	8000994 <_read+0x12>
  }

  return len;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e009      	b.n	80009e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	60ba      	str	r2, [r7, #8]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3301      	adds	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	dbf1      	blt.n	80009ce <_write+0x12>
  }
  return len;
 80009ea:	687b      	ldr	r3, [r7, #4]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_close>:

int _close(int file)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_isatty>:

int _isatty(int file)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f004 f892 	bl	8004bb4 <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	20000114 	.word	0x20000114
 8000ac4:	20000568 	.word	0x20000568

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000af0:	f7ff ffea 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	@ (8000b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f004 f851 	bl	8004bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fd65 	bl	80005ec <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8000b30:	08005e30 	.word	0x08005e30
  ldr r2, =_sbss
 8000b34:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8000b38:	20000564 	.word	0x20000564

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>

08000b3e <saveScore>:
#include "At24c256.h"

// saveScore guarda el puntaje
void saveScore(uint16_t score) {
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	80fb      	strh	r3, [r7, #6]
    EEPROM_Write(score);
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f80c 	bl	8000b68 <EEPROM_Write>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <loadScore>:
// saveScore levanta el valor guardado en la memoria
uint16_t loadScore(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
    return EEPROM_Read();
 8000b5c:	f000 f838 	bl	8000bd0 <EEPROM_Read>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <EEPROM_Write>:
#include "boardConfig.h"

extern I2C_HandleTypeDef hi2c1;

// EEPROM_Write escribe al modulo At24c256
void EEPROM_Write(uint16_t num) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    data[0] = (uint8_t)(num >> 8);   // byte alto
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	753b      	strb	r3, [r7, #20]
    data[1] = (uint8_t)(num & 0xFF); // byte bajo
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	757b      	strb	r3, [r7, #21]

    uint8_t addr[2];
    addr[0] = (uint8_t)(SCORE_ADDR >> 8);
 8000b82:	2300      	movs	r3, #0
 8000b84:	743b      	strb	r3, [r7, #16]
    addr[1] = (uint8_t)(SCORE_ADDR & 0xFF);
 8000b86:	2300      	movs	r3, #0
 8000b88:	747b      	strb	r3, [r7, #17]

    uint8_t tx[4] = {addr[0], addr[1], data[0], data[1]};
 8000b8a:	7c3b      	ldrb	r3, [r7, #16]
 8000b8c:	733b      	strb	r3, [r7, #12]
 8000b8e:	7c7b      	ldrb	r3, [r7, #17]
 8000b90:	737b      	strb	r3, [r7, #13]
 8000b92:	7d3b      	ldrb	r3, [r7, #20]
 8000b94:	73bb      	strb	r3, [r7, #14]
 8000b96:	7d7b      	ldrb	r3, [r7, #21]
 8000b98:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c1, AT24C256_ADDR << 1, tx, 4, HAL_MAX_DELAY);
 8000b9a:	f107 020c 	add.w	r2, r7, #12
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	21a0      	movs	r1, #160	@ 0xa0
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <EEPROM_Write+0x64>)
 8000baa:	f001 f9b5 	bl	8001f18 <HAL_I2C_Master_Transmit>

    // Esperar hasta que termine de escribir
    while (HAL_I2C_IsDeviceReady(&hi2c1, AT24C256_ADDR << 1, 1, 100) != HAL_OK);
 8000bae:	bf00      	nop
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	21a0      	movs	r1, #160	@ 0xa0
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <EEPROM_Write+0x64>)
 8000bb8:	f001 fcde 	bl	8002578 <HAL_I2C_IsDeviceReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f6      	bne.n	8000bb0 <EEPROM_Write+0x48>
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000170 	.word	0x20000170

08000bd0 <EEPROM_Read>:

//EEPROM_Read lee del modulo At24c256
uint16_t EEPROM_Read(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af02      	add	r7, sp, #8
    uint8_t addr[2];
    uint8_t data[2];
    addr[0] = (uint8_t)(SCORE_ADDR >> 8);
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	713b      	strb	r3, [r7, #4]
    addr[1] = (uint8_t)(SCORE_ADDR & 0xFF);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&hi2c1, AT24C256_ADDR << 1, addr, 2, HAL_MAX_DELAY);
 8000bde:	1d3a      	adds	r2, r7, #4
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2302      	movs	r3, #2
 8000be8:	21a0      	movs	r1, #160	@ 0xa0
 8000bea:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <EEPROM_Read+0x4c>)
 8000bec:	f001 f994 	bl	8001f18 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, AT24C256_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8000bf0:	463a      	mov	r2, r7
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	21a0      	movs	r1, #160	@ 0xa0
 8000bfc:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <EEPROM_Read+0x4c>)
 8000bfe:	f001 fa89 	bl	8002114 <HAL_I2C_Master_Receive>

    return ((uint16_t)data[0] << 8) | data[1];
 8000c02:	783b      	ldrb	r3, [r7, #0]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	787b      	ldrb	r3, [r7, #1]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	b29b      	uxth	r3, r3
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000170 	.word	0x20000170

08000c20 <Error_Handler>:
#include "boardConfig.h"


void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x4>

08000c28 <board_gpio_init>:
{
}
}

// Configuracion de los puertos GPIO de la placa NUCLEO
void board_gpio_init(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b3d      	ldr	r3, [pc, #244]	@ (8000d38 <board_gpio_init+0x110>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a3c      	ldr	r2, [pc, #240]	@ (8000d38 <board_gpio_init+0x110>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d38 <board_gpio_init+0x110>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b36      	ldr	r3, [pc, #216]	@ (8000d38 <board_gpio_init+0x110>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a35      	ldr	r2, [pc, #212]	@ (8000d38 <board_gpio_init+0x110>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <board_gpio_init+0x110>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d38 <board_gpio_init+0x110>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <board_gpio_init+0x110>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <board_gpio_init+0x110>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <board_gpio_init+0x110>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <board_gpio_init+0x110>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <board_gpio_init+0x110>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb4:	4821      	ldr	r0, [pc, #132]	@ (8000d3c <board_gpio_init+0x114>)
 8000cb6:	f000 ffd1 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481a      	ldr	r0, [pc, #104]	@ (8000d3c <board_gpio_init+0x114>)
 8000cd4:	f000 fe16 	bl	8001904 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cde:	4817      	ldr	r0, [pc, #92]	@ (8000d3c <board_gpio_init+0x114>)
 8000ce0:	f000 ffbc 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4811      	ldr	r0, [pc, #68]	@ (8000d3c <board_gpio_init+0x114>)
 8000cf8:	f000 fe04 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cfc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480b      	ldr	r0, [pc, #44]	@ (8000d40 <board_gpio_init+0x118>)
 8000d12:	f000 fdf7 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d16:	2370      	movs	r3, #112	@ 0x70
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <board_gpio_init+0x11c>)
 8000d2a:	f000 fdeb 	bl	8001904 <HAL_GPIO_Init>

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40020400 	.word	0x40020400

08000d48 <SPI2_Init>:

// Configuracion del SPI en la placa NUCLEO

SPI_HandleTypeDef hspi2;
void SPI2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <SPI2_Init+0x64>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <SPI2_Init+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <SPI2_Init+0x64>)
 8000d54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <SPI2_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <SPI2_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <SPI2_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <SPI2_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <SPI2_Init+0x64>)
 8000d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <SPI2_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <SPI2_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <SPI2_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <SPI2_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <SPI2_Init+0x64>)
 8000d94:	220a      	movs	r2, #10
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <SPI2_Init+0x64>)
 8000d9a:	f002 fe75 	bl	8003a88 <HAL_SPI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SPI2_Init+0x60>
  {
    Error_Handler();
 8000da4:	f7ff ff3c 	bl	8000c20 <Error_Handler>
  }
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000118 	.word	0x20000118
 8000db0:	40003800 	.word	0x40003800

08000db4 <I2C1_Init>:

// Configuracion del I2C en la placa NUCLEO

I2C_HandleTypeDef hi2c1;
void I2C1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <I2C1_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <I2C1_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <I2C1_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <I2C1_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <I2C1_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <I2C1_Init+0x50>)
 8000df2:	f000 ff4d 	bl	8001c90 <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f7ff ff10 	bl	8000c20 <Error_Handler>
  }


}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000170 	.word	0x20000170
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	000186a0 	.word	0x000186a0

08000e10 <MAX7219_InitAll>:

static uint8_t frameBuffer16[DISPLAY_ROWS][DISPLAY_COLS/8]; // representacion del display en RAM. 16 filas y dos columnas de 8 bits cada una (16 columnas)

// Se inicializan los 4 displays
void MAX7219_InitAll(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af02      	add	r7, sp, #8
    MAX7219_WriteRowAll(MAX7219_SHUTDOWN, 0x01, 0x01, 0x01, 0x01); // 0x0C -> Shutdown | 0x01 -> Operacion Normal
 8000e16:	2301      	movs	r3, #1
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2101      	movs	r1, #1
 8000e20:	200c      	movs	r0, #12
 8000e22:	f000 fa65 	bl	80012f0 <MAX7219_WriteRowAll>
    MAX7219_WriteRowAll(MAX7219_SCAN, 0x07, 0x07, 0x07, 0x07); // 0x0B -> Escaneo del Display (filas) | 0x07 -> Habilita las 8 filas
 8000e26:	2307      	movs	r3, #7
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	2107      	movs	r1, #7
 8000e30:	200b      	movs	r0, #11
 8000e32:	f000 fa5d 	bl	80012f0 <MAX7219_WriteRowAll>
    MAX7219_WriteRowAll(MAX7219_MODE, 0x00, 0x00, 0x00, 0x00); // 0x09 -> Modo del Display (Matriz, 7 segmentos) | 0x00 -> Sin Decode (Matriz)
 8000e36:	2300      	movs	r3, #0
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2009      	movs	r0, #9
 8000e42:	f000 fa55 	bl	80012f0 <MAX7219_WriteRowAll>
    MAX7219_WriteRowAll(MAX7219_BRIGHTNESS, 0x02, 0x02, 0x02, 0x02); // 0x0A -> Brillo del Display | 0x02 -> Configurable de 0 a 15 (PWM)
 8000e46:	2302      	movs	r3, #2
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	2102      	movs	r1, #2
 8000e50:	200a      	movs	r0, #10
 8000e52:	f000 fa4d 	bl	80012f0 <MAX7219_WriteRowAll>
    MAX7219_WriteRowAll(MAX7219_TEST, 0x00, 0x00, 0x00, 0x00); // 0x0F -> Test del Display | 0x00 -> Test Apagado
 8000e56:	2300      	movs	r3, #0
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	200f      	movs	r0, #15
 8000e62:	f000 fa45 	bl	80012f0 <MAX7219_WriteRowAll>

    // Limpia la pantalla
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e00a      	b.n	8000e82 <MAX7219_InitAll+0x72>
        MAX7219_WriteRowAll(row, 0xFF, 0xFF, 0xFF, 0xFF);
 8000e6c:	79f8      	ldrb	r0, [r7, #7]
 8000e6e:	23ff      	movs	r3, #255	@ 0xff
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	23ff      	movs	r3, #255	@ 0xff
 8000e74:	22ff      	movs	r2, #255	@ 0xff
 8000e76:	21ff      	movs	r1, #255	@ 0xff
 8000e78:	f000 fa3a 	bl	80012f0 <MAX7219_WriteRowAll>
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d9f1      	bls.n	8000e6c <MAX7219_InitAll+0x5c>
    }

    // Limpia el frameBuffer
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71bb      	strb	r3, [r7, #6]
 8000e8c:	e00d      	b.n	8000eaa <MAX7219_InitAll+0x9a>
    	frameBuffer16[row][0] = 0;
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <MAX7219_InitAll+0xac>)
 8000e92:	2100      	movs	r1, #0
 8000e94:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    	frameBuffer16[row][1] = 0;
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <MAX7219_InitAll+0xac>)
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	705a      	strb	r2, [r3, #1]
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	71bb      	strb	r3, [r7, #6]
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d9ee      	bls.n	8000e8e <MAX7219_InitAll+0x7e>
    }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001c4 	.word	0x200001c4

08000ec0 <setPixel16>:


// enciende o apaga un pixel de la matriz en la posicion (x,y)
void setPixel16(uint8_t x, uint8_t y, bool on) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	71bb      	strb	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	717b      	strb	r3, [r7, #5]
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d840      	bhi.n	8000f5a <setPixel16+0x9a>
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d83d      	bhi.n	8000f5a <setPixel16+0x9a>

    uint8_t byteIndex = x / 8;       // 0 o 1
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	73fb      	strb	r3, [r7, #15]
    uint8_t bitIndex  = x % 8;       // 0 a 7
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	73bb      	strb	r3, [r7, #14]

    if (on)
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d018      	beq.n	8000f24 <setPixel16+0x64>
        frameBuffer16[y][byteIndex] |=  (1 << bitIndex);
 8000ef2:	79ba      	ldrb	r2, [r7, #6]
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	491c      	ldr	r1, [pc, #112]	@ (8000f68 <setPixel16+0xa8>)
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	440a      	add	r2, r1
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b259      	sxtb	r1, r3
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b2c8      	uxtb	r0, r1
 8000f16:	4914      	ldr	r1, [pc, #80]	@ (8000f68 <setPixel16+0xa8>)
 8000f18:	0052      	lsls	r2, r2, #1
 8000f1a:	440a      	add	r2, r1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4602      	mov	r2, r0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e01b      	b.n	8000f5c <setPixel16+0x9c>
    else
        frameBuffer16[y][byteIndex] &= ~(1 << bitIndex);
 8000f24:	79ba      	ldrb	r2, [r7, #6]
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	490f      	ldr	r1, [pc, #60]	@ (8000f68 <setPixel16+0xa8>)
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	440a      	add	r2, r1
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	4013      	ands	r3, r2
 8000f44:	b259      	sxtb	r1, r3
 8000f46:	79ba      	ldrb	r2, [r7, #6]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b2c8      	uxtb	r0, r1
 8000f4c:	4906      	ldr	r1, [pc, #24]	@ (8000f68 <setPixel16+0xa8>)
 8000f4e:	0052      	lsls	r2, r2, #1
 8000f50:	440a      	add	r2, r1
 8000f52:	4413      	add	r3, r2
 8000f54:	4602      	mov	r2, r0
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e000      	b.n	8000f5c <setPixel16+0x9c>
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 8000f5a:	bf00      	nop
}
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200001c4 	.word	0x200001c4

08000f6c <reverseBits>:

// funcion auxiliar para "espejar" un byte.
static uint8_t reverseBits(uint8_t b) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	b25a      	sxtb	r2, r3
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	109b      	asrs	r3, r3, #2
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	105b      	asrs	r3, r3, #1
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	71fb      	strb	r3, [r7, #7]
    return b;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <updateDisplay16>:

// actualiza el display con lo que hay en el frameBuffer. Considera que en mi HW, los dos displays de abajo estan boca abajo e invertidos
void updateDisplay16(void)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af02      	add	r7, sp, #8
    for (uint8_t y = 0; y < 8; y++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e02f      	b.n	8001048 <updateDisplay16+0x6c>
        uint8_t TL = frameBuffer16[y][1];
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <updateDisplay16+0x7c>)
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	71bb      	strb	r3, [r7, #6]
        uint8_t TR = frameBuffer16[y][0];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <updateDisplay16+0x7c>)
 8000ff8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ffc:	717b      	strb	r3, [r7, #5]
        uint8_t BL = reverseBits(frameBuffer16[15-y][1]);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f1c3 030f 	rsb	r3, r3, #15
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <updateDisplay16+0x7c>)
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffad 	bl	8000f6c <reverseBits>
 8001012:	4603      	mov	r3, r0
 8001014:	713b      	strb	r3, [r7, #4]
        uint8_t BR = reverseBits(frameBuffer16[15-y][0]);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f1c3 030f 	rsb	r3, r3, #15
 800101c:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <updateDisplay16+0x7c>)
 800101e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ffa2 	bl	8000f6c <reverseBits>
 8001028:	4603      	mov	r3, r0
 800102a:	70fb      	strb	r3, [r7, #3]

        MAX7219_WriteRowAll(y + 1, TR, TL, BL, BR); // y+1 por que los registros del MAX para las filas empiezan en el 1
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3301      	adds	r3, #1
 8001030:	b2d8      	uxtb	r0, r3
 8001032:	793c      	ldrb	r4, [r7, #4]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	7979      	ldrb	r1, [r7, #5]
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4623      	mov	r3, r4
 800103e:	f000 f957 	bl	80012f0 <MAX7219_WriteRowAll>
    for (uint8_t y = 0; y < 8; y++) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	3301      	adds	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9cc      	bls.n	8000fe8 <updateDisplay16+0xc>
    }
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	200001c4 	.word	0x200001c4

0800105c <findChar>:


// funcion auxiliar que busca un caracter en la lista de caracteres y devuelve un puntero a ese caracter
static const Chars5x7* findChar(char character){
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]

	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e015      	b.n	8001098 <findChar+0x3c>
		if(font5x7[k].ch == character){
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	490f      	ldr	r1, [pc, #60]	@ (80010ac <findChar+0x50>)
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	440b      	add	r3, r1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	429a      	cmp	r2, r3
 8001080:	d107      	bne.n	8001092 <findChar+0x36>
			return &font5x7[k];
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <findChar+0x50>)
 800108e:	4413      	add	r3, r2
 8001090:	e006      	b.n	80010a0 <findChar+0x44>
	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b27      	cmp	r3, #39	@ 0x27
 800109c:	d9e6      	bls.n	800106c <findChar+0x10>
		}
	}
	return &font5x7[0];
 800109e:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <findChar+0x50>)
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	08005c50 	.word	0x08005c50

080010b0 <drawChar16>:

// Dibuja un caracter con la esquina superior izquierda ubicada en (x,y)
static void drawChar16(uint8_t x, uint8_t y, char character) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	460b      	mov	r3, r1
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	4613      	mov	r3, r2
 80010c0:	717b      	strb	r3, [r7, #5]

	const Chars5x7* symbol = findChar(character);
 80010c2:	797b      	ldrb	r3, [r7, #5]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffc9 	bl	800105c <findChar>
 80010ca:	6138      	str	r0, [r7, #16]

    for (uint8_t column = 0; column < 5; column++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	75fb      	strb	r3, [r7, #23]
 80010d0:	e029      	b.n	8001126 <drawChar16+0x76>
        uint8_t columnBits = symbol->col[column];
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4413      	add	r3, r2
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	73fb      	strb	r3, [r7, #15]

        for (uint8_t row = 0; row < 7; row++) {
 80010dc:	2300      	movs	r3, #0
 80010de:	75bb      	strb	r3, [r7, #22]
 80010e0:	e01b      	b.n	800111a <drawChar16+0x6a>
            bool on = columnBits & (1 << row);
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bf14      	ite	ne
 80010f2:	2301      	movne	r3, #1
 80010f4:	2300      	moveq	r3, #0
 80010f6:	73bb      	strb	r3, [r7, #14]
            setPixel16(x + (4- column), y + row, on);
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	3304      	adds	r3, #4
 8001102:	b2d8      	uxtb	r0, r3
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	7dbb      	ldrb	r3, [r7, #22]
 8001108:	4413      	add	r3, r2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	7bba      	ldrb	r2, [r7, #14]
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fed6 	bl	8000ec0 <setPixel16>
        for (uint8_t row = 0; row < 7; row++) {
 8001114:	7dbb      	ldrb	r3, [r7, #22]
 8001116:	3301      	adds	r3, #1
 8001118:	75bb      	strb	r3, [r7, #22]
 800111a:	7dbb      	ldrb	r3, [r7, #22]
 800111c:	2b06      	cmp	r3, #6
 800111e:	d9e0      	bls.n	80010e2 <drawChar16+0x32>
    for (uint8_t column = 0; column < 5; column++) {
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	3301      	adds	r3, #1
 8001124:	75fb      	strb	r3, [r7, #23]
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d9d2      	bls.n	80010d2 <drawChar16+0x22>
        }
    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <fill16>:

// fill16 llena el buffer con 1 o 0
void fill16(bool on)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
    memset(frameBuffer16, on ? 0xFF : 0x00, sizeof(frameBuffer16));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <fill16+0x14>
 8001148:	23ff      	movs	r3, #255	@ 0xff
 800114a:	e000      	b.n	800114e <fill16+0x16>
 800114c:	2300      	movs	r3, #0
 800114e:	2220      	movs	r2, #32
 8001150:	4619      	mov	r1, r3
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <fill16+0x28>)
 8001154:	f003 fcdf 	bl	8004b16 <memset>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001c4 	.word	0x200001c4

08001164 <scrollTextDual>:

//scrollTextDual scrolea el texto en pantalla. Escribe hasta dos lineas de texto, una en cada fila de displays.
void scrollTextDual(uint8_t y1, char *text1, uint8_t y2, char *text2, bool reset) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	4613      	mov	r3, r2
 8001174:	73bb      	strb	r3, [r7, #14]

    static int16_t offset = 0;     // posición inicial (fuera de la pantalla)
    static delay_t scrollDelay;
    static bool initialized = false;

    if (!initialized) {
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <scrollTextDual+0x150>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <scrollTextDual+0x30>
        delayInit(&scrollDelay, TEXTSCROLLSPEED);  // se inicializa el delay que controla la actualizacion del texto en la pantalla
 8001184:	2350      	movs	r3, #80	@ 0x50
 8001186:	4619      	mov	r1, r3
 8001188:	484b      	ldr	r0, [pc, #300]	@ (80012b8 <scrollTextDual+0x154>)
 800118a:	f000 f8e3 	bl	8001354 <delayInit>
        initialized = true;
 800118e:	4b49      	ldr	r3, [pc, #292]	@ (80012b4 <scrollTextDual+0x150>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
    }

    if (delayRead(&scrollDelay)) {
 8001194:	4848      	ldr	r0, [pc, #288]	@ (80012b8 <scrollTextDual+0x154>)
 8001196:	f000 f8ee 	bl	8001376 <delayRead>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 8085 	beq.w	80012ac <scrollTextDual+0x148>
        fill16(0);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ffc8 	bl	8001138 <fill16>

        // dibuja la primera linea de texto
        uint16_t len1 = strlen(text1);
 80011a8:	68b8      	ldr	r0, [r7, #8]
 80011aa:	f7ff f831 	bl	8000210 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	837b      	strh	r3, [r7, #26]
        for (uint16_t i = 0; i < len1; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	83fb      	strh	r3, [r7, #30]
 80011b6:	e019      	b.n	80011ec <scrollTextDual+0x88>
            int16_t x = offset - i * 6;
 80011b8:	8bfb      	ldrh	r3, [r7, #30]
 80011ba:	461a      	mov	r2, r3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b3d      	ldr	r3, [pc, #244]	@ (80012bc <scrollTextDual+0x158>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	827b      	strh	r3, [r7, #18]
            drawChar16(x, y1, text1[i]);
 80011d2:	8a7b      	ldrh	r3, [r7, #18]
 80011d4:	b2d8      	uxtb	r0, r3
 80011d6:	8bfb      	ldrh	r3, [r7, #30]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	4413      	add	r3, r2
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff ff65 	bl	80010b0 <drawChar16>
        for (uint16_t i = 0; i < len1; i++) {
 80011e6:	8bfb      	ldrh	r3, [r7, #30]
 80011e8:	3301      	adds	r3, #1
 80011ea:	83fb      	strh	r3, [r7, #30]
 80011ec:	8bfa      	ldrh	r2, [r7, #30]
 80011ee:	8b7b      	ldrh	r3, [r7, #26]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3e1      	bcc.n	80011b8 <scrollTextDual+0x54>
        }

        // dibuja la segunda linea de texto
        uint16_t len2 = strlen(text2);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff f80b 	bl	8000210 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	833b      	strh	r3, [r7, #24]
        for (uint16_t i = 0; i < len2; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	83bb      	strh	r3, [r7, #28]
 8001202:	e019      	b.n	8001238 <scrollTextDual+0xd4>
            int16_t x = offset - i * 6;
 8001204:	8bbb      	ldrh	r3, [r7, #28]
 8001206:	461a      	mov	r2, r3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <scrollTextDual+0x158>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4413      	add	r3, r2
 800121a:	b29b      	uxth	r3, r3
 800121c:	82bb      	strh	r3, [r7, #20]
            drawChar16(x, y2, text2[i]);
 800121e:	8abb      	ldrh	r3, [r7, #20]
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	8bbb      	ldrh	r3, [r7, #28]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff ff3f 	bl	80010b0 <drawChar16>
        for (uint16_t i = 0; i < len2; i++) {
 8001232:	8bbb      	ldrh	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	83bb      	strh	r3, [r7, #28]
 8001238:	8bba      	ldrh	r2, [r7, #28]
 800123a:	8b3b      	ldrh	r3, [r7, #24]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3e1      	bcc.n	8001204 <scrollTextDual+0xa0>
        }

        updateDisplay16();
 8001240:	f7ff fecc 	bl	8000fdc <updateDisplay16>

        offset++;
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <scrollTextDual+0x158>)
 8001246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3301      	adds	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <scrollTextDual+0x158>)
 8001254:	801a      	strh	r2, [r3, #0]

        // reinicia el display cuando ya termino de pasar el texto
        uint16_t textWidth = (strlen(text1) > strlen(text2) ? strlen(text1) : strlen(text2)) * 6;
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f7fe ffda 	bl	8000210 <strlen>
 800125c:	4604      	mov	r4, r0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7fe ffd6 	bl	8000210 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	429c      	cmp	r4, r3
 8001268:	d90a      	bls.n	8001280 <scrollTextDual+0x11c>
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f7fe ffd0 	bl	8000210 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b29b      	uxth	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	0052      	lsls	r2, r2, #1
 8001278:	4413      	add	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	b29b      	uxth	r3, r3
 800127e:	e009      	b.n	8001294 <scrollTextDual+0x130>
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7fe ffc5 	bl	8000210 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29b      	uxth	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	0052      	lsls	r2, r2, #1
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	b29b      	uxth	r3, r3
 8001294:	82fb      	strh	r3, [r7, #22]
        if (offset > textWidth) offset = -16;
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <scrollTextDual+0x158>)
 8001298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129c:	461a      	mov	r2, r3
 800129e:	8afb      	ldrh	r3, [r7, #22]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dd03      	ble.n	80012ac <scrollTextDual+0x148>
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <scrollTextDual+0x158>)
 80012a6:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80012aa:	801a      	strh	r2, [r3, #0]
    }
}
 80012ac:	bf00      	nop
 80012ae:	3724      	adds	r7, #36	@ 0x24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	200001e4 	.word	0x200001e4
 80012b8:	200001e8 	.word	0x200001e8
 80012bc:	200001f4 	.word	0x200001f4

080012c0 <MAX7219_Select>:
#include "max7219_port_stm32.h"
#include "boardConfig.h"

// estas funciones controlan el CS
static void MAX7219_Select(void)   { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET); }
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ca:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <MAX7219_Select+0x14>)
 80012cc:	f000 fcc6 	bl	8001c5c <HAL_GPIO_WritePin>
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40020800 	.word	0x40020800

080012d8 <MAX7219_Deselect>:
static void MAX7219_Deselect(void) { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET); }
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e2:	4802      	ldr	r0, [pc, #8]	@ (80012ec <MAX7219_Deselect+0x14>)
 80012e4:	f000 fcba 	bl	8001c5c <HAL_GPIO_WritePin>
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40020800 	.word	0x40020800

080012f0 <MAX7219_WriteRowAll>:

// MAX7219_WriteRowAll envia la informacio de una fila (row, de 1 a 8) a los 4 MAX7219. El primer frame que se envia termina en el ultumo max
void MAX7219_WriteRowAll(uint8_t row, uint8_t TR, uint8_t TL, uint8_t BL, uint8_t BR)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4604      	mov	r4, r0
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4623      	mov	r3, r4
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	4603      	mov	r3, r0
 8001304:	71bb      	strb	r3, [r7, #6]
 8001306:	460b      	mov	r3, r1
 8001308:	717b      	strb	r3, [r7, #5]
 800130a:	4613      	mov	r3, r2
 800130c:	713b      	strb	r3, [r7, #4]
    uint8_t frame[8] = {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	723b      	strb	r3, [r7, #8]
 8001312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001316:	727b      	strb	r3, [r7, #9]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	72bb      	strb	r3, [r7, #10]
 800131c:	793b      	ldrb	r3, [r7, #4]
 800131e:	72fb      	strb	r3, [r7, #11]
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	733b      	strb	r3, [r7, #12]
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	737b      	strb	r3, [r7, #13]
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	73bb      	strb	r3, [r7, #14]
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	73fb      	strb	r3, [r7, #15]
        row, BL,   // Display 3
        row, TL,   // Display 2
        row, TR    // Display 1 (mas cercano al micro)
    };

    MAX7219_Select();
 8001330:	f7ff ffc6 	bl	80012c0 <MAX7219_Select>
    HAL_SPI_Transmit(&hspi2, frame, sizeof(frame), HAL_MAX_DELAY);
 8001334:	f107 0108 	add.w	r1, r7, #8
 8001338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800133c:	2208      	movs	r2, #8
 800133e:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MAX7219_WriteRowAll+0x60>)
 8001340:	f002 fc2b 	bl	8003b9a <HAL_SPI_Transmit>
    MAX7219_Deselect(); // fija "latchea" la informacion en los displays
 8001344:	f7ff ffc8 	bl	80012d8 <MAX7219_Deselect>
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	20000118 	.word	0x20000118

08001354 <delayInit>:

static bool_t delayIsRunning(delay_t * delay){
	return delay->running;
}

void delayInit(delay_t * delay, tick_t duration){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]

	delay->duration = duration;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	721a      	strb	r2, [r3, #8]

}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <delayRead>:

bool_t delayRead(delay_t * delay){
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]

	if (delay->running == false){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7a1b      	ldrb	r3, [r3, #8]
 8001382:	f083 0301 	eor.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <delayRead+0x26>
		delay->startTime = HAL_GetTick();
 800138c:	f000 f956 	bl	800163c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	721a      	strb	r2, [r3, #8]
	}

	if ((delay->running == true) && (HAL_GetTick() - delay->startTime > delay->duration)){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7a1b      	ldrb	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <delayRead+0x4c>
 80013a4:	f000 f94a 	bl	800163c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1ad2      	subs	r2, r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d904      	bls.n	80013c2 <delayRead+0x4c>

		delay->running = false;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	721a      	strb	r2, [r3, #8]
		return true; //si paso el tiempo devuelve "true"
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <delayRead+0x4e>

	}else{
		return false; //si aun no paso el tiempo devuelve "false"
 80013c2:	2300      	movs	r3, #0
	}
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <debounceFSM_init>:
		delay->duration = duration;
	}
}

// debounceFSM_init carga el estado inicial en BUTTON_UP
void debounceFSM_init(button_t * btn){
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	btn -> state = BUTTON_UP;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	719a      	strb	r2, [r3, #6]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <debounceFSM_update>:

// debounceFSM_update maneja los cambios de estado de los botones
void debounceFSM_update(button_t * btn){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

	bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin); // lee el estado del pin. 0 -> boton presionado ; 1 -> boton suelto
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	889b      	ldrh	r3, [r3, #4]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f000 fc16 	bl	8001c2c <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

	switch(btn -> state){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	799b      	ldrb	r3, [r3, #6]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d877      	bhi.n	8001504 <debounceFSM_update+0x11c>
 8001414:	a201      	add	r2, pc, #4	@ (adr r2, 800141c <debounceFSM_update+0x34>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800144f 	.word	0x0800144f
 8001424:	0800149d 	.word	0x0800149d
 8001428:	080014c3 	.word	0x080014c3
		case BUTTON_UP:

			if(!pin){
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	f083 0301 	eor.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d069      	beq.n	800150c <debounceFSM_update+0x124>
				btn -> state = BUTTON_FALLING;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	719a      	strb	r2, [r3, #6]
				delayInit(&btn->delay,debounceDelay);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3308      	adds	r3, #8
 8001442:	221e      	movs	r2, #30
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff84 	bl	8001354 <delayInit>
			}
			break;
 800144c:	e05e      	b.n	800150c <debounceFSM_update+0x124>

		case BUTTON_FALLING:

			if(delayRead(&btn->delay)==true){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3308      	adds	r3, #8
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff8f 	bl	8001376 <delayRead>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d058      	beq.n	8001510 <debounceFSM_update+0x128>
				bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	4619      	mov	r1, r3
 8001468:	4610      	mov	r0, r2
 800146a:	f000 fbdf 	bl	8001c2c <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	737b      	strb	r3, [r7, #13]
				if(!pin){										// si paso el tiempo y el boton continua apretado, se enciende el LED y cambia al estado BUTTON_DOWN
 800147a:	7b7b      	ldrb	r3, [r7, #13]
 800147c:	f083 0301 	eor.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <debounceFSM_update+0xac>
					btn->pressed = true; 						// buttonState se hace true cuando se confirma que el boton esta presionado
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	751a      	strb	r2, [r3, #20]
					btn -> state = BUTTON_DOWN;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	719a      	strb	r2, [r3, #6]
				}else{btn -> state = BUTTON_UP;}
			}

			break;
 8001492:	e03d      	b.n	8001510 <debounceFSM_update+0x128>
				}else{btn -> state = BUTTON_UP;}
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	719a      	strb	r2, [r3, #6]
			break;
 800149a:	e039      	b.n	8001510 <debounceFSM_update+0x128>

		case BUTTON_DOWN:

			if(pin){
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d038      	beq.n	8001514 <debounceFSM_update+0x12c>
				btn -> state = BUTTON_RAISING;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	719a      	strb	r2, [r3, #6]
				delayInit(&btn->delay,debounceDelay);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3308      	adds	r3, #8
 80014ac:	221e      	movs	r2, #30
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff4f 	bl	8001354 <delayInit>
				delayRead(&btn->delay);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3308      	adds	r3, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff5b 	bl	8001376 <delayRead>
			}

			break;
 80014c0:	e028      	b.n	8001514 <debounceFSM_update+0x12c>

		case BUTTON_RAISING:

			if(delayRead(&btn->delay)==true){
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3308      	adds	r3, #8
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff55 	bl	8001376 <delayRead>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d022      	beq.n	8001518 <debounceFSM_update+0x130>
				bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	4619      	mov	r1, r3
 80014dc:	4610      	mov	r0, r2
 80014de:	f000 fba5 	bl	8001c2c <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf14      	ite	ne
 80014e8:	2301      	movne	r3, #1
 80014ea:	2300      	moveq	r3, #0
 80014ec:	73bb      	strb	r3, [r7, #14]
				if(pin){										// si paso el tiempo y el boton continua suelto, se apaga el LED y cambia al estado BUTTON_UP
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <debounceFSM_update+0x114>
					btn -> state = BUTTON_UP;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	719a      	strb	r2, [r3, #6]
				}else{
					btn -> state = BUTTON_DOWN;
				}
			}

			break;
 80014fa:	e00d      	b.n	8001518 <debounceFSM_update+0x130>
					btn -> state = BUTTON_DOWN;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	719a      	strb	r2, [r3, #6]
			break;
 8001502:	e009      	b.n	8001518 <debounceFSM_update+0x130>

		default:
			debounceFSM_init(btn);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff61 	bl	80013cc <debounceFSM_init>
			break;
 800150a:	e006      	b.n	800151a <debounceFSM_update+0x132>
			break;
 800150c:	bf00      	nop
 800150e:	e004      	b.n	800151a <debounceFSM_update+0x132>
			break;
 8001510:	bf00      	nop
 8001512:	e002      	b.n	800151a <debounceFSM_update+0x132>
			break;
 8001514:	bf00      	nop
 8001516:	e000      	b.n	800151a <debounceFSM_update+0x132>
			break;
 8001518:	bf00      	nop
	}
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop

08001524 <readKey>:

bool readKey(uint8_t i){												// readKey es una funcion publica a la que se le puede consultar por el estado del boton
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	if(buttons[i].pressed){
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	490e      	ldr	r1, [pc, #56]	@ (800156c <readKey+0x48>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	3314      	adds	r3, #20
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00b      	beq.n	800155c <readKey+0x38>
		buttons[i].pressed = false;
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	4909      	ldr	r1, [pc, #36]	@ (800156c <readKey+0x48>)
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	3314      	adds	r3, #20
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
		return true;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <readKey+0x3a>
	}else{
		return false;
 800155c:	2300      	movs	r3, #0
	}
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f94f 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff f8b0 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f967 	bl	80018a6 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015f0:	f000 f92f 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000000 	.word	0x20000000
 800160c:	20000098 	.word	0x20000098
 8001610:	20000094 	.word	0x20000094

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000098 	.word	0x20000098
 8001638:	200001f8 	.word	0x200001f8

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200001f8 	.word	0x200001f8

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_Delay+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000098 	.word	0x20000098

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4907      	ldr	r1, [pc, #28]	@ (8001738 <__NVIC_EnableIRQ+0x38>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	@ (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	@ 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	@ 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800181c:	f7ff ff8e 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff29 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff3e 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff8e 	bl	8001790 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5d 	bl	800173c <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff31 	bl	8001700 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d004      	beq.n	80018dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2280      	movs	r2, #128	@ 0x80
 80018d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e00c      	b.n	80018f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2205      	movs	r2, #5
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	@ 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e165      	b.n	8001bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8154 	bne.w	8001be6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ae 	beq.w	8001be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a5c      	ldr	r2, [pc, #368]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c04 <HAL_GPIO_Init+0x300>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c0c <HAL_GPIO_Init+0x308>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c10 <HAL_GPIO_Init+0x30c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x216>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c14 <HAL_GPIO_Init+0x310>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x212>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c18 <HAL_GPIO_Init+0x314>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	@ (8001c1c <HAL_GPIO_Init+0x318>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x20a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c20 <HAL_GPIO_Init+0x31c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x206>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a49      	ldr	r2, [pc, #292]	@ (8001c24 <HAL_GPIO_Init+0x320>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x202>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00c      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e00a      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x21c>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	@ (8001c08 <HAL_GPIO_Init+0x304>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a26      	ldr	r2, [pc, #152]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_GPIO_Init+0x324>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	f67f ae96 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e001      	b.n	8001c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e12b      	b.n	8001efa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fd4e 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2224      	movs	r2, #36	@ 0x24
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf4:	f001 f9e6 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8001cf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a81      	ldr	r2, [pc, #516]	@ (8001f04 <HAL_I2C_Init+0x274>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d807      	bhi.n	8001d14 <HAL_I2C_Init+0x84>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a80      	ldr	r2, [pc, #512]	@ (8001f08 <HAL_I2C_Init+0x278>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	bf94      	ite	ls
 8001d0c:	2301      	movls	r3, #1
 8001d0e:	2300      	movhi	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	e006      	b.n	8001d22 <HAL_I2C_Init+0x92>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a7d      	ldr	r2, [pc, #500]	@ (8001f0c <HAL_I2C_Init+0x27c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	bf94      	ite	ls
 8001d1c:	2301      	movls	r3, #1
 8001d1e:	2300      	movhi	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0e7      	b.n	8001efa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4a78      	ldr	r2, [pc, #480]	@ (8001f10 <HAL_I2C_Init+0x280>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a6a      	ldr	r2, [pc, #424]	@ (8001f04 <HAL_I2C_Init+0x274>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d802      	bhi.n	8001d64 <HAL_I2C_Init+0xd4>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3301      	adds	r3, #1
 8001d62:	e009      	b.n	8001d78 <HAL_I2C_Init+0xe8>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	4a69      	ldr	r2, [pc, #420]	@ (8001f14 <HAL_I2C_Init+0x284>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	3301      	adds	r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	495c      	ldr	r1, [pc, #368]	@ (8001f04 <HAL_I2C_Init+0x274>)
 8001d94:	428b      	cmp	r3, r1
 8001d96:	d819      	bhi.n	8001dcc <HAL_I2C_Init+0x13c>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e59      	subs	r1, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dac:	400b      	ands	r3, r1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_I2C_Init+0x138>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1e59      	subs	r1, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc6:	e051      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e04f      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d111      	bne.n	8001df8 <HAL_I2C_Init+0x168>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e58      	subs	r0, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	440b      	add	r3, r1
 8001de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e012      	b.n	8001e1e <HAL_I2C_Init+0x18e>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e58      	subs	r0, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	0099      	lsls	r1, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Init+0x196>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e022      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10e      	bne.n	8001e4c <HAL_I2C_Init+0x1bc>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e58      	subs	r0, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	460b      	mov	r3, r1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	440b      	add	r3, r1
 8001e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e4a:	e00f      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e58      	subs	r0, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	0099      	lsls	r1, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	6809      	ldr	r1, [r1, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6911      	ldr	r1, [r2, #16]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	000186a0 	.word	0x000186a0
 8001f08:	001e847f 	.word	0x001e847f
 8001f0c:	003d08ff 	.word	0x003d08ff
 8001f10:	431bde83 	.word	0x431bde83
 8001f14:	10624dd3 	.word	0x10624dd3

08001f18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	461a      	mov	r2, r3
 8001f24:	460b      	mov	r3, r1
 8001f26:	817b      	strh	r3, [r7, #10]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff fb86 	bl	800163c <HAL_GetTick>
 8001f30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	f040 80e0 	bne.w	8002100 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2319      	movs	r3, #25
 8001f46:	2201      	movs	r2, #1
 8001f48:	4970      	ldr	r1, [pc, #448]	@ (800210c <HAL_I2C_Master_Transmit+0x1f4>)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fd92 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
 8001f58:	e0d3      	b.n	8002102 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2C_Master_Transmit+0x50>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e0cc      	b.n	8002102 <HAL_I2C_Master_Transmit+0x1ea>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d007      	beq.n	8001f8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2221      	movs	r2, #33	@ 0x21
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2210      	movs	r2, #16
 8001faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	893a      	ldrh	r2, [r7, #8]
 8001fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	@ (8002110 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6a3a      	ldr	r2, [r7, #32]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fbfc 	bl	80027d4 <I2C_MasterRequestWrite>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e08d      	b.n	8002102 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ffc:	e066      	b.n	80020cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	6a39      	ldr	r1, [r7, #32]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fe50 	bl	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00d      	beq.n	800202a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	2b04      	cmp	r3, #4
 8002014:	d107      	bne.n	8002026 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002024:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e06b      	b.n	8002102 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b04      	cmp	r3, #4
 8002066:	d11b      	bne.n	80020a0 <HAL_I2C_Master_Transmit+0x188>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d017      	beq.n	80020a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	6a39      	ldr	r1, [r7, #32]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fe47 	bl	8002d38 <I2C_WaitOnBTFFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d107      	bne.n	80020c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e01a      	b.n	8002102 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d194      	bne.n	8001ffe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002100:	2302      	movs	r3, #2
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	00100002 	.word	0x00100002
 8002110:	ffff0000 	.word	0xffff0000

08002114 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	@ 0x30
 8002118:	af02      	add	r7, sp, #8
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	460b      	mov	r3, r1
 8002122:	817b      	strh	r3, [r7, #10]
 8002124:	4613      	mov	r3, r2
 8002126:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff fa88 	bl	800163c <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	f040 8217 	bne.w	800256a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2319      	movs	r3, #25
 8002142:	2201      	movs	r2, #1
 8002144:	497c      	ldr	r1, [pc, #496]	@ (8002338 <HAL_I2C_Master_Receive+0x224>)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fc94 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002152:	2302      	movs	r3, #2
 8002154:	e20a      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_I2C_Master_Receive+0x50>
 8002160:	2302      	movs	r3, #2
 8002162:	e203      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d007      	beq.n	800218a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002198:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2222      	movs	r2, #34	@ 0x22
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2210      	movs	r2, #16
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	893a      	ldrh	r2, [r7, #8]
 80021ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a5c      	ldr	r2, [pc, #368]	@ (800233c <HAL_I2C_Master_Receive+0x228>)
 80021ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021cc:	8979      	ldrh	r1, [r7, #10]
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fb80 	bl	80028d8 <I2C_MasterRequestRead>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1c4      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	623b      	str	r3, [r7, #32]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	623b      	str	r3, [r7, #32]
 80021fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e198      	b.n	8002544 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002216:	2b01      	cmp	r3, #1
 8002218:	d11b      	bne.n	8002252 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e178      	b.n	8002544 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002256:	2b02      	cmp	r3, #2
 8002258:	d11b      	bne.n	8002292 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002268:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	e158      	b.n	8002544 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022b8:	e144      	b.n	8002544 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022be:	2b03      	cmp	r3, #3
 80022c0:	f200 80f1 	bhi.w	80024a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d123      	bne.n	8002314 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fd79 	bl	8002dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e145      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002312:	e117      	b.n	8002544 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002318:	2b02      	cmp	r3, #2
 800231a:	d14e      	bne.n	80023ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	2200      	movs	r2, #0
 8002324:	4906      	ldr	r1, [pc, #24]	@ (8002340 <HAL_I2C_Master_Receive+0x22c>)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fba4 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e11a      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
 8002336:	bf00      	nop
 8002338:	00100002 	.word	0x00100002
 800233c:	ffff0000 	.word	0xffff0000
 8002340:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023b8:	e0c4      	b.n	8002544 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c0:	2200      	movs	r2, #0
 80023c2:	496c      	ldr	r1, [pc, #432]	@ (8002574 <HAL_I2C_Master_Receive+0x460>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fb55 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0cb      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	2200      	movs	r2, #0
 800241e:	4955      	ldr	r1, [pc, #340]	@ (8002574 <HAL_I2C_Master_Receive+0x460>)
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb27 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e09d      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024a4:	e04e      	b.n	8002544 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fc8c 	bl	8002dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e058      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d124      	bne.n	8002544 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d107      	bne.n	8002512 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002510:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f aeb6 	bne.w	80022ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3728      	adds	r7, #40	@ 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	00010004 	.word	0x00010004

08002578 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	@ 0x28
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	460b      	mov	r3, r1
 8002586:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff f858 	bl	800163c <HAL_GetTick>
 800258c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b20      	cmp	r3, #32
 800259c:	f040 8111 	bne.w	80027c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2319      	movs	r3, #25
 80025a6:	2201      	movs	r2, #1
 80025a8:	4988      	ldr	r1, [pc, #544]	@ (80027cc <HAL_I2C_IsDeviceReady+0x254>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa62 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	e104      	b.n	80027c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_I2C_IsDeviceReady+0x50>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0fd      	b.n	80027c4 <HAL_I2C_IsDeviceReady+0x24c>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d007      	beq.n	80025ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2224      	movs	r2, #36	@ 0x24
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a70      	ldr	r2, [pc, #448]	@ (80027d0 <HAL_I2C_IsDeviceReady+0x258>)
 8002610:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002620:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fa20 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002648:	d103      	bne.n	8002652 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0b6      	b.n	80027c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002664:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002666:	f7fe ffe9 	bl	800163c <HAL_GetTick>
 800266a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b02      	cmp	r3, #2
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800269a:	e025      	b.n	80026e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800269c:	f7fe ffce 	bl	800163c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <HAL_I2C_IsDeviceReady+0x13a>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	22a0      	movs	r2, #160	@ 0xa0
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2ba0      	cmp	r3, #160	@ 0xa0
 80026f2:	d005      	beq.n	8002700 <HAL_I2C_IsDeviceReady+0x188>
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_I2C_IsDeviceReady+0x188>
 80026fa:	7dbb      	ldrb	r3, [r7, #22]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0cd      	beq.n	800269c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d129      	bne.n	800276a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002724:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2319      	movs	r3, #25
 8002742:	2201      	movs	r2, #1
 8002744:	4921      	ldr	r1, [pc, #132]	@ (80027cc <HAL_I2C_IsDeviceReady+0x254>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f994 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e036      	b.n	80027c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e02c      	b.n	80027c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002778:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002782:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2319      	movs	r3, #25
 800278a:	2201      	movs	r2, #1
 800278c:	490f      	ldr	r1, [pc, #60]	@ (80027cc <HAL_I2C_IsDeviceReady+0x254>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f970 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e012      	b.n	80027c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f4ff af32 	bcc.w	8002612 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	00100002 	.word	0x00100002
 80027d0:	ffff0000 	.word	0xffff0000

080027d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d006      	beq.n	80027fe <I2C_MasterRequestWrite+0x2a>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d003      	beq.n	80027fe <I2C_MasterRequestWrite+0x2a>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e00b      	b.n	8002828 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	2b12      	cmp	r3, #18
 8002816:	d107      	bne.n	8002828 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002826:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f91d 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800284e:	d103      	bne.n	8002858 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e035      	b.n	80028c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002864:	d108      	bne.n	8002878 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002866:	897b      	ldrh	r3, [r7, #10]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	e01b      	b.n	80028b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002878:	897b      	ldrh	r3, [r7, #10]
 800287a:	11db      	asrs	r3, r3, #7
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 0306 	and.w	r3, r3, #6
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f063 030f 	orn	r3, r3, #15
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <I2C_MasterRequestWrite+0xfc>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f966 	bl	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e010      	b.n	80028c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4907      	ldr	r1, [pc, #28]	@ (80028d4 <I2C_MasterRequestWrite+0x100>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f956 	bl	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	00010008 	.word	0x00010008
 80028d4:	00010002 	.word	0x00010002

080028d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d006      	beq.n	8002912 <I2C_MasterRequestRead+0x3a>
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d003      	beq.n	8002912 <I2C_MasterRequestRead+0x3a>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002910:	d108      	bne.n	8002924 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e00b      	b.n	800293c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	2b11      	cmp	r3, #17
 800292a:	d107      	bne.n	800293c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800293a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f893 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002962:	d103      	bne.n	800296c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800296a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e079      	b.n	8002a64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002978:	d108      	bne.n	800298c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	e05f      	b.n	8002a4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800298c:	897b      	ldrh	r3, [r7, #10]
 800298e:	11db      	asrs	r3, r3, #7
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 0306 	and.w	r3, r3, #6
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f063 030f 	orn	r3, r3, #15
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4930      	ldr	r1, [pc, #192]	@ (8002a6c <I2C_MasterRequestRead+0x194>)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8dc 	bl	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e054      	b.n	8002a64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4929      	ldr	r1, [pc, #164]	@ (8002a70 <I2C_MasterRequestRead+0x198>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f8cc 	bl	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e044      	b.n	8002a64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f831 	bl	8002a74 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a26:	d103      	bne.n	8002a30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e017      	b.n	8002a64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a34:	897b      	ldrh	r3, [r7, #10]
 8002a36:	11db      	asrs	r3, r3, #7
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 0306 	and.w	r3, r3, #6
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f063 030e 	orn	r3, r3, #14
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4907      	ldr	r1, [pc, #28]	@ (8002a70 <I2C_MasterRequestRead+0x198>)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f888 	bl	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	00010008 	.word	0x00010008
 8002a70:	00010002 	.word	0x00010002

08002a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a84:	e048      	b.n	8002b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a8c:	d044      	beq.n	8002b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fdd5 	bl	800163c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d139      	bne.n	8002b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10d      	bne.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	e00c      	b.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d116      	bne.n	8002b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e023      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10d      	bne.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	e00c      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	43da      	mvns	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d093      	beq.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b76:	e071      	b.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b86:	d123      	bne.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e067      	b.n	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bd6:	d041      	beq.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd8:	f7fe fd30 	bl	800163c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d302      	bcc.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d136      	bne.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4013      	ands	r3, r2
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e00b      	b.n	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e021      	b.n	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	0c1b      	lsrs	r3, r3, #16
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d10c      	bne.n	8002c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e00b      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f af6d 	bne.w	8002b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb4:	e034      	b.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f8e3 	bl	8002e82 <I2C_IsAcknowledgeFailed>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e034      	b.n	8002d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ccc:	d028      	beq.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe fcb5 	bl	800163c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11d      	bne.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cee:	2b80      	cmp	r3, #128	@ 0x80
 8002cf0:	d016      	beq.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e007      	b.n	8002d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2a:	2b80      	cmp	r3, #128	@ 0x80
 8002d2c:	d1c3      	bne.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d44:	e034      	b.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f89b 	bl	8002e82 <I2C_IsAcknowledgeFailed>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e034      	b.n	8002dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d5c:	d028      	beq.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fe fc6d 	bl	800163c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11d      	bne.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d016      	beq.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e007      	b.n	8002dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d1c3      	bne.n	8002d46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dd4:	e049      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d119      	bne.n	8002e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0210 	mvn.w	r2, #16
 8002dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e030      	b.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e18:	f7fe fc10 	bl	800163c <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11d      	bne.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b40      	cmp	r3, #64	@ 0x40
 8002e3a:	d016      	beq.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e007      	b.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d1ae      	bne.n	8002dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e98:	d11b      	bne.n	8002ed2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ea2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f043 0204 	orr.w	r2, r3, #4
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0cc      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b68      	ldr	r3, [pc, #416]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d90c      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b65      	ldr	r3, [pc, #404]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a58      	ldr	r2, [pc, #352]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a52      	ldr	r2, [pc, #328]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d044      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e067      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b37      	ldr	r3, [pc, #220]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4934      	ldr	r1, [pc, #208]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7fe fb34 	bl	800163c <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe fb30 	bl	800163c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b25      	ldr	r3, [pc, #148]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d20c      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	@ (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f841 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fa94 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023c00 	.word	0x40023c00
 800309c:	40023800 	.word	0x40023800
 80030a0:	08005c38 	.word	0x08005c38
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000094 	.word	0x20000094

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c8:	f7ff fff0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	@ (80030e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08005c48 	.word	0x08005c48

080030ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f0:	b0ae      	sub	sp, #184	@ 0xb8
 80030f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003112:	4bcb      	ldr	r3, [pc, #812]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b0c      	cmp	r3, #12
 800311c:	f200 8206 	bhi.w	800352c <HAL_RCC_GetSysClockFreq+0x440>
 8003120:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800315d 	.word	0x0800315d
 800312c:	0800352d 	.word	0x0800352d
 8003130:	0800352d 	.word	0x0800352d
 8003134:	0800352d 	.word	0x0800352d
 8003138:	08003165 	.word	0x08003165
 800313c:	0800352d 	.word	0x0800352d
 8003140:	0800352d 	.word	0x0800352d
 8003144:	0800352d 	.word	0x0800352d
 8003148:	0800316d 	.word	0x0800316d
 800314c:	0800352d 	.word	0x0800352d
 8003150:	0800352d 	.word	0x0800352d
 8003154:	0800352d 	.word	0x0800352d
 8003158:	0800335d 	.word	0x0800335d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4bb9      	ldr	r3, [pc, #740]	@ (8003444 <HAL_RCC_GetSysClockFreq+0x358>)
 800315e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003162:	e1e7      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003164:	4bb8      	ldr	r3, [pc, #736]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800316a:	e1e3      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800316c:	4bb4      	ldr	r3, [pc, #720]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003174:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003178:	4bb1      	ldr	r3, [pc, #708]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d071      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003184:	4bae      	ldr	r3, [pc, #696]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003190:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031aa:	4622      	mov	r2, r4
 80031ac:	462b      	mov	r3, r5
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4621      	mov	r1, r4
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80031c8:	4629      	mov	r1, r5
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031dc:	4649      	mov	r1, r9
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	4641      	mov	r1, r8
 80031e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e6:	4641      	mov	r1, r8
 80031e8:	018a      	lsls	r2, r1, #6
 80031ea:	4641      	mov	r1, r8
 80031ec:	1a51      	subs	r1, r2, r1
 80031ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031f0:	4649      	mov	r1, r9
 80031f2:	eb63 0301 	sbc.w	r3, r3, r1
 80031f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003204:	4649      	mov	r1, r9
 8003206:	00cb      	lsls	r3, r1, #3
 8003208:	4641      	mov	r1, r8
 800320a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320e:	4641      	mov	r1, r8
 8003210:	00ca      	lsls	r2, r1, #3
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	4603      	mov	r3, r0
 8003218:	4622      	mov	r2, r4
 800321a:	189b      	adds	r3, r3, r2
 800321c:	633b      	str	r3, [r7, #48]	@ 0x30
 800321e:	462b      	mov	r3, r5
 8003220:	460a      	mov	r2, r1
 8003222:	eb42 0303 	adc.w	r3, r2, r3
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003234:	4629      	mov	r1, r5
 8003236:	024b      	lsls	r3, r1, #9
 8003238:	4621      	mov	r1, r4
 800323a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800323e:	4621      	mov	r1, r4
 8003240:	024a      	lsls	r2, r1, #9
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003250:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003254:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003258:	f7fd f832 	bl	80002c0 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003266:	e067      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003268:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003274:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800327c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003280:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003282:	2300      	movs	r3, #0
 8003284:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003286:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800328a:	4622      	mov	r2, r4
 800328c:	462b      	mov	r3, r5
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4621      	mov	r1, r4
 80032a4:	1a51      	subs	r1, r2, r1
 80032a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032a8:	4629      	mov	r1, r5
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032bc:	4649      	mov	r1, r9
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	4641      	mov	r1, r8
 80032c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c6:	4641      	mov	r1, r8
 80032c8:	018a      	lsls	r2, r1, #6
 80032ca:	4641      	mov	r1, r8
 80032cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80032d0:	4649      	mov	r1, r9
 80032d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ea:	4692      	mov	sl, r2
 80032ec:	469b      	mov	fp, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	eb1a 0303 	adds.w	r3, sl, r3
 80032f4:	623b      	str	r3, [r7, #32]
 80032f6:	462b      	mov	r3, r5
 80032f8:	eb4b 0303 	adc.w	r3, fp, r3
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800330a:	4629      	mov	r1, r5
 800330c:	028b      	lsls	r3, r1, #10
 800330e:	4621      	mov	r1, r4
 8003310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003314:	4621      	mov	r1, r4
 8003316:	028a      	lsls	r2, r1, #10
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003320:	2200      	movs	r2, #0
 8003322:	673b      	str	r3, [r7, #112]	@ 0x70
 8003324:	677a      	str	r2, [r7, #116]	@ 0x74
 8003326:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800332a:	f7fc ffc9 	bl	80002c0 <__aeabi_uldivmod>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4613      	mov	r3, r2
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003338:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	3301      	adds	r3, #1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800334a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800334e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800335a:	e0eb      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800335c:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003364:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003368:	4b35      	ldr	r3, [pc, #212]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d06b      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003374:	4b32      	ldr	r3, [pc, #200]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x354>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	2200      	movs	r2, #0
 800337c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800337e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003380:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	663b      	str	r3, [r7, #96]	@ 0x60
 8003388:	2300      	movs	r3, #0
 800338a:	667b      	str	r3, [r7, #100]	@ 0x64
 800338c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003390:	4622      	mov	r2, r4
 8003392:	462b      	mov	r3, r5
 8003394:	f04f 0000 	mov.w	r0, #0
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	0159      	lsls	r1, r3, #5
 800339e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a2:	0150      	lsls	r0, r2, #5
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4621      	mov	r1, r4
 80033aa:	1a51      	subs	r1, r2, r1
 80033ac:	61b9      	str	r1, [r7, #24]
 80033ae:	4629      	mov	r1, r5
 80033b0:	eb63 0301 	sbc.w	r3, r3, r1
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033c2:	4659      	mov	r1, fp
 80033c4:	018b      	lsls	r3, r1, #6
 80033c6:	4651      	mov	r1, sl
 80033c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033cc:	4651      	mov	r1, sl
 80033ce:	018a      	lsls	r2, r1, #6
 80033d0:	4651      	mov	r1, sl
 80033d2:	ebb2 0801 	subs.w	r8, r2, r1
 80033d6:	4659      	mov	r1, fp
 80033d8:	eb63 0901 	sbc.w	r9, r3, r1
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033f0:	4690      	mov	r8, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	eb18 0303 	adds.w	r3, r8, r3
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	462b      	mov	r3, r5
 80033fe:	eb49 0303 	adc.w	r3, r9, r3
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003410:	4629      	mov	r1, r5
 8003412:	024b      	lsls	r3, r1, #9
 8003414:	4621      	mov	r1, r4
 8003416:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800341a:	4621      	mov	r1, r4
 800341c:	024a      	lsls	r2, r1, #9
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003426:	2200      	movs	r2, #0
 8003428:	65bb      	str	r3, [r7, #88]	@ 0x58
 800342a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800342c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003430:	f7fc ff46 	bl	80002c0 <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4613      	mov	r3, r2
 800343a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343e:	e065      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x420>
 8003440:	40023800 	.word	0x40023800
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800344c:	4b3d      	ldr	r3, [pc, #244]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x458>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	099b      	lsrs	r3, r3, #6
 8003452:	2200      	movs	r2, #0
 8003454:	4618      	mov	r0, r3
 8003456:	4611      	mov	r1, r2
 8003458:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800345c:	653b      	str	r3, [r7, #80]	@ 0x50
 800345e:	2300      	movs	r3, #0
 8003460:	657b      	str	r3, [r7, #84]	@ 0x54
 8003462:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003466:	4642      	mov	r2, r8
 8003468:	464b      	mov	r3, r9
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003478:	0150      	lsls	r0, r2, #5
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4641      	mov	r1, r8
 8003480:	1a51      	subs	r1, r2, r1
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	4649      	mov	r1, r9
 8003486:	eb63 0301 	sbc.w	r3, r3, r1
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003498:	4659      	mov	r1, fp
 800349a:	018b      	lsls	r3, r1, #6
 800349c:	4651      	mov	r1, sl
 800349e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034a2:	4651      	mov	r1, sl
 80034a4:	018a      	lsls	r2, r1, #6
 80034a6:	4651      	mov	r1, sl
 80034a8:	1a54      	subs	r4, r2, r1
 80034aa:	4659      	mov	r1, fp
 80034ac:	eb63 0501 	sbc.w	r5, r3, r1
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	00eb      	lsls	r3, r5, #3
 80034ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034be:	00e2      	lsls	r2, r4, #3
 80034c0:	4614      	mov	r4, r2
 80034c2:	461d      	mov	r5, r3
 80034c4:	4643      	mov	r3, r8
 80034c6:	18e3      	adds	r3, r4, r3
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	464b      	mov	r3, r9
 80034cc:	eb45 0303 	adc.w	r3, r5, r3
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034de:	4629      	mov	r1, r5
 80034e0:	028b      	lsls	r3, r1, #10
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e8:	4621      	mov	r1, r4
 80034ea:	028a      	lsls	r2, r1, #10
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034f4:	2200      	movs	r2, #0
 80034f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034fe:	f7fc fedf 	bl	80002c0 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4613      	mov	r3, r2
 8003508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800350c:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x458>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0f1b      	lsrs	r3, r3, #28
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800351a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800351e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800352a:	e003      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x45c>)
 800352e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003532:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003538:	4618      	mov	r0, r3
 800353a:	37b8      	adds	r7, #184	@ 0xb8
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	00f42400 	.word	0x00f42400

0800354c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e28d      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8083 	beq.w	8003672 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800356c:	4b94      	ldr	r3, [pc, #592]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b04      	cmp	r3, #4
 8003576:	d019      	beq.n	80035ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003578:	4b91      	ldr	r3, [pc, #580]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003580:	2b08      	cmp	r3, #8
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003584:	4b8e      	ldr	r3, [pc, #568]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003590:	d00c      	beq.n	80035ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b8b      	ldr	r3, [pc, #556]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d112      	bne.n	80035c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359e:	4b88      	ldr	r3, [pc, #544]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	4b84      	ldr	r3, [pc, #528]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05b      	beq.n	8003670 <HAL_RCC_OscConfig+0x124>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d157      	bne.n	8003670 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e25a      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x90>
 80035ce:	4b7c      	ldr	r3, [pc, #496]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7b      	ldr	r2, [pc, #492]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e01d      	b.n	8003618 <HAL_RCC_OscConfig+0xcc>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0xb4>
 80035e6:	4b76      	ldr	r3, [pc, #472]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b73      	ldr	r3, [pc, #460]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a72      	ldr	r2, [pc, #456]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0xcc>
 8003600:	4b6f      	ldr	r3, [pc, #444]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a6e      	ldr	r2, [pc, #440]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6b      	ldr	r2, [pc, #428]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f80c 	bl	800163c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe f808 	bl	800163c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	@ 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e21f      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b61      	ldr	r3, [pc, #388]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0xdc>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fff8 	bl	800163c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7fd fff4 	bl	800163c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	@ 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e20b      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x104>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d06f      	beq.n	800375e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800367e:	4b50      	ldr	r3, [pc, #320]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b00      	cmp	r3, #0
 8003688:	d017      	beq.n	80036ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800368a:	4b4d      	ldr	r3, [pc, #308]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003692:	2b08      	cmp	r3, #8
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003696:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x186>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1d3      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4937      	ldr	r1, [pc, #220]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <HAL_RCC_OscConfig+0x278>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fd ffa1 	bl	800163c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7fd ff9d 	bl	800163c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1b4      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4925      	ldr	r1, [pc, #148]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <HAL_RCC_OscConfig+0x278>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd ff80 	bl	800163c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003740:	f7fd ff7c 	bl	800163c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e193      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_RCC_OscConfig+0x27c>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd ff60 	bl	800163c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fd ff5c 	bl	800163c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e173      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_OscConfig+0x274>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x234>
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_RCC_OscConfig+0x27c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd ff49 	bl	800163c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00e      	b.n	80037cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ae:	f7fd ff45 	bl	800163c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d907      	bls.n	80037cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e15c      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470000 	.word	0x42470000
 80037c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b8a      	ldr	r3, [pc, #552]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ea      	bne.n	80037ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b83      	ldr	r3, [pc, #524]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b7f      	ldr	r3, [pc, #508]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4a7e      	ldr	r2, [pc, #504]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	4b7c      	ldr	r3, [pc, #496]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b79      	ldr	r3, [pc, #484]	@ (80039fc <HAL_RCC_OscConfig+0x4b0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b76      	ldr	r3, [pc, #472]	@ (80039fc <HAL_RCC_OscConfig+0x4b0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a75      	ldr	r2, [pc, #468]	@ (80039fc <HAL_RCC_OscConfig+0x4b0>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fd ff05 	bl	800163c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fd ff01 	bl	800163c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e118      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b6c      	ldr	r3, [pc, #432]	@ (80039fc <HAL_RCC_OscConfig+0x4b0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x31e>
 800385c:	4b66      	ldr	r3, [pc, #408]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	4a65      	ldr	r2, [pc, #404]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	@ 0x70
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x358>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x340>
 8003872:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	4a60      	ldr	r2, [pc, #384]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	@ 0x70
 800387e:	4b5e      	ldr	r3, [pc, #376]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	4a5d      	ldr	r2, [pc, #372]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	@ 0x70
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0x358>
 800388c:	4b5a      	ldr	r3, [pc, #360]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003890:	4a59      	ldr	r2, [pc, #356]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	@ 0x70
 8003898:	4b57      	ldr	r3, [pc, #348]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a56      	ldr	r2, [pc, #344]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fd fec6 	bl	800163c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd fec2 	bl	800163c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0d7      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ee      	beq.n	80038b4 <HAL_RCC_OscConfig+0x368>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fd feb0 	bl	800163c <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fd feac 	bl	800163c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0c1      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	4a3a      	ldr	r2, [pc, #232]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80ad 	beq.w	8003a78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d060      	beq.n	80039ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d145      	bne.n	80039be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b33      	ldr	r3, [pc, #204]	@ (8003a00 <HAL_RCC_OscConfig+0x4b4>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd fe80 	bl	800163c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fd fe7c 	bl	800163c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e093      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	071b      	lsls	r3, r3, #28
 800398a:	491b      	ldr	r1, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <HAL_RCC_OscConfig+0x4b4>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fd fe51 	bl	800163c <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7fd fe4d 	bl	800163c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e064      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b0:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x452>
 80039bc:	e05c      	b.n	8003a78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b10      	ldr	r3, [pc, #64]	@ (8003a00 <HAL_RCC_OscConfig+0x4b4>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd fe3a 	bl	800163c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fd fe36 	bl	800163c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04d      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x480>
 80039ea:	e045      	b.n	8003a78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e040      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
 8003a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a04:	4b1f      	ldr	r3, [pc, #124]	@ (8003a84 <HAL_RCC_OscConfig+0x538>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d030      	beq.n	8003a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d129      	bne.n	8003a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d122      	bne.n	8003a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d119      	bne.n	8003a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d10f      	bne.n	8003a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800

08003a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07b      	b.n	8003b92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d108      	bne.n	8003ab4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aaa:	d009      	beq.n	8003ac0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	61da      	str	r2, [r3, #28]
 8003ab2:	e005      	b.n	8003ac0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fc fe84 	bl	80007e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b44:	ea42 0103 	orr.w	r1, r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0104 	and.w	r1, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f003 0210 	and.w	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b088      	sub	sp, #32
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003baa:	f7fd fd47 	bl	800163c <HAL_GetTick>
 8003bae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d001      	beq.n	8003bc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e12a      	b.n	8003e1a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_Transmit+0x36>
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e122      	b.n	8003e1a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_Transmit+0x48>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e11b      	b.n	8003e1a <HAL_SPI_Transmit+0x280>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c30:	d10f      	bne.n	8003c52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5c:	2b40      	cmp	r3, #64	@ 0x40
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c78:	d152      	bne.n	8003d20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_SPI_Transmit+0xee>
 8003c82:	8b7b      	ldrh	r3, [r7, #26]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d145      	bne.n	8003d14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cac:	e032      	b.n	8003d14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d112      	bne.n	8003ce2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ce0:	e018      	b.n	8003d14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce2:	f7fd fcab 	bl	800163c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d803      	bhi.n	8003cfa <HAL_SPI_Transmit+0x160>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_Transmit+0x166>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e082      	b.n	8003e1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1c7      	bne.n	8003cae <HAL_SPI_Transmit+0x114>
 8003d1e:	e053      	b.n	8003dc8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_SPI_Transmit+0x194>
 8003d28:	8b7b      	ldrh	r3, [r7, #26]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d147      	bne.n	8003dbe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d54:	e033      	b.n	8003dbe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d113      	bne.n	8003d8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	7812      	ldrb	r2, [r2, #0]
 8003d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d8a:	e018      	b.n	8003dbe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d8c:	f7fd fc56 	bl	800163c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d803      	bhi.n	8003da4 <HAL_SPI_Transmit+0x20a>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003da2:	d102      	bne.n	8003daa <HAL_SPI_Transmit+0x210>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e02d      	b.n	8003e1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1c6      	bne.n	8003d56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f9cf 	bl	8004170 <SPI_EndRxTxTransaction>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10f      	bne.n	8003e68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
    return;
 8003e66:	e0d7      	b.n	8004018 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_SPI_IRQHandler+0x66>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	09db      	lsrs	r3, r3, #7
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
    return;
 8003e88:	e0c6      	b.n	8004018 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <HAL_SPI_IRQHandler+0x8c>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80b4 	beq.w	8004018 <HAL_SPI_IRQHandler+0x1f4>
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80ad 	beq.w	8004018 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d023      	beq.n	8003f12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d011      	beq.n	8003efa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	f043 0204 	orr.w	r2, r3, #4
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	e00b      	b.n	8003f12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	693b      	ldr	r3, [r7, #16]
        return;
 8003f10:	e082      	b.n	8004018 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d014      	beq.n	8003f48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00c      	beq.n	8003f6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f58:	f043 0208 	orr.w	r2, r3, #8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d04f      	beq.n	8004016 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <HAL_SPI_IRQHandler+0x17e>
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d034      	beq.n	800400c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0203 	bic.w	r2, r2, #3
 8003fb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d011      	beq.n	8003fde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	4a18      	ldr	r2, [pc, #96]	@ (8004020 <HAL_SPI_IRQHandler+0x1fc>)
 8003fc0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd fc79 	bl	80018be <HAL_DMA_Abort_IT>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fea:	4a0d      	ldr	r2, [pc, #52]	@ (8004020 <HAL_SPI_IRQHandler+0x1fc>)
 8003fec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fc63 	bl	80018be <HAL_DMA_Abort_IT>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004002:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800400a:	e003      	b.n	8004014 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f809 	bl	8004024 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004012:	e000      	b.n	8004016 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004014:	bf00      	nop
    return;
 8004016:	bf00      	nop
  }
}
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	08004039 	.word	0x08004039

08004024 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f7ff ffe6 	bl	8004024 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004070:	f7fd fae4 	bl	800163c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4413      	add	r3, r2
 800407e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004080:	f7fd fadc 	bl	800163c <HAL_GetTick>
 8004084:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004086:	4b39      	ldr	r3, [pc, #228]	@ (800416c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	015b      	lsls	r3, r3, #5
 800408c:	0d1b      	lsrs	r3, r3, #20
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004096:	e055      	b.n	8004144 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800409e:	d051      	beq.n	8004144 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040a0:	f7fd facc 	bl	800163c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d902      	bls.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d13d      	bne.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ce:	d111      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d8:	d004      	beq.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e2:	d107      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fc:	d10f      	bne.n	800411e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800411c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e018      	b.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e002      	b.n	8004144 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3b01      	subs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	429a      	cmp	r2, r3
 8004160:	d19a      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000000 	.word	0x20000000

08004170 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2201      	movs	r2, #1
 8004184:	2102      	movs	r1, #2
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff ff6a 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e032      	b.n	8004208 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <SPI_EndRxTxTransaction+0xa0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004214 <SPI_EndRxTxTransaction+0xa4>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	0d5b      	lsrs	r3, r3, #21
 80041ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041c0:	d112      	bne.n	80041e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2180      	movs	r1, #128	@ 0x80
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff ff47 	bl	8004060 <SPI_WaitFlagStateUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d016      	beq.n	8004206 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e00f      	b.n	8004208 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	2b80      	cmp	r3, #128	@ 0x80
 8004200:	d0f2      	beq.n	80041e8 <SPI_EndRxTxTransaction+0x78>
 8004202:	e000      	b.n	8004206 <SPI_EndRxTxTransaction+0x96>
        break;
 8004204:	bf00      	nop
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000000 	.word	0x20000000
 8004214:	165e9f81 	.word	0x165e9f81

08004218 <arcadeFSM>:

ArcadeState_t arcadeState = BOOT;

//arcadeFSM controla los diferentes posibles estados del juego.
void arcadeFSM(void)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b0a5      	sub	sp, #148	@ 0x94
 800421c:	af02      	add	r7, sp, #8
    switch (arcadeState){
 800421e:	4b7b      	ldr	r3, [pc, #492]	@ (800440c <arcadeFSM+0x1f4>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b05      	cmp	r3, #5
 8004224:	f200 80e1 	bhi.w	80043ea <arcadeFSM+0x1d2>
 8004228:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <arcadeFSM+0x18>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004249 	.word	0x08004249
 8004234:	08004259 	.word	0x08004259
 8004238:	080042c3 	.word	0x080042c3
 800423c:	0800430b 	.word	0x0800430b
 8004240:	08004355 	.word	0x08004355
 8004244:	080043a3 	.word	0x080043a3

    	//BOOT inicializa el HW y muestra la animacion de inicio
        case BOOT:
			systemInit();
 8004248:	f000 f8f4 	bl	8004434 <systemInit>
			startScreen();
 800424c:	f000 f8fe 	bl	800444c <startScreen>
			arcadeState = MENU;
 8004250:	4b6e      	ldr	r3, [pc, #440]	@ (800440c <arcadeFSM+0x1f4>)
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
			break;
 8004256:	e0d5      	b.n	8004404 <arcadeFSM+0x1ec>

        case MENU:
        	char text1[] = "SNAKE";
 8004258:	4a6d      	ldr	r2, [pc, #436]	@ (8004410 <arcadeFSM+0x1f8>)
 800425a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800425e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004262:	6018      	str	r0, [r3, #0]
 8004264:	3304      	adds	r3, #4
 8004266:	8019      	strh	r1, [r3, #0]
        	char text2[] = "PRESIONE START";
 8004268:	4b6a      	ldr	r3, [pc, #424]	@ (8004414 <arcadeFSM+0x1fc>)
 800426a:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800426e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004270:	c407      	stmia	r4!, {r0, r1, r2}
 8004272:	8023      	strh	r3, [r4, #0]
 8004274:	3402      	adds	r4, #2
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	7023      	strb	r3, [r4, #0]
        	scrollTextDual(0, text1, 8, text2,false);
 800427a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800427e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8004282:	2200      	movs	r2, #0
 8004284:	9200      	str	r2, [sp, #0]
 8004286:	2208      	movs	r2, #8
 8004288:	2000      	movs	r0, #0
 800428a:	f7fc ff6b 	bl	8001164 <scrollTextDual>
        	if (readKey(1)){
 800428e:	2001      	movs	r0, #1
 8004290:	f7fd f948 	bl	8001524 <readKey>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <arcadeFSM+0x90>
        		arcadeState = PLAYING;
 800429a:	4b5c      	ldr	r3, [pc, #368]	@ (800440c <arcadeFSM+0x1f4>)
 800429c:	2202      	movs	r2, #2
 800429e:	701a      	strb	r2, [r3, #0]
        		startScreen();
 80042a0:	f000 f8d4 	bl	800444c <startScreen>
        		snakeInit();
 80042a4:	f000 f94c 	bl	8004540 <snakeInit>
        	}
        	if (readKey(0)){
 80042a8:	2000      	movs	r0, #0
 80042aa:	f7fd f93b 	bl	8001524 <readKey>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 809e 	beq.w	80043f2 <arcadeFSM+0x1da>
        		arcadeState = HSCORE;
 80042b6:	4b55      	ldr	r3, [pc, #340]	@ (800440c <arcadeFSM+0x1f4>)
 80042b8:	2205      	movs	r2, #5
 80042ba:	701a      	strb	r2, [r3, #0]
        		snakeInit();
 80042bc:	f000 f940 	bl	8004540 <snakeInit>
        	}
            break;
 80042c0:	e097      	b.n	80043f2 <arcadeFSM+0x1da>

        case PLAYING:

        	if(snakeUpdate() == false){
 80042c2:	f000 fa61 	bl	8004788 <snakeUpdate>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f083 0301 	eor.w	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <arcadeFSM+0xde>
        		if(currentScore > loadScore()){
 80042d2:	f7fc fc41 	bl	8000b58 <loadScore>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4b4f      	ldr	r3, [pc, #316]	@ (8004418 <arcadeFSM+0x200>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d204      	bcs.n	80042ec <arcadeFSM+0xd4>
        			saveScore(currentScore);
 80042e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004418 <arcadeFSM+0x200>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc fc29 	bl	8000b3e <saveScore>
        		}
        		startScreen();
 80042ec:	f000 f8ae 	bl	800444c <startScreen>
        		arcadeState = GAME_OVER;
 80042f0:	4b46      	ldr	r3, [pc, #280]	@ (800440c <arcadeFSM+0x1f4>)
 80042f2:	2204      	movs	r2, #4
 80042f4:	701a      	strb	r2, [r3, #0]
        	}
        	if (readKey(0)){
 80042f6:	2000      	movs	r0, #0
 80042f8:	f7fd f914 	bl	8001524 <readKey>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d079      	beq.n	80043f6 <arcadeFSM+0x1de>
        		arcadeState = PAUSED;
 8004302:	4b42      	ldr	r3, [pc, #264]	@ (800440c <arcadeFSM+0x1f4>)
 8004304:	2203      	movs	r2, #3
 8004306:	701a      	strb	r2, [r3, #0]
        	}

            break;
 8004308:	e075      	b.n	80043f6 <arcadeFSM+0x1de>

        case PAUSED:

        	char text5[] = "PAUSA";
 800430a:	4a44      	ldr	r2, [pc, #272]	@ (800441c <arcadeFSM+0x204>)
 800430c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004314:	6018      	str	r0, [r3, #0]
 8004316:	3304      	adds	r3, #4
 8004318:	8019      	strh	r1, [r3, #0]
        	char text6[] = "     PAUSA";
 800431a:	4a41      	ldr	r2, [pc, #260]	@ (8004420 <arcadeFSM+0x208>)
 800431c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004320:	ca07      	ldmia	r2, {r0, r1, r2}
 8004322:	c303      	stmia	r3!, {r0, r1}
 8004324:	801a      	strh	r2, [r3, #0]
 8004326:	3302      	adds	r3, #2
 8004328:	0c12      	lsrs	r2, r2, #16
 800432a:	701a      	strb	r2, [r3, #0]
        	scrollTextDual(0, text5, 8, text6,true);
 800432c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004330:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8004334:	2201      	movs	r2, #1
 8004336:	9200      	str	r2, [sp, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	2000      	movs	r0, #0
 800433c:	f7fc ff12 	bl	8001164 <scrollTextDual>
        	if (readKey(1)){
 8004340:	2001      	movs	r0, #1
 8004342:	f7fd f8ef 	bl	8001524 <readKey>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d056      	beq.n	80043fa <arcadeFSM+0x1e2>
        		arcadeState = PLAYING;
 800434c:	4b2f      	ldr	r3, [pc, #188]	@ (800440c <arcadeFSM+0x1f4>)
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
        	}

            break;
 8004352:	e052      	b.n	80043fa <arcadeFSM+0x1e2>

        case GAME_OVER:
        	char text3[40];
        	sprintf(text3,"ACTUAL %u", currentScore);
 8004354:	4b30      	ldr	r3, [pc, #192]	@ (8004418 <arcadeFSM+0x200>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	463b      	mov	r3, r7
 800435c:	4931      	ldr	r1, [pc, #196]	@ (8004424 <arcadeFSM+0x20c>)
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fb74 	bl	8004a4c <siprintf>
        	char text4[40];
        	sprintf(text4,"HIGHSCORE %u", loadScore());
 8004364:	f7fc fbf8 	bl	8000b58 <loadScore>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004370:	492d      	ldr	r1, [pc, #180]	@ (8004428 <arcadeFSM+0x210>)
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fb6a 	bl	8004a4c <siprintf>
        	scrollTextDual(0, text3, 8, text4,true);
 8004378:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800437c:	4639      	mov	r1, r7
 800437e:	2201      	movs	r2, #1
 8004380:	9200      	str	r2, [sp, #0]
 8004382:	2208      	movs	r2, #8
 8004384:	2000      	movs	r0, #0
 8004386:	f7fc feed 	bl	8001164 <scrollTextDual>
            if (readKey(1)) {
 800438a:	2001      	movs	r0, #1
 800438c:	f7fd f8ca 	bl	8001524 <readKey>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d033      	beq.n	80043fe <arcadeFSM+0x1e6>
            	startScreen();
 8004396:	f000 f859 	bl	800444c <startScreen>
                arcadeState = MENU;
 800439a:	4b1c      	ldr	r3, [pc, #112]	@ (800440c <arcadeFSM+0x1f4>)
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
            }

            break;
 80043a0:	e02d      	b.n	80043fe <arcadeFSM+0x1e6>

        case HSCORE:

        	char text7[] = "HIGHSCORE";
 80043a2:	4a22      	ldr	r2, [pc, #136]	@ (800442c <arcadeFSM+0x214>)
 80043a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80043a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80043aa:	c303      	stmia	r3!, {r0, r1}
 80043ac:	801a      	strh	r2, [r3, #0]
			char text8[40];
			sprintf(text8,"         %u", loadScore());
 80043ae:	f7fc fbd3 	bl	8000b58 <loadScore>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461a      	mov	r2, r3
 80043b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043ba:	491d      	ldr	r1, [pc, #116]	@ (8004430 <arcadeFSM+0x218>)
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fb45 	bl	8004a4c <siprintf>
			scrollTextDual(0, text7, 8, text8,true);
 80043c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043c6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80043ca:	2201      	movs	r2, #1
 80043cc:	9200      	str	r2, [sp, #0]
 80043ce:	2208      	movs	r2, #8
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7fc fec7 	bl	8001164 <scrollTextDual>
            if (readKey(1)) {
 80043d6:	2001      	movs	r0, #1
 80043d8:	f7fd f8a4 	bl	8001524 <readKey>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00f      	beq.n	8004402 <arcadeFSM+0x1ea>
                arcadeState = MENU;
 80043e2:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <arcadeFSM+0x1f4>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80043e8:	e00b      	b.n	8004402 <arcadeFSM+0x1ea>

        default:
            arcadeState = BOOT;
 80043ea:	4b08      	ldr	r3, [pc, #32]	@ (800440c <arcadeFSM+0x1f4>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
            break;
 80043f0:	e008      	b.n	8004404 <arcadeFSM+0x1ec>
            break;
 80043f2:	bf00      	nop
 80043f4:	e006      	b.n	8004404 <arcadeFSM+0x1ec>
            break;
 80043f6:	bf00      	nop
 80043f8:	e004      	b.n	8004404 <arcadeFSM+0x1ec>
            break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <arcadeFSM+0x1ec>
            break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <arcadeFSM+0x1ec>
            break;
 8004402:	bf00      	nop
    }
}
 8004404:	bf00      	nop
 8004406:	378c      	adds	r7, #140	@ 0x8c
 8004408:	46bd      	mov	sp, r7
 800440a:	bd90      	pop	{r4, r7, pc}
 800440c:	200001fc 	.word	0x200001fc
 8004410:	08005bf4 	.word	0x08005bf4
 8004414:	08005bfc 	.word	0x08005bfc
 8004418:	20000414 	.word	0x20000414
 800441c:	08005c0c 	.word	0x08005c0c
 8004420:	08005c14 	.word	0x08005c14
 8004424:	08005bcc 	.word	0x08005bcc
 8004428:	08005bd8 	.word	0x08005bd8
 800442c:	08005c20 	.word	0x08005c20
 8004430:	08005be8 	.word	0x08005be8

08004434 <systemInit>:

// Inicializa el hardware necesario
void systemInit(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
	board_gpio_init();
 8004438:	f7fc fbf6 	bl	8000c28 <board_gpio_init>
	I2C1_Init();
 800443c:	f7fc fcba 	bl	8000db4 <I2C1_Init>
	SPI2_Init();
 8004440:	f7fc fc82 	bl	8000d48 <SPI2_Init>
	MAX7219_InitAll();
 8004444:	f7fc fce4 	bl	8000e10 <MAX7219_InitAll>
}
 8004448:	bf00      	nop
 800444a:	bd80      	pop	{r7, pc}

0800444c <startScreen>:


// startScreen es una animacion para cuando se inicia el juego o se cambia de pantalla
void startScreen(void){
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0

    fill16(0);
 8004452:	2000      	movs	r0, #0
 8004454:	f7fc fe70 	bl	8001138 <fill16>
    updateDisplay16();
 8004458:	f7fc fdc0 	bl	8000fdc <updateDisplay16>

    for (uint8_t x = 0; x < 16; x++) {
 800445c:	2300      	movs	r3, #0
 800445e:	71fb      	strb	r3, [r7, #7]
 8004460:	e016      	b.n	8004490 <startScreen+0x44>
        for (uint8_t y = 0; y < 16; y++) {
 8004462:	2300      	movs	r3, #0
 8004464:	71bb      	strb	r3, [r7, #6]
 8004466:	e008      	b.n	800447a <startScreen+0x2e>
            setPixel16(x, y, 1);
 8004468:	79b9      	ldrb	r1, [r7, #6]
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	2201      	movs	r2, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f7fc fd26 	bl	8000ec0 <setPixel16>
        for (uint8_t y = 0; y < 16; y++) {
 8004474:	79bb      	ldrb	r3, [r7, #6]
 8004476:	3301      	adds	r3, #1
 8004478:	71bb      	strb	r3, [r7, #6]
 800447a:	79bb      	ldrb	r3, [r7, #6]
 800447c:	2b0f      	cmp	r3, #15
 800447e:	d9f3      	bls.n	8004468 <startScreen+0x1c>
        }
        updateDisplay16();
 8004480:	f7fc fdac 	bl	8000fdc <updateDisplay16>
        HAL_Delay(50);
 8004484:	2032      	movs	r0, #50	@ 0x32
 8004486:	f7fd f8e5 	bl	8001654 <HAL_Delay>
    for (uint8_t x = 0; x < 16; x++) {
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	3301      	adds	r3, #1
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	d9e5      	bls.n	8004462 <startScreen+0x16>
    }

}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <spawnFood>:
extern ArcadeState_t arcadeState;

static const uint8_t SNAKESPEED = 110; //velodicad de la serpiente

//spawnFood hace aparecer una nueva manzana dentro del tablero. Valida que no aparezca sobre la serpiente.
static void spawnFood(void) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
    uint8_t valid = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	71fb      	strb	r3, [r7, #7]
    while (!valid) {
 80044aa:	e03c      	b.n	8004526 <spawnFood+0x86>
        food.pos.x = rand() % DISPLAY_COLS;
 80044ac:	f000 f9ce 	bl	800484c <rand>
 80044b0:	4603      	mov	r3, r0
 80044b2:	425a      	negs	r2, r3
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	f002 020f 	and.w	r2, r2, #15
 80044bc:	bf58      	it	pl
 80044be:	4253      	negpl	r3, r2
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <spawnFood+0x98>)
 80044c4:	701a      	strb	r2, [r3, #0]
        food.pos.y = rand() % DISPLAY_ROWS;
 80044c6:	f000 f9c1 	bl	800484c <rand>
 80044ca:	4603      	mov	r3, r0
 80044cc:	425a      	negs	r2, r3
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	f002 020f 	and.w	r2, r2, #15
 80044d6:	bf58      	it	pl
 80044d8:	4253      	negpl	r3, r2
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	4b16      	ldr	r3, [pc, #88]	@ (8004538 <spawnFood+0x98>)
 80044de:	705a      	strb	r2, [r3, #1]
        valid = 1;
 80044e0:	2301      	movs	r3, #1
 80044e2:	71fb      	strb	r3, [r7, #7]
        for (uint16_t i = 0; i < snake.length; i++) {
 80044e4:	2300      	movs	r3, #0
 80044e6:	80bb      	strh	r3, [r7, #4]
 80044e8:	e016      	b.n	8004518 <spawnFood+0x78>
            if (food.pos.x == snake.body[i].x && food.pos.y == snake.body[i].y) {
 80044ea:	4b13      	ldr	r3, [pc, #76]	@ (8004538 <spawnFood+0x98>)
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	88bb      	ldrh	r3, [r7, #4]
 80044f0:	4912      	ldr	r1, [pc, #72]	@ (800453c <spawnFood+0x9c>)
 80044f2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d10b      	bne.n	8004512 <spawnFood+0x72>
 80044fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004538 <spawnFood+0x98>)
 80044fc:	785a      	ldrb	r2, [r3, #1]
 80044fe:	88bb      	ldrh	r3, [r7, #4]
 8004500:	490e      	ldr	r1, [pc, #56]	@ (800453c <spawnFood+0x9c>)
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	440b      	add	r3, r1
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	429a      	cmp	r2, r3
 800450a:	d102      	bne.n	8004512 <spawnFood+0x72>
                valid = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	71fb      	strb	r3, [r7, #7]
                break;
 8004510:	e009      	b.n	8004526 <spawnFood+0x86>
        for (uint16_t i = 0; i < snake.length; i++) {
 8004512:	88bb      	ldrh	r3, [r7, #4]
 8004514:	3301      	adds	r3, #1
 8004516:	80bb      	strh	r3, [r7, #4]
 8004518:	4b08      	ldr	r3, [pc, #32]	@ (800453c <spawnFood+0x9c>)
 800451a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800451e:	461a      	mov	r2, r3
 8004520:	88bb      	ldrh	r3, [r7, #4]
 8004522:	4293      	cmp	r3, r2
 8004524:	d3e1      	bcc.n	80044ea <spawnFood+0x4a>
    while (!valid) {
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0bf      	beq.n	80044ac <spawnFood+0xc>
            }
        }
    }
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000404 	.word	0x20000404
 800453c:	20000200 	.word	0x20000200

08004540 <snakeInit>:

//snakeInit inicializa una nueva serpiente
void snakeInit(void) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0

	delayInit(&snakeSpeed, SNAKESPEED);
 8004546:	236e      	movs	r3, #110	@ 0x6e
 8004548:	4619      	mov	r1, r3
 800454a:	4823      	ldr	r0, [pc, #140]	@ (80045d8 <snakeInit+0x98>)
 800454c:	f7fc ff02 	bl	8001354 <delayInit>
    snake.length = 3;
 8004550:	4b22      	ldr	r3, [pc, #136]	@ (80045dc <snakeInit+0x9c>)
 8004552:	2203      	movs	r2, #3
 8004554:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    snake.dir = UP;
 8004558:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <snakeInit+0x9c>)
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    snake.snakeStatus = ALIVE;
 8004560:	4b1e      	ldr	r3, [pc, #120]	@ (80045dc <snakeInit+0x9c>)
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
    snake.body[0] = (PositionXY_t){8, 8};
 8004568:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <snakeInit+0x9c>)
 800456a:	4b1d      	ldr	r3, [pc, #116]	@ (80045e0 <snakeInit+0xa0>)
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	8013      	strh	r3, [r2, #0]
    snake.body[1] = (PositionXY_t){7, 8};
 8004570:	4a1a      	ldr	r2, [pc, #104]	@ (80045dc <snakeInit+0x9c>)
 8004572:	4b1c      	ldr	r3, [pc, #112]	@ (80045e4 <snakeInit+0xa4>)
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	8053      	strh	r3, [r2, #2]
    snake.body[2] = (PositionXY_t){6, 8};
 8004578:	4a18      	ldr	r2, [pc, #96]	@ (80045dc <snakeInit+0x9c>)
 800457a:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <snakeInit+0xa8>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	8093      	strh	r3, [r2, #4]
    currentScore = snake.length;
 8004580:	4b16      	ldr	r3, [pc, #88]	@ (80045dc <snakeInit+0x9c>)
 8004582:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004586:	461a      	mov	r2, r3
 8004588:	4b18      	ldr	r3, [pc, #96]	@ (80045ec <snakeInit+0xac>)
 800458a:	801a      	strh	r2, [r3, #0]
    fill16(0);
 800458c:	2000      	movs	r0, #0
 800458e:	f7fc fdd3 	bl	8001138 <fill16>
    spawnFood();
 8004592:	f7ff ff85 	bl	80044a0 <spawnFood>

    for (int i = 0; i < snake.length; i++) {
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e00f      	b.n	80045bc <snakeInit+0x7c>
        setPixel16(snake.body[i].x, snake.body[i].y, 1);
 800459c:	4a0f      	ldr	r2, [pc, #60]	@ (80045dc <snakeInit+0x9c>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 80045a4:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <snakeInit+0x9c>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	2201      	movs	r2, #1
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7fc fc85 	bl	8000ec0 <setPixel16>
    for (int i = 0; i < snake.length; i++) {
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <snakeInit+0x9c>)
 80045be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4293      	cmp	r3, r2
 80045c8:	dbe8      	blt.n	800459c <snakeInit+0x5c>
    }
    updateDisplay16();
 80045ca:	f7fc fd07 	bl	8000fdc <updateDisplay16>

}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000408 	.word	0x20000408
 80045dc:	20000200 	.word	0x20000200
 80045e0:	08005c2c 	.word	0x08005c2c
 80045e4:	08005c30 	.word	0x08005c30
 80045e8:	08005c34 	.word	0x08005c34
 80045ec:	20000414 	.word	0x20000414

080045f0 <snakeMove>:

// snakeMove se encarga del movimiento de la serpiente y validar que no haya chocado consigo misma o con el borde del tablero
static void snakeMove(void) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0

    PositionXY_t nextMove = snake.body[0];     // seteamos nextMove en la "cabeza" de la serpiente
 80045f6:	4b48      	ldr	r3, [pc, #288]	@ (8004718 <snakeMove+0x128>)
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	803b      	strh	r3, [r7, #0]
    snake.snakeStatus = ALIVE;
 80045fc:	4b46      	ldr	r3, [pc, #280]	@ (8004718 <snakeMove+0x128>)
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

    switch (snake.dir) { // movemos la cabeza segun corresponda
 8004604:	4b44      	ldr	r3, [pc, #272]	@ (8004718 <snakeMove+0x128>)
 8004606:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800460a:	2b03      	cmp	r3, #3
 800460c:	d81e      	bhi.n	800464c <snakeMove+0x5c>
 800460e:	a201      	add	r2, pc, #4	@ (adr r2, 8004614 <snakeMove+0x24>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004625 	.word	0x08004625
 8004618:	0800462f 	.word	0x0800462f
 800461c:	08004639 	.word	0x08004639
 8004620:	08004643 	.word	0x08004643
        case UP:
            nextMove.y--;
 8004624:	787b      	ldrb	r3, [r7, #1]
 8004626:	3b01      	subs	r3, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	707b      	strb	r3, [r7, #1]
            break;
 800462c:	e013      	b.n	8004656 <snakeMove+0x66>
        case DOWN:
            nextMove.y++;
 800462e:	787b      	ldrb	r3, [r7, #1]
 8004630:	3301      	adds	r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	707b      	strb	r3, [r7, #1]
            break;
 8004636:	e00e      	b.n	8004656 <snakeMove+0x66>
        case LEFT:
            nextMove.x++;
 8004638:	783b      	ldrb	r3, [r7, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	703b      	strb	r3, [r7, #0]
            break;
 8004640:	e009      	b.n	8004656 <snakeMove+0x66>
        case RIGHT:
            nextMove.x--;
 8004642:	783b      	ldrb	r3, [r7, #0]
 8004644:	3b01      	subs	r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	703b      	strb	r3, [r7, #0]
            break;
 800464a:	e004      	b.n	8004656 <snakeMove+0x66>
        default:
        	snake.dir = UP;
 800464c:	4b32      	ldr	r3, [pc, #200]	@ (8004718 <snakeMove+0x128>)
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
            break;
 8004654:	bf00      	nop
    }

    if (nextMove.x < 0 || nextMove.x > 15 || nextMove.y < 0 || nextMove.y > 15) { //validamos que la nueva posicion de la cabeza este dentro del tablero
 8004656:	783b      	ldrb	r3, [r7, #0]
 8004658:	2b0f      	cmp	r3, #15
 800465a:	d802      	bhi.n	8004662 <snakeMove+0x72>
 800465c:	787b      	ldrb	r3, [r7, #1]
 800465e:	2b0f      	cmp	r3, #15
 8004660:	d904      	bls.n	800466c <snakeMove+0x7c>
    	snake.snakeStatus = DEAD;
 8004662:	4b2d      	ldr	r3, [pc, #180]	@ (8004718 <snakeMove+0x128>)
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
    	return; }
 800466a:	e052      	b.n	8004712 <snakeMove+0x122>

    for (int i = 1; i < snake.length; i++) { 									// validamos si choca consigo misma
 800466c:	2301      	movs	r3, #1
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	e016      	b.n	80046a0 <snakeMove+0xb0>
        if (snake.body[i].x == nextMove.x && snake.body[i].y == nextMove.y) {
 8004672:	4a29      	ldr	r2, [pc, #164]	@ (8004718 <snakeMove+0x128>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800467a:	783b      	ldrb	r3, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d10c      	bne.n	800469a <snakeMove+0xaa>
 8004680:	4a25      	ldr	r2, [pc, #148]	@ (8004718 <snakeMove+0x128>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	785a      	ldrb	r2, [r3, #1]
 800468a:	787b      	ldrb	r3, [r7, #1]
 800468c:	429a      	cmp	r2, r3
 800468e:	d104      	bne.n	800469a <snakeMove+0xaa>
        	snake.snakeStatus = DEAD;
 8004690:	4b21      	ldr	r3, [pc, #132]	@ (8004718 <snakeMove+0x128>)
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
        	return;
 8004698:	e03b      	b.n	8004712 <snakeMove+0x122>
    for (int i = 1; i < snake.length; i++) { 									// validamos si choca consigo misma
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3301      	adds	r3, #1
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004718 <snakeMove+0x128>)
 80046a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4293      	cmp	r3, r2
 80046ac:	dbe1      	blt.n	8004672 <snakeMove+0x82>
        }
    }

    if((nextMove.x == food.pos.x) && (nextMove.y == food.pos.y)){ 				// si pasa por la comida, suma puntos, aumenta la longitud y spawnea una nueva "manzana"
 80046ae:	783a      	ldrb	r2, [r7, #0]
 80046b0:	4b1a      	ldr	r3, [pc, #104]	@ (800471c <snakeMove+0x12c>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d114      	bne.n	80046e2 <snakeMove+0xf2>
 80046b8:	787a      	ldrb	r2, [r7, #1]
 80046ba:	4b18      	ldr	r3, [pc, #96]	@ (800471c <snakeMove+0x12c>)
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d10f      	bne.n	80046e2 <snakeMove+0xf2>
    	snake.length += 1;
 80046c2:	4b15      	ldr	r3, [pc, #84]	@ (8004718 <snakeMove+0x128>)
 80046c4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80046c8:	3301      	adds	r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <snakeMove+0x128>)
 80046ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    	currentScore += 1;
 80046d2:	4b13      	ldr	r3, [pc, #76]	@ (8004720 <snakeMove+0x130>)
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <snakeMove+0x130>)
 80046dc:	801a      	strh	r2, [r3, #0]
    	spawnFood();
 80046de:	f7ff fedf 	bl	80044a0 <spawnFood>
    }

    for (uint8_t k = snake.length - 1; k > 0; k--) { 							//movemos la serpiente
 80046e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <snakeMove+0x128>)
 80046e4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80046e8:	3b01      	subs	r3, #1
 80046ea:	70fb      	strb	r3, [r7, #3]
 80046ec:	e00b      	b.n	8004706 <snakeMove+0x116>
        snake.body[k] = snake.body[k - 1];
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	1e5a      	subs	r2, r3, #1
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	4908      	ldr	r1, [pc, #32]	@ (8004718 <snakeMove+0x128>)
 80046f6:	4808      	ldr	r0, [pc, #32]	@ (8004718 <snakeMove+0x128>)
 80046f8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80046fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t k = snake.length - 1; k > 0; k--) { 							//movemos la serpiente
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	3b01      	subs	r3, #1
 8004704:	70fb      	strb	r3, [r7, #3]
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <snakeMove+0xfe>
    }

    snake.body[0] = nextMove; 													//movemos la cabeza
 800470c:	4a02      	ldr	r2, [pc, #8]	@ (8004718 <snakeMove+0x128>)
 800470e:	883b      	ldrh	r3, [r7, #0]
 8004710:	8013      	strh	r3, [r2, #0]
}
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000200 	.word	0x20000200
 800471c:	20000404 	.word	0x20000404
 8004720:	20000414 	.word	0x20000414

08004724 <snakeDraw>:

// snakeDraw dibuja la serpiente y la comida en pantalla
static void snakeDraw(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0

	fill16(0);
 800472a:	2000      	movs	r0, #0
 800472c:	f7fc fd04 	bl	8001138 <fill16>

    for (uint16_t i = 0; i < snake.length; i++) {
 8004730:	2300      	movs	r3, #0
 8004732:	80fb      	strh	r3, [r7, #6]
 8004734:	e00f      	b.n	8004756 <snakeDraw+0x32>
        setPixel16(snake.body[i].x, snake.body[i].y, 1);
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	4a11      	ldr	r2, [pc, #68]	@ (8004780 <snakeDraw+0x5c>)
 800473a:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	4a0f      	ldr	r2, [pc, #60]	@ (8004780 <snakeDraw+0x5c>)
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4413      	add	r3, r2
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2201      	movs	r2, #1
 800474a:	4619      	mov	r1, r3
 800474c:	f7fc fbb8 	bl	8000ec0 <setPixel16>
    for (uint16_t i = 0; i < snake.length; i++) {
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	3301      	adds	r3, #1
 8004754:	80fb      	strh	r3, [r7, #6]
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <snakeDraw+0x5c>)
 8004758:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800475c:	461a      	mov	r2, r3
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	4293      	cmp	r3, r2
 8004762:	d3e8      	bcc.n	8004736 <snakeDraw+0x12>
    }
    setPixel16(food.pos.x, food.pos.y, 1);
 8004764:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <snakeDraw+0x60>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4a06      	ldr	r2, [pc, #24]	@ (8004784 <snakeDraw+0x60>)
 800476a:	7851      	ldrb	r1, [r2, #1]
 800476c:	2201      	movs	r2, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fba6 	bl	8000ec0 <setPixel16>
    updateDisplay16();
 8004774:	f7fc fc32 	bl	8000fdc <updateDisplay16>
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000200 	.word	0x20000200
 8004784:	20000404 	.word	0x20000404

08004788 <snakeUpdate>:

// snakeUpdate mueve la serpiente segun los comandos del usuario. Devuelve true si la serpiente sigue viva o false si la serpiente choco.
bool snakeUpdate(void) {
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0

	if (snake.snakeStatus == DEAD){
 800478c:	4b2d      	ldr	r3, [pc, #180]	@ (8004844 <snakeUpdate+0xbc>)
 800478e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <snakeUpdate+0x12>
		return false;
 8004796:	2300      	movs	r3, #0
 8004798:	e051      	b.n	800483e <snakeUpdate+0xb6>
	}
// segun el boton que se presione cambia la direccion de la serpiente. Aca se valida que la serpiente no pueda "volver sobre si misma"
    if (readKey(2) && snake.dir != LEFT) snake.dir = RIGHT;
 800479a:	2002      	movs	r0, #2
 800479c:	f7fc fec2 	bl	8001524 <readKey>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <snakeUpdate+0x30>
 80047a6:	4b27      	ldr	r3, [pc, #156]	@ (8004844 <snakeUpdate+0xbc>)
 80047a8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d003      	beq.n	80047b8 <snakeUpdate+0x30>
 80047b0:	4b24      	ldr	r3, [pc, #144]	@ (8004844 <snakeUpdate+0xbc>)
 80047b2:	2203      	movs	r2, #3
 80047b4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    if (readKey(3) && snake.dir != DOWN) snake.dir = UP;
 80047b8:	2003      	movs	r0, #3
 80047ba:	f7fc feb3 	bl	8001524 <readKey>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <snakeUpdate+0x4e>
 80047c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004844 <snakeUpdate+0xbc>)
 80047c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d003      	beq.n	80047d6 <snakeUpdate+0x4e>
 80047ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004844 <snakeUpdate+0xbc>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    if (readKey(4) && snake.dir != RIGHT) snake.dir = LEFT;
 80047d6:	2004      	movs	r0, #4
 80047d8:	f7fc fea4 	bl	8001524 <readKey>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <snakeUpdate+0x6c>
 80047e2:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <snakeUpdate+0xbc>)
 80047e4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d003      	beq.n	80047f4 <snakeUpdate+0x6c>
 80047ec:	4b15      	ldr	r3, [pc, #84]	@ (8004844 <snakeUpdate+0xbc>)
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    if (readKey(5) && snake.dir != UP) snake.dir = DOWN;
 80047f4:	2005      	movs	r0, #5
 80047f6:	f7fc fe95 	bl	8001524 <readKey>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <snakeUpdate+0x8a>
 8004800:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <snakeUpdate+0xbc>)
 8004802:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <snakeUpdate+0x8a>
 800480a:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <snakeUpdate+0xbc>)
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201

//si paso el "Tick" de la serpiente la actualiza
    if ((HAL_GetTick() - snakeSpeed.startTime) >= snakeSpeed.duration) {
 8004812:	f7fc ff13 	bl	800163c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <snakeUpdate+0xc0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1ad2      	subs	r2, r2, r3
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <snakeUpdate+0xc0>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d30a      	bcc.n	800483c <snakeUpdate+0xb4>
        snakeSpeed.startTime = HAL_GetTick();
 8004826:	f7fc ff09 	bl	800163c <HAL_GetTick>
 800482a:	4603      	mov	r3, r0
 800482c:	4a06      	ldr	r2, [pc, #24]	@ (8004848 <snakeUpdate+0xc0>)
 800482e:	6013      	str	r3, [r2, #0]

        snakeMove();
 8004830:	f7ff fede 	bl	80045f0 <snakeMove>
        snakeDraw();
 8004834:	f7ff ff76 	bl	8004724 <snakeDraw>
        return true;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <snakeUpdate+0xb6>

    }
    return true;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000200 	.word	0x20000200
 8004848:	20000408 	.word	0x20000408

0800484c <rand>:
 800484c:	4b16      	ldr	r3, [pc, #88]	@ (80048a8 <rand+0x5c>)
 800484e:	b510      	push	{r4, lr}
 8004850:	681c      	ldr	r4, [r3, #0]
 8004852:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004854:	b9b3      	cbnz	r3, 8004884 <rand+0x38>
 8004856:	2018      	movs	r0, #24
 8004858:	f000 fa42 	bl	8004ce0 <malloc>
 800485c:	4602      	mov	r2, r0
 800485e:	6320      	str	r0, [r4, #48]	@ 0x30
 8004860:	b920      	cbnz	r0, 800486c <rand+0x20>
 8004862:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <rand+0x60>)
 8004864:	4812      	ldr	r0, [pc, #72]	@ (80048b0 <rand+0x64>)
 8004866:	2152      	movs	r1, #82	@ 0x52
 8004868:	f000 f9d2 	bl	8004c10 <__assert_func>
 800486c:	4911      	ldr	r1, [pc, #68]	@ (80048b4 <rand+0x68>)
 800486e:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <rand+0x6c>)
 8004870:	e9c0 1300 	strd	r1, r3, [r0]
 8004874:	4b11      	ldr	r3, [pc, #68]	@ (80048bc <rand+0x70>)
 8004876:	6083      	str	r3, [r0, #8]
 8004878:	230b      	movs	r3, #11
 800487a:	8183      	strh	r3, [r0, #12]
 800487c:	2100      	movs	r1, #0
 800487e:	2001      	movs	r0, #1
 8004880:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004884:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004886:	480e      	ldr	r0, [pc, #56]	@ (80048c0 <rand+0x74>)
 8004888:	690b      	ldr	r3, [r1, #16]
 800488a:	694c      	ldr	r4, [r1, #20]
 800488c:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <rand+0x78>)
 800488e:	4358      	muls	r0, r3
 8004890:	fb02 0004 	mla	r0, r2, r4, r0
 8004894:	fba3 3202 	umull	r3, r2, r3, r2
 8004898:	3301      	adds	r3, #1
 800489a:	eb40 0002 	adc.w	r0, r0, r2
 800489e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80048a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80048a6:	bd10      	pop	{r4, pc}
 80048a8:	200000a8 	.word	0x200000a8
 80048ac:	08005d40 	.word	0x08005d40
 80048b0:	08005d57 	.word	0x08005d57
 80048b4:	abcd330e 	.word	0xabcd330e
 80048b8:	e66d1234 	.word	0xe66d1234
 80048bc:	0005deec 	.word	0x0005deec
 80048c0:	5851f42d 	.word	0x5851f42d
 80048c4:	4c957f2d 	.word	0x4c957f2d

080048c8 <std>:
 80048c8:	2300      	movs	r3, #0
 80048ca:	b510      	push	{r4, lr}
 80048cc:	4604      	mov	r4, r0
 80048ce:	e9c0 3300 	strd	r3, r3, [r0]
 80048d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048d6:	6083      	str	r3, [r0, #8]
 80048d8:	8181      	strh	r1, [r0, #12]
 80048da:	6643      	str	r3, [r0, #100]	@ 0x64
 80048dc:	81c2      	strh	r2, [r0, #14]
 80048de:	6183      	str	r3, [r0, #24]
 80048e0:	4619      	mov	r1, r3
 80048e2:	2208      	movs	r2, #8
 80048e4:	305c      	adds	r0, #92	@ 0x5c
 80048e6:	f000 f916 	bl	8004b16 <memset>
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <std+0x58>)
 80048ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <std+0x5c>)
 80048f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <std+0x60>)
 80048f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048f6:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <std+0x64>)
 80048f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80048fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004930 <std+0x68>)
 80048fc:	6224      	str	r4, [r4, #32]
 80048fe:	429c      	cmp	r4, r3
 8004900:	d006      	beq.n	8004910 <std+0x48>
 8004902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004906:	4294      	cmp	r4, r2
 8004908:	d002      	beq.n	8004910 <std+0x48>
 800490a:	33d0      	adds	r3, #208	@ 0xd0
 800490c:	429c      	cmp	r4, r3
 800490e:	d105      	bne.n	800491c <std+0x54>
 8004910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004918:	f000 b976 	b.w	8004c08 <__retarget_lock_init_recursive>
 800491c:	bd10      	pop	{r4, pc}
 800491e:	bf00      	nop
 8004920:	08004a91 	.word	0x08004a91
 8004924:	08004ab3 	.word	0x08004ab3
 8004928:	08004aeb 	.word	0x08004aeb
 800492c:	08004b0f 	.word	0x08004b0f
 8004930:	20000418 	.word	0x20000418

08004934 <stdio_exit_handler>:
 8004934:	4a02      	ldr	r2, [pc, #8]	@ (8004940 <stdio_exit_handler+0xc>)
 8004936:	4903      	ldr	r1, [pc, #12]	@ (8004944 <stdio_exit_handler+0x10>)
 8004938:	4803      	ldr	r0, [pc, #12]	@ (8004948 <stdio_exit_handler+0x14>)
 800493a:	f000 b869 	b.w	8004a10 <_fwalk_sglue>
 800493e:	bf00      	nop
 8004940:	2000009c 	.word	0x2000009c
 8004944:	0800551d 	.word	0x0800551d
 8004948:	200000ac 	.word	0x200000ac

0800494c <cleanup_stdio>:
 800494c:	6841      	ldr	r1, [r0, #4]
 800494e:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <cleanup_stdio+0x34>)
 8004950:	4299      	cmp	r1, r3
 8004952:	b510      	push	{r4, lr}
 8004954:	4604      	mov	r4, r0
 8004956:	d001      	beq.n	800495c <cleanup_stdio+0x10>
 8004958:	f000 fde0 	bl	800551c <_fflush_r>
 800495c:	68a1      	ldr	r1, [r4, #8]
 800495e:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <cleanup_stdio+0x38>)
 8004960:	4299      	cmp	r1, r3
 8004962:	d002      	beq.n	800496a <cleanup_stdio+0x1e>
 8004964:	4620      	mov	r0, r4
 8004966:	f000 fdd9 	bl	800551c <_fflush_r>
 800496a:	68e1      	ldr	r1, [r4, #12]
 800496c:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <cleanup_stdio+0x3c>)
 800496e:	4299      	cmp	r1, r3
 8004970:	d004      	beq.n	800497c <cleanup_stdio+0x30>
 8004972:	4620      	mov	r0, r4
 8004974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004978:	f000 bdd0 	b.w	800551c <_fflush_r>
 800497c:	bd10      	pop	{r4, pc}
 800497e:	bf00      	nop
 8004980:	20000418 	.word	0x20000418
 8004984:	20000480 	.word	0x20000480
 8004988:	200004e8 	.word	0x200004e8

0800498c <global_stdio_init.part.0>:
 800498c:	b510      	push	{r4, lr}
 800498e:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <global_stdio_init.part.0+0x30>)
 8004990:	4c0b      	ldr	r4, [pc, #44]	@ (80049c0 <global_stdio_init.part.0+0x34>)
 8004992:	4a0c      	ldr	r2, [pc, #48]	@ (80049c4 <global_stdio_init.part.0+0x38>)
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	4620      	mov	r0, r4
 8004998:	2200      	movs	r2, #0
 800499a:	2104      	movs	r1, #4
 800499c:	f7ff ff94 	bl	80048c8 <std>
 80049a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049a4:	2201      	movs	r2, #1
 80049a6:	2109      	movs	r1, #9
 80049a8:	f7ff ff8e 	bl	80048c8 <std>
 80049ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049b0:	2202      	movs	r2, #2
 80049b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b6:	2112      	movs	r1, #18
 80049b8:	f7ff bf86 	b.w	80048c8 <std>
 80049bc:	20000550 	.word	0x20000550
 80049c0:	20000418 	.word	0x20000418
 80049c4:	08004935 	.word	0x08004935

080049c8 <__sfp_lock_acquire>:
 80049c8:	4801      	ldr	r0, [pc, #4]	@ (80049d0 <__sfp_lock_acquire+0x8>)
 80049ca:	f000 b91e 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000559 	.word	0x20000559

080049d4 <__sfp_lock_release>:
 80049d4:	4801      	ldr	r0, [pc, #4]	@ (80049dc <__sfp_lock_release+0x8>)
 80049d6:	f000 b919 	b.w	8004c0c <__retarget_lock_release_recursive>
 80049da:	bf00      	nop
 80049dc:	20000559 	.word	0x20000559

080049e0 <__sinit>:
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4604      	mov	r4, r0
 80049e4:	f7ff fff0 	bl	80049c8 <__sfp_lock_acquire>
 80049e8:	6a23      	ldr	r3, [r4, #32]
 80049ea:	b11b      	cbz	r3, 80049f4 <__sinit+0x14>
 80049ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f0:	f7ff bff0 	b.w	80049d4 <__sfp_lock_release>
 80049f4:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <__sinit+0x28>)
 80049f6:	6223      	str	r3, [r4, #32]
 80049f8:	4b04      	ldr	r3, [pc, #16]	@ (8004a0c <__sinit+0x2c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f5      	bne.n	80049ec <__sinit+0xc>
 8004a00:	f7ff ffc4 	bl	800498c <global_stdio_init.part.0>
 8004a04:	e7f2      	b.n	80049ec <__sinit+0xc>
 8004a06:	bf00      	nop
 8004a08:	0800494d 	.word	0x0800494d
 8004a0c:	20000550 	.word	0x20000550

08004a10 <_fwalk_sglue>:
 8004a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a14:	4607      	mov	r7, r0
 8004a16:	4688      	mov	r8, r1
 8004a18:	4614      	mov	r4, r2
 8004a1a:	2600      	movs	r6, #0
 8004a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a20:	f1b9 0901 	subs.w	r9, r9, #1
 8004a24:	d505      	bpl.n	8004a32 <_fwalk_sglue+0x22>
 8004a26:	6824      	ldr	r4, [r4, #0]
 8004a28:	2c00      	cmp	r4, #0
 8004a2a:	d1f7      	bne.n	8004a1c <_fwalk_sglue+0xc>
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a32:	89ab      	ldrh	r3, [r5, #12]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d907      	bls.n	8004a48 <_fwalk_sglue+0x38>
 8004a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	d003      	beq.n	8004a48 <_fwalk_sglue+0x38>
 8004a40:	4629      	mov	r1, r5
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c0      	blx	r8
 8004a46:	4306      	orrs	r6, r0
 8004a48:	3568      	adds	r5, #104	@ 0x68
 8004a4a:	e7e9      	b.n	8004a20 <_fwalk_sglue+0x10>

08004a4c <siprintf>:
 8004a4c:	b40e      	push	{r1, r2, r3}
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	b09d      	sub	sp, #116	@ 0x74
 8004a52:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004a54:	9002      	str	r0, [sp, #8]
 8004a56:	9006      	str	r0, [sp, #24]
 8004a58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a5c:	480a      	ldr	r0, [pc, #40]	@ (8004a88 <siprintf+0x3c>)
 8004a5e:	9107      	str	r1, [sp, #28]
 8004a60:	9104      	str	r1, [sp, #16]
 8004a62:	490a      	ldr	r1, [pc, #40]	@ (8004a8c <siprintf+0x40>)
 8004a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a68:	9105      	str	r1, [sp, #20]
 8004a6a:	2400      	movs	r4, #0
 8004a6c:	a902      	add	r1, sp, #8
 8004a6e:	6800      	ldr	r0, [r0, #0]
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004a74:	f000 fa46 	bl	8004f04 <_svfiprintf_r>
 8004a78:	9b02      	ldr	r3, [sp, #8]
 8004a7a:	701c      	strb	r4, [r3, #0]
 8004a7c:	b01d      	add	sp, #116	@ 0x74
 8004a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a82:	b003      	add	sp, #12
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	200000a8 	.word	0x200000a8
 8004a8c:	ffff0208 	.word	0xffff0208

08004a90 <__sread>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	460c      	mov	r4, r1
 8004a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a98:	f000 f868 	bl	8004b6c <_read_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	bfab      	itete	ge
 8004aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8004aa4:	181b      	addge	r3, r3, r0
 8004aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004aaa:	bfac      	ite	ge
 8004aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004aae:	81a3      	strhlt	r3, [r4, #12]
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <__swrite>:
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	461f      	mov	r7, r3
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	05db      	lsls	r3, r3, #23
 8004abc:	4605      	mov	r5, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	d505      	bpl.n	8004ad0 <__swrite+0x1e>
 8004ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac8:	2302      	movs	r3, #2
 8004aca:	2200      	movs	r2, #0
 8004acc:	f000 f83c 	bl	8004b48 <_lseek_r>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	4632      	mov	r2, r6
 8004ade:	463b      	mov	r3, r7
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae6:	f000 b853 	b.w	8004b90 <_write_r>

08004aea <__sseek>:
 8004aea:	b510      	push	{r4, lr}
 8004aec:	460c      	mov	r4, r1
 8004aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af2:	f000 f829 	bl	8004b48 <_lseek_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	bf15      	itete	ne
 8004afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b06:	81a3      	strheq	r3, [r4, #12]
 8004b08:	bf18      	it	ne
 8004b0a:	81a3      	strhne	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__sclose>:
 8004b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b12:	f000 b809 	b.w	8004b28 <_close_r>

08004b16 <memset>:
 8004b16:	4402      	add	r2, r0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d100      	bne.n	8004b20 <memset+0xa>
 8004b1e:	4770      	bx	lr
 8004b20:	f803 1b01 	strb.w	r1, [r3], #1
 8004b24:	e7f9      	b.n	8004b1a <memset+0x4>
	...

08004b28 <_close_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d06      	ldr	r5, [pc, #24]	@ (8004b44 <_close_r+0x1c>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	f7fb ff5e 	bl	80009f4 <_close>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_close_r+0x1a>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_close_r+0x1a>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	20000554 	.word	0x20000554

08004b48 <_lseek_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d07      	ldr	r5, [pc, #28]	@ (8004b68 <_lseek_r+0x20>)
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fb ff73 	bl	8000a42 <_lseek>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_lseek_r+0x1e>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_lseek_r+0x1e>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	20000554 	.word	0x20000554

08004b6c <_read_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d07      	ldr	r5, [pc, #28]	@ (8004b8c <_read_r+0x20>)
 8004b70:	4604      	mov	r4, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fb ff01 	bl	8000982 <_read>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_read_r+0x1e>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_read_r+0x1e>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	20000554 	.word	0x20000554

08004b90 <_write_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d07      	ldr	r5, [pc, #28]	@ (8004bb0 <_write_r+0x20>)
 8004b94:	4604      	mov	r4, r0
 8004b96:	4608      	mov	r0, r1
 8004b98:	4611      	mov	r1, r2
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	602a      	str	r2, [r5, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7fb ff0c 	bl	80009bc <_write>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_write_r+0x1e>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_write_r+0x1e>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20000554 	.word	0x20000554

08004bb4 <__errno>:
 8004bb4:	4b01      	ldr	r3, [pc, #4]	@ (8004bbc <__errno+0x8>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	200000a8 	.word	0x200000a8

08004bc0 <__libc_init_array>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004bf8 <__libc_init_array+0x38>)
 8004bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004bfc <__libc_init_array+0x3c>)
 8004bc6:	1b64      	subs	r4, r4, r5
 8004bc8:	10a4      	asrs	r4, r4, #2
 8004bca:	2600      	movs	r6, #0
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	d109      	bne.n	8004be4 <__libc_init_array+0x24>
 8004bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004c00 <__libc_init_array+0x40>)
 8004bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004c04 <__libc_init_array+0x44>)
 8004bd4:	f000 ffee 	bl	8005bb4 <_init>
 8004bd8:	1b64      	subs	r4, r4, r5
 8004bda:	10a4      	asrs	r4, r4, #2
 8004bdc:	2600      	movs	r6, #0
 8004bde:	42a6      	cmp	r6, r4
 8004be0:	d105      	bne.n	8004bee <__libc_init_array+0x2e>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be8:	4798      	blx	r3
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7ee      	b.n	8004bcc <__libc_init_array+0xc>
 8004bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf2:	4798      	blx	r3
 8004bf4:	3601      	adds	r6, #1
 8004bf6:	e7f2      	b.n	8004bde <__libc_init_array+0x1e>
 8004bf8:	08005e28 	.word	0x08005e28
 8004bfc:	08005e28 	.word	0x08005e28
 8004c00:	08005e28 	.word	0x08005e28
 8004c04:	08005e2c 	.word	0x08005e2c

08004c08 <__retarget_lock_init_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_acquire_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__retarget_lock_release_recursive>:
 8004c0c:	4770      	bx	lr
	...

08004c10 <__assert_func>:
 8004c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c12:	4614      	mov	r4, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <__assert_func+0x2c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	68d8      	ldr	r0, [r3, #12]
 8004c1e:	b14c      	cbz	r4, 8004c34 <__assert_func+0x24>
 8004c20:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <__assert_func+0x30>)
 8004c22:	9100      	str	r1, [sp, #0]
 8004c24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c28:	4906      	ldr	r1, [pc, #24]	@ (8004c44 <__assert_func+0x34>)
 8004c2a:	462b      	mov	r3, r5
 8004c2c:	f000 fc9e 	bl	800556c <fiprintf>
 8004c30:	f000 fce6 	bl	8005600 <abort>
 8004c34:	4b04      	ldr	r3, [pc, #16]	@ (8004c48 <__assert_func+0x38>)
 8004c36:	461c      	mov	r4, r3
 8004c38:	e7f3      	b.n	8004c22 <__assert_func+0x12>
 8004c3a:	bf00      	nop
 8004c3c:	200000a8 	.word	0x200000a8
 8004c40:	08005daf 	.word	0x08005daf
 8004c44:	08005dbc 	.word	0x08005dbc
 8004c48:	08005dea 	.word	0x08005dea

08004c4c <_free_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4605      	mov	r5, r0
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d041      	beq.n	8004cd8 <_free_r+0x8c>
 8004c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c58:	1f0c      	subs	r4, r1, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfb8      	it	lt
 8004c5e:	18e4      	addlt	r4, r4, r3
 8004c60:	f000 f8e8 	bl	8004e34 <__malloc_lock>
 8004c64:	4a1d      	ldr	r2, [pc, #116]	@ (8004cdc <_free_r+0x90>)
 8004c66:	6813      	ldr	r3, [r2, #0]
 8004c68:	b933      	cbnz	r3, 8004c78 <_free_r+0x2c>
 8004c6a:	6063      	str	r3, [r4, #4]
 8004c6c:	6014      	str	r4, [r2, #0]
 8004c6e:	4628      	mov	r0, r5
 8004c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c74:	f000 b8e4 	b.w	8004e40 <__malloc_unlock>
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	d908      	bls.n	8004c8e <_free_r+0x42>
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	1821      	adds	r1, r4, r0
 8004c80:	428b      	cmp	r3, r1
 8004c82:	bf01      	itttt	eq
 8004c84:	6819      	ldreq	r1, [r3, #0]
 8004c86:	685b      	ldreq	r3, [r3, #4]
 8004c88:	1809      	addeq	r1, r1, r0
 8004c8a:	6021      	streq	r1, [r4, #0]
 8004c8c:	e7ed      	b.n	8004c6a <_free_r+0x1e>
 8004c8e:	461a      	mov	r2, r3
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b10b      	cbz	r3, 8004c98 <_free_r+0x4c>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d9fa      	bls.n	8004c8e <_free_r+0x42>
 8004c98:	6811      	ldr	r1, [r2, #0]
 8004c9a:	1850      	adds	r0, r2, r1
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d10b      	bne.n	8004cb8 <_free_r+0x6c>
 8004ca0:	6820      	ldr	r0, [r4, #0]
 8004ca2:	4401      	add	r1, r0
 8004ca4:	1850      	adds	r0, r2, r1
 8004ca6:	4283      	cmp	r3, r0
 8004ca8:	6011      	str	r1, [r2, #0]
 8004caa:	d1e0      	bne.n	8004c6e <_free_r+0x22>
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	6053      	str	r3, [r2, #4]
 8004cb2:	4408      	add	r0, r1
 8004cb4:	6010      	str	r0, [r2, #0]
 8004cb6:	e7da      	b.n	8004c6e <_free_r+0x22>
 8004cb8:	d902      	bls.n	8004cc0 <_free_r+0x74>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	602b      	str	r3, [r5, #0]
 8004cbe:	e7d6      	b.n	8004c6e <_free_r+0x22>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	1821      	adds	r1, r4, r0
 8004cc4:	428b      	cmp	r3, r1
 8004cc6:	bf04      	itt	eq
 8004cc8:	6819      	ldreq	r1, [r3, #0]
 8004cca:	685b      	ldreq	r3, [r3, #4]
 8004ccc:	6063      	str	r3, [r4, #4]
 8004cce:	bf04      	itt	eq
 8004cd0:	1809      	addeq	r1, r1, r0
 8004cd2:	6021      	streq	r1, [r4, #0]
 8004cd4:	6054      	str	r4, [r2, #4]
 8004cd6:	e7ca      	b.n	8004c6e <_free_r+0x22>
 8004cd8:	bd38      	pop	{r3, r4, r5, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000560 	.word	0x20000560

08004ce0 <malloc>:
 8004ce0:	4b02      	ldr	r3, [pc, #8]	@ (8004cec <malloc+0xc>)
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	f000 b825 	b.w	8004d34 <_malloc_r>
 8004cea:	bf00      	nop
 8004cec:	200000a8 	.word	0x200000a8

08004cf0 <sbrk_aligned>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4e0f      	ldr	r6, [pc, #60]	@ (8004d30 <sbrk_aligned+0x40>)
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	6831      	ldr	r1, [r6, #0]
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b911      	cbnz	r1, 8004d02 <sbrk_aligned+0x12>
 8004cfc:	f000 fc62 	bl	80055c4 <_sbrk_r>
 8004d00:	6030      	str	r0, [r6, #0]
 8004d02:	4621      	mov	r1, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 fc5d 	bl	80055c4 <_sbrk_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d103      	bne.n	8004d16 <sbrk_aligned+0x26>
 8004d0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d12:	4620      	mov	r0, r4
 8004d14:	bd70      	pop	{r4, r5, r6, pc}
 8004d16:	1cc4      	adds	r4, r0, #3
 8004d18:	f024 0403 	bic.w	r4, r4, #3
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d0f8      	beq.n	8004d12 <sbrk_aligned+0x22>
 8004d20:	1a21      	subs	r1, r4, r0
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fc4e 	bl	80055c4 <_sbrk_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d1f2      	bne.n	8004d12 <sbrk_aligned+0x22>
 8004d2c:	e7ef      	b.n	8004d0e <sbrk_aligned+0x1e>
 8004d2e:	bf00      	nop
 8004d30:	2000055c 	.word	0x2000055c

08004d34 <_malloc_r>:
 8004d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d38:	1ccd      	adds	r5, r1, #3
 8004d3a:	f025 0503 	bic.w	r5, r5, #3
 8004d3e:	3508      	adds	r5, #8
 8004d40:	2d0c      	cmp	r5, #12
 8004d42:	bf38      	it	cc
 8004d44:	250c      	movcc	r5, #12
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	4606      	mov	r6, r0
 8004d4a:	db01      	blt.n	8004d50 <_malloc_r+0x1c>
 8004d4c:	42a9      	cmp	r1, r5
 8004d4e:	d904      	bls.n	8004d5a <_malloc_r+0x26>
 8004d50:	230c      	movs	r3, #12
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e30 <_malloc_r+0xfc>
 8004d5e:	f000 f869 	bl	8004e34 <__malloc_lock>
 8004d62:	f8d8 3000 	ldr.w	r3, [r8]
 8004d66:	461c      	mov	r4, r3
 8004d68:	bb44      	cbnz	r4, 8004dbc <_malloc_r+0x88>
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f7ff ffbf 	bl	8004cf0 <sbrk_aligned>
 8004d72:	1c43      	adds	r3, r0, #1
 8004d74:	4604      	mov	r4, r0
 8004d76:	d158      	bne.n	8004e2a <_malloc_r+0xf6>
 8004d78:	f8d8 4000 	ldr.w	r4, [r8]
 8004d7c:	4627      	mov	r7, r4
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d143      	bne.n	8004e0a <_malloc_r+0xd6>
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	d04b      	beq.n	8004e1e <_malloc_r+0xea>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	eb04 0903 	add.w	r9, r4, r3
 8004d90:	f000 fc18 	bl	80055c4 <_sbrk_r>
 8004d94:	4581      	cmp	r9, r0
 8004d96:	d142      	bne.n	8004e1e <_malloc_r+0xea>
 8004d98:	6821      	ldr	r1, [r4, #0]
 8004d9a:	1a6d      	subs	r5, r5, r1
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f7ff ffa6 	bl	8004cf0 <sbrk_aligned>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d03a      	beq.n	8004e1e <_malloc_r+0xea>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	442b      	add	r3, r5
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	f8d8 3000 	ldr.w	r3, [r8]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	bb62      	cbnz	r2, 8004e10 <_malloc_r+0xdc>
 8004db6:	f8c8 7000 	str.w	r7, [r8]
 8004dba:	e00f      	b.n	8004ddc <_malloc_r+0xa8>
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	1b52      	subs	r2, r2, r5
 8004dc0:	d420      	bmi.n	8004e04 <_malloc_r+0xd0>
 8004dc2:	2a0b      	cmp	r2, #11
 8004dc4:	d917      	bls.n	8004df6 <_malloc_r+0xc2>
 8004dc6:	1961      	adds	r1, r4, r5
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	6025      	str	r5, [r4, #0]
 8004dcc:	bf18      	it	ne
 8004dce:	6059      	strne	r1, [r3, #4]
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	bf08      	it	eq
 8004dd4:	f8c8 1000 	streq.w	r1, [r8]
 8004dd8:	5162      	str	r2, [r4, r5]
 8004dda:	604b      	str	r3, [r1, #4]
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 f82f 	bl	8004e40 <__malloc_unlock>
 8004de2:	f104 000b 	add.w	r0, r4, #11
 8004de6:	1d23      	adds	r3, r4, #4
 8004de8:	f020 0007 	bic.w	r0, r0, #7
 8004dec:	1ac2      	subs	r2, r0, r3
 8004dee:	bf1c      	itt	ne
 8004df0:	1a1b      	subne	r3, r3, r0
 8004df2:	50a3      	strne	r3, [r4, r2]
 8004df4:	e7af      	b.n	8004d56 <_malloc_r+0x22>
 8004df6:	6862      	ldr	r2, [r4, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	bf0c      	ite	eq
 8004dfc:	f8c8 2000 	streq.w	r2, [r8]
 8004e00:	605a      	strne	r2, [r3, #4]
 8004e02:	e7eb      	b.n	8004ddc <_malloc_r+0xa8>
 8004e04:	4623      	mov	r3, r4
 8004e06:	6864      	ldr	r4, [r4, #4]
 8004e08:	e7ae      	b.n	8004d68 <_malloc_r+0x34>
 8004e0a:	463c      	mov	r4, r7
 8004e0c:	687f      	ldr	r7, [r7, #4]
 8004e0e:	e7b6      	b.n	8004d7e <_malloc_r+0x4a>
 8004e10:	461a      	mov	r2, r3
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d1fb      	bne.n	8004e10 <_malloc_r+0xdc>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6053      	str	r3, [r2, #4]
 8004e1c:	e7de      	b.n	8004ddc <_malloc_r+0xa8>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	4630      	mov	r0, r6
 8004e24:	f000 f80c 	bl	8004e40 <__malloc_unlock>
 8004e28:	e794      	b.n	8004d54 <_malloc_r+0x20>
 8004e2a:	6005      	str	r5, [r0, #0]
 8004e2c:	e7d6      	b.n	8004ddc <_malloc_r+0xa8>
 8004e2e:	bf00      	nop
 8004e30:	20000560 	.word	0x20000560

08004e34 <__malloc_lock>:
 8004e34:	4801      	ldr	r0, [pc, #4]	@ (8004e3c <__malloc_lock+0x8>)
 8004e36:	f7ff bee8 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	20000558 	.word	0x20000558

08004e40 <__malloc_unlock>:
 8004e40:	4801      	ldr	r0, [pc, #4]	@ (8004e48 <__malloc_unlock+0x8>)
 8004e42:	f7ff bee3 	b.w	8004c0c <__retarget_lock_release_recursive>
 8004e46:	bf00      	nop
 8004e48:	20000558 	.word	0x20000558

08004e4c <__ssputs_r>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	688e      	ldr	r6, [r1, #8]
 8004e52:	461f      	mov	r7, r3
 8004e54:	42be      	cmp	r6, r7
 8004e56:	680b      	ldr	r3, [r1, #0]
 8004e58:	4682      	mov	sl, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4690      	mov	r8, r2
 8004e5e:	d82d      	bhi.n	8004ebc <__ssputs_r+0x70>
 8004e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e68:	d026      	beq.n	8004eb8 <__ssputs_r+0x6c>
 8004e6a:	6965      	ldr	r5, [r4, #20]
 8004e6c:	6909      	ldr	r1, [r1, #16]
 8004e6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e72:	eba3 0901 	sub.w	r9, r3, r1
 8004e76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e7a:	1c7b      	adds	r3, r7, #1
 8004e7c:	444b      	add	r3, r9
 8004e7e:	106d      	asrs	r5, r5, #1
 8004e80:	429d      	cmp	r5, r3
 8004e82:	bf38      	it	cc
 8004e84:	461d      	movcc	r5, r3
 8004e86:	0553      	lsls	r3, r2, #21
 8004e88:	d527      	bpl.n	8004eda <__ssputs_r+0x8e>
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7ff ff52 	bl	8004d34 <_malloc_r>
 8004e90:	4606      	mov	r6, r0
 8004e92:	b360      	cbz	r0, 8004eee <__ssputs_r+0xa2>
 8004e94:	6921      	ldr	r1, [r4, #16]
 8004e96:	464a      	mov	r2, r9
 8004e98:	f000 fba4 	bl	80055e4 <memcpy>
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6126      	str	r6, [r4, #16]
 8004eaa:	6165      	str	r5, [r4, #20]
 8004eac:	444e      	add	r6, r9
 8004eae:	eba5 0509 	sub.w	r5, r5, r9
 8004eb2:	6026      	str	r6, [r4, #0]
 8004eb4:	60a5      	str	r5, [r4, #8]
 8004eb6:	463e      	mov	r6, r7
 8004eb8:	42be      	cmp	r6, r7
 8004eba:	d900      	bls.n	8004ebe <__ssputs_r+0x72>
 8004ebc:	463e      	mov	r6, r7
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	f000 fb64 	bl	8005590 <memmove>
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	1b9b      	subs	r3, r3, r6
 8004ecc:	60a3      	str	r3, [r4, #8]
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	4433      	add	r3, r6
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	462a      	mov	r2, r5
 8004edc:	f000 fb97 	bl	800560e <_realloc_r>
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d1e0      	bne.n	8004ea8 <__ssputs_r+0x5c>
 8004ee6:	6921      	ldr	r1, [r4, #16]
 8004ee8:	4650      	mov	r0, sl
 8004eea:	f7ff feaf 	bl	8004c4c <_free_r>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	f8ca 3000 	str.w	r3, [sl]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f00:	e7e9      	b.n	8004ed6 <__ssputs_r+0x8a>
	...

08004f04 <_svfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4698      	mov	r8, r3
 8004f0a:	898b      	ldrh	r3, [r1, #12]
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	b09d      	sub	sp, #116	@ 0x74
 8004f10:	4607      	mov	r7, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	d510      	bpl.n	8004f3a <_svfiprintf_r+0x36>
 8004f18:	690b      	ldr	r3, [r1, #16]
 8004f1a:	b973      	cbnz	r3, 8004f3a <_svfiprintf_r+0x36>
 8004f1c:	2140      	movs	r1, #64	@ 0x40
 8004f1e:	f7ff ff09 	bl	8004d34 <_malloc_r>
 8004f22:	6028      	str	r0, [r5, #0]
 8004f24:	6128      	str	r0, [r5, #16]
 8004f26:	b930      	cbnz	r0, 8004f36 <_svfiprintf_r+0x32>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f30:	b01d      	add	sp, #116	@ 0x74
 8004f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f36:	2340      	movs	r3, #64	@ 0x40
 8004f38:	616b      	str	r3, [r5, #20]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f3e:	2320      	movs	r3, #32
 8004f40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f48:	2330      	movs	r3, #48	@ 0x30
 8004f4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050e8 <_svfiprintf_r+0x1e4>
 8004f4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f52:	f04f 0901 	mov.w	r9, #1
 8004f56:	4623      	mov	r3, r4
 8004f58:	469a      	mov	sl, r3
 8004f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f5e:	b10a      	cbz	r2, 8004f64 <_svfiprintf_r+0x60>
 8004f60:	2a25      	cmp	r2, #37	@ 0x25
 8004f62:	d1f9      	bne.n	8004f58 <_svfiprintf_r+0x54>
 8004f64:	ebba 0b04 	subs.w	fp, sl, r4
 8004f68:	d00b      	beq.n	8004f82 <_svfiprintf_r+0x7e>
 8004f6a:	465b      	mov	r3, fp
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4638      	mov	r0, r7
 8004f72:	f7ff ff6b 	bl	8004e4c <__ssputs_r>
 8004f76:	3001      	adds	r0, #1
 8004f78:	f000 80a7 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f7e:	445a      	add	r2, fp
 8004f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f82:	f89a 3000 	ldrb.w	r3, [sl]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 809f 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f96:	f10a 0a01 	add.w	sl, sl, #1
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	9307      	str	r3, [sp, #28]
 8004f9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fa4:	4654      	mov	r4, sl
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fac:	484e      	ldr	r0, [pc, #312]	@ (80050e8 <_svfiprintf_r+0x1e4>)
 8004fae:	f7fb f937 	bl	8000220 <memchr>
 8004fb2:	9a04      	ldr	r2, [sp, #16]
 8004fb4:	b9d8      	cbnz	r0, 8004fee <_svfiprintf_r+0xea>
 8004fb6:	06d0      	lsls	r0, r2, #27
 8004fb8:	bf44      	itt	mi
 8004fba:	2320      	movmi	r3, #32
 8004fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc0:	0711      	lsls	r1, r2, #28
 8004fc2:	bf44      	itt	mi
 8004fc4:	232b      	movmi	r3, #43	@ 0x2b
 8004fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fca:	f89a 3000 	ldrb.w	r3, [sl]
 8004fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fd0:	d015      	beq.n	8004ffe <_svfiprintf_r+0xfa>
 8004fd2:	9a07      	ldr	r2, [sp, #28]
 8004fd4:	4654      	mov	r4, sl
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f04f 0c0a 	mov.w	ip, #10
 8004fdc:	4621      	mov	r1, r4
 8004fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe2:	3b30      	subs	r3, #48	@ 0x30
 8004fe4:	2b09      	cmp	r3, #9
 8004fe6:	d94b      	bls.n	8005080 <_svfiprintf_r+0x17c>
 8004fe8:	b1b0      	cbz	r0, 8005018 <_svfiprintf_r+0x114>
 8004fea:	9207      	str	r2, [sp, #28]
 8004fec:	e014      	b.n	8005018 <_svfiprintf_r+0x114>
 8004fee:	eba0 0308 	sub.w	r3, r0, r8
 8004ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	46a2      	mov	sl, r4
 8004ffc:	e7d2      	b.n	8004fa4 <_svfiprintf_r+0xa0>
 8004ffe:	9b03      	ldr	r3, [sp, #12]
 8005000:	1d19      	adds	r1, r3, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	9103      	str	r1, [sp, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfbb      	ittet	lt
 800500a:	425b      	neglt	r3, r3
 800500c:	f042 0202 	orrlt.w	r2, r2, #2
 8005010:	9307      	strge	r3, [sp, #28]
 8005012:	9307      	strlt	r3, [sp, #28]
 8005014:	bfb8      	it	lt
 8005016:	9204      	strlt	r2, [sp, #16]
 8005018:	7823      	ldrb	r3, [r4, #0]
 800501a:	2b2e      	cmp	r3, #46	@ 0x2e
 800501c:	d10a      	bne.n	8005034 <_svfiprintf_r+0x130>
 800501e:	7863      	ldrb	r3, [r4, #1]
 8005020:	2b2a      	cmp	r3, #42	@ 0x2a
 8005022:	d132      	bne.n	800508a <_svfiprintf_r+0x186>
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	9203      	str	r2, [sp, #12]
 800502c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005030:	3402      	adds	r4, #2
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050f8 <_svfiprintf_r+0x1f4>
 8005038:	7821      	ldrb	r1, [r4, #0]
 800503a:	2203      	movs	r2, #3
 800503c:	4650      	mov	r0, sl
 800503e:	f7fb f8ef 	bl	8000220 <memchr>
 8005042:	b138      	cbz	r0, 8005054 <_svfiprintf_r+0x150>
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	eba0 000a 	sub.w	r0, r0, sl
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	4082      	lsls	r2, r0
 800504e:	4313      	orrs	r3, r2
 8005050:	3401      	adds	r4, #1
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005058:	4824      	ldr	r0, [pc, #144]	@ (80050ec <_svfiprintf_r+0x1e8>)
 800505a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800505e:	2206      	movs	r2, #6
 8005060:	f7fb f8de 	bl	8000220 <memchr>
 8005064:	2800      	cmp	r0, #0
 8005066:	d036      	beq.n	80050d6 <_svfiprintf_r+0x1d2>
 8005068:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <_svfiprintf_r+0x1ec>)
 800506a:	bb1b      	cbnz	r3, 80050b4 <_svfiprintf_r+0x1b0>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	3307      	adds	r3, #7
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	3308      	adds	r3, #8
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800507a:	4433      	add	r3, r6
 800507c:	9309      	str	r3, [sp, #36]	@ 0x24
 800507e:	e76a      	b.n	8004f56 <_svfiprintf_r+0x52>
 8005080:	fb0c 3202 	mla	r2, ip, r2, r3
 8005084:	460c      	mov	r4, r1
 8005086:	2001      	movs	r0, #1
 8005088:	e7a8      	b.n	8004fdc <_svfiprintf_r+0xd8>
 800508a:	2300      	movs	r3, #0
 800508c:	3401      	adds	r4, #1
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	4619      	mov	r1, r3
 8005092:	f04f 0c0a 	mov.w	ip, #10
 8005096:	4620      	mov	r0, r4
 8005098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509c:	3a30      	subs	r2, #48	@ 0x30
 800509e:	2a09      	cmp	r2, #9
 80050a0:	d903      	bls.n	80050aa <_svfiprintf_r+0x1a6>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0c6      	beq.n	8005034 <_svfiprintf_r+0x130>
 80050a6:	9105      	str	r1, [sp, #20]
 80050a8:	e7c4      	b.n	8005034 <_svfiprintf_r+0x130>
 80050aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ae:	4604      	mov	r4, r0
 80050b0:	2301      	movs	r3, #1
 80050b2:	e7f0      	b.n	8005096 <_svfiprintf_r+0x192>
 80050b4:	ab03      	add	r3, sp, #12
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	462a      	mov	r2, r5
 80050ba:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <_svfiprintf_r+0x1f0>)
 80050bc:	a904      	add	r1, sp, #16
 80050be:	4638      	mov	r0, r7
 80050c0:	f3af 8000 	nop.w
 80050c4:	1c42      	adds	r2, r0, #1
 80050c6:	4606      	mov	r6, r0
 80050c8:	d1d6      	bne.n	8005078 <_svfiprintf_r+0x174>
 80050ca:	89ab      	ldrh	r3, [r5, #12]
 80050cc:	065b      	lsls	r3, r3, #25
 80050ce:	f53f af2d 	bmi.w	8004f2c <_svfiprintf_r+0x28>
 80050d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050d4:	e72c      	b.n	8004f30 <_svfiprintf_r+0x2c>
 80050d6:	ab03      	add	r3, sp, #12
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	462a      	mov	r2, r5
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <_svfiprintf_r+0x1f0>)
 80050de:	a904      	add	r1, sp, #16
 80050e0:	4638      	mov	r0, r7
 80050e2:	f000 f879 	bl	80051d8 <_printf_i>
 80050e6:	e7ed      	b.n	80050c4 <_svfiprintf_r+0x1c0>
 80050e8:	08005deb 	.word	0x08005deb
 80050ec:	08005df5 	.word	0x08005df5
 80050f0:	00000000 	.word	0x00000000
 80050f4:	08004e4d 	.word	0x08004e4d
 80050f8:	08005df1 	.word	0x08005df1

080050fc <_printf_common>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	4616      	mov	r6, r2
 8005102:	4698      	mov	r8, r3
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800510c:	4293      	cmp	r3, r2
 800510e:	bfb8      	it	lt
 8005110:	4613      	movlt	r3, r2
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005118:	4607      	mov	r7, r0
 800511a:	460c      	mov	r4, r1
 800511c:	b10a      	cbz	r2, 8005122 <_printf_common+0x26>
 800511e:	3301      	adds	r3, #1
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0699      	lsls	r1, r3, #26
 8005126:	bf42      	ittt	mi
 8005128:	6833      	ldrmi	r3, [r6, #0]
 800512a:	3302      	addmi	r3, #2
 800512c:	6033      	strmi	r3, [r6, #0]
 800512e:	6825      	ldr	r5, [r4, #0]
 8005130:	f015 0506 	ands.w	r5, r5, #6
 8005134:	d106      	bne.n	8005144 <_printf_common+0x48>
 8005136:	f104 0a19 	add.w	sl, r4, #25
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	6832      	ldr	r2, [r6, #0]
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	42ab      	cmp	r3, r5
 8005142:	dc26      	bgt.n	8005192 <_printf_common+0x96>
 8005144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	3b00      	subs	r3, #0
 800514c:	bf18      	it	ne
 800514e:	2301      	movne	r3, #1
 8005150:	0692      	lsls	r2, r2, #26
 8005152:	d42b      	bmi.n	80051ac <_printf_common+0xb0>
 8005154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005158:	4641      	mov	r1, r8
 800515a:	4638      	mov	r0, r7
 800515c:	47c8      	blx	r9
 800515e:	3001      	adds	r0, #1
 8005160:	d01e      	beq.n	80051a0 <_printf_common+0xa4>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	6922      	ldr	r2, [r4, #16]
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	2b04      	cmp	r3, #4
 800516c:	bf02      	ittt	eq
 800516e:	68e5      	ldreq	r5, [r4, #12]
 8005170:	6833      	ldreq	r3, [r6, #0]
 8005172:	1aed      	subeq	r5, r5, r3
 8005174:	68a3      	ldr	r3, [r4, #8]
 8005176:	bf0c      	ite	eq
 8005178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800517c:	2500      	movne	r5, #0
 800517e:	4293      	cmp	r3, r2
 8005180:	bfc4      	itt	gt
 8005182:	1a9b      	subgt	r3, r3, r2
 8005184:	18ed      	addgt	r5, r5, r3
 8005186:	2600      	movs	r6, #0
 8005188:	341a      	adds	r4, #26
 800518a:	42b5      	cmp	r5, r6
 800518c:	d11a      	bne.n	80051c4 <_printf_common+0xc8>
 800518e:	2000      	movs	r0, #0
 8005190:	e008      	b.n	80051a4 <_printf_common+0xa8>
 8005192:	2301      	movs	r3, #1
 8005194:	4652      	mov	r2, sl
 8005196:	4641      	mov	r1, r8
 8005198:	4638      	mov	r0, r7
 800519a:	47c8      	blx	r9
 800519c:	3001      	adds	r0, #1
 800519e:	d103      	bne.n	80051a8 <_printf_common+0xac>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	3501      	adds	r5, #1
 80051aa:	e7c6      	b.n	800513a <_printf_common+0x3e>
 80051ac:	18e1      	adds	r1, r4, r3
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	2030      	movs	r0, #48	@ 0x30
 80051b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051b6:	4422      	add	r2, r4
 80051b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051c0:	3302      	adds	r3, #2
 80051c2:	e7c7      	b.n	8005154 <_printf_common+0x58>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4622      	mov	r2, r4
 80051c8:	4641      	mov	r1, r8
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c8      	blx	r9
 80051ce:	3001      	adds	r0, #1
 80051d0:	d0e6      	beq.n	80051a0 <_printf_common+0xa4>
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7d9      	b.n	800518a <_printf_common+0x8e>
	...

080051d8 <_printf_i>:
 80051d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	7e0f      	ldrb	r7, [r1, #24]
 80051de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051e0:	2f78      	cmp	r7, #120	@ 0x78
 80051e2:	4691      	mov	r9, r2
 80051e4:	4680      	mov	r8, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	469a      	mov	sl, r3
 80051ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ee:	d807      	bhi.n	8005200 <_printf_i+0x28>
 80051f0:	2f62      	cmp	r7, #98	@ 0x62
 80051f2:	d80a      	bhi.n	800520a <_printf_i+0x32>
 80051f4:	2f00      	cmp	r7, #0
 80051f6:	f000 80d1 	beq.w	800539c <_printf_i+0x1c4>
 80051fa:	2f58      	cmp	r7, #88	@ 0x58
 80051fc:	f000 80b8 	beq.w	8005370 <_printf_i+0x198>
 8005200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005208:	e03a      	b.n	8005280 <_printf_i+0xa8>
 800520a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800520e:	2b15      	cmp	r3, #21
 8005210:	d8f6      	bhi.n	8005200 <_printf_i+0x28>
 8005212:	a101      	add	r1, pc, #4	@ (adr r1, 8005218 <_printf_i+0x40>)
 8005214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005218:	08005271 	.word	0x08005271
 800521c:	08005285 	.word	0x08005285
 8005220:	08005201 	.word	0x08005201
 8005224:	08005201 	.word	0x08005201
 8005228:	08005201 	.word	0x08005201
 800522c:	08005201 	.word	0x08005201
 8005230:	08005285 	.word	0x08005285
 8005234:	08005201 	.word	0x08005201
 8005238:	08005201 	.word	0x08005201
 800523c:	08005201 	.word	0x08005201
 8005240:	08005201 	.word	0x08005201
 8005244:	08005383 	.word	0x08005383
 8005248:	080052af 	.word	0x080052af
 800524c:	0800533d 	.word	0x0800533d
 8005250:	08005201 	.word	0x08005201
 8005254:	08005201 	.word	0x08005201
 8005258:	080053a5 	.word	0x080053a5
 800525c:	08005201 	.word	0x08005201
 8005260:	080052af 	.word	0x080052af
 8005264:	08005201 	.word	0x08005201
 8005268:	08005201 	.word	0x08005201
 800526c:	08005345 	.word	0x08005345
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6032      	str	r2, [r6, #0]
 8005278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800527c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005280:	2301      	movs	r3, #1
 8005282:	e09c      	b.n	80053be <_printf_i+0x1e6>
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	6820      	ldr	r0, [r4, #0]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	6031      	str	r1, [r6, #0]
 800528c:	0606      	lsls	r6, r0, #24
 800528e:	d501      	bpl.n	8005294 <_printf_i+0xbc>
 8005290:	681d      	ldr	r5, [r3, #0]
 8005292:	e003      	b.n	800529c <_printf_i+0xc4>
 8005294:	0645      	lsls	r5, r0, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0xb8>
 8005298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800529c:	2d00      	cmp	r5, #0
 800529e:	da03      	bge.n	80052a8 <_printf_i+0xd0>
 80052a0:	232d      	movs	r3, #45	@ 0x2d
 80052a2:	426d      	negs	r5, r5
 80052a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a8:	4858      	ldr	r0, [pc, #352]	@ (800540c <_printf_i+0x234>)
 80052aa:	230a      	movs	r3, #10
 80052ac:	e011      	b.n	80052d2 <_printf_i+0xfa>
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	0608      	lsls	r0, r1, #24
 80052b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052b8:	d402      	bmi.n	80052c0 <_printf_i+0xe8>
 80052ba:	0649      	lsls	r1, r1, #25
 80052bc:	bf48      	it	mi
 80052be:	b2ad      	uxthmi	r5, r5
 80052c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052c2:	4852      	ldr	r0, [pc, #328]	@ (800540c <_printf_i+0x234>)
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	bf14      	ite	ne
 80052c8:	230a      	movne	r3, #10
 80052ca:	2308      	moveq	r3, #8
 80052cc:	2100      	movs	r1, #0
 80052ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052d2:	6866      	ldr	r6, [r4, #4]
 80052d4:	60a6      	str	r6, [r4, #8]
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	db05      	blt.n	80052e6 <_printf_i+0x10e>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	432e      	orrs	r6, r5
 80052de:	f021 0104 	bic.w	r1, r1, #4
 80052e2:	6021      	str	r1, [r4, #0]
 80052e4:	d04b      	beq.n	800537e <_printf_i+0x1a6>
 80052e6:	4616      	mov	r6, r2
 80052e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80052ec:	fb03 5711 	mls	r7, r3, r1, r5
 80052f0:	5dc7      	ldrb	r7, [r0, r7]
 80052f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052f6:	462f      	mov	r7, r5
 80052f8:	42bb      	cmp	r3, r7
 80052fa:	460d      	mov	r5, r1
 80052fc:	d9f4      	bls.n	80052e8 <_printf_i+0x110>
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d10b      	bne.n	800531a <_printf_i+0x142>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	07df      	lsls	r7, r3, #31
 8005306:	d508      	bpl.n	800531a <_printf_i+0x142>
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	6861      	ldr	r1, [r4, #4]
 800530c:	4299      	cmp	r1, r3
 800530e:	bfde      	ittt	le
 8005310:	2330      	movle	r3, #48	@ 0x30
 8005312:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005316:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800531a:	1b92      	subs	r2, r2, r6
 800531c:	6122      	str	r2, [r4, #16]
 800531e:	f8cd a000 	str.w	sl, [sp]
 8005322:	464b      	mov	r3, r9
 8005324:	aa03      	add	r2, sp, #12
 8005326:	4621      	mov	r1, r4
 8005328:	4640      	mov	r0, r8
 800532a:	f7ff fee7 	bl	80050fc <_printf_common>
 800532e:	3001      	adds	r0, #1
 8005330:	d14a      	bne.n	80053c8 <_printf_i+0x1f0>
 8005332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005336:	b004      	add	sp, #16
 8005338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	f043 0320 	orr.w	r3, r3, #32
 8005342:	6023      	str	r3, [r4, #0]
 8005344:	4832      	ldr	r0, [pc, #200]	@ (8005410 <_printf_i+0x238>)
 8005346:	2778      	movs	r7, #120	@ 0x78
 8005348:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	6831      	ldr	r1, [r6, #0]
 8005350:	061f      	lsls	r7, r3, #24
 8005352:	f851 5b04 	ldr.w	r5, [r1], #4
 8005356:	d402      	bmi.n	800535e <_printf_i+0x186>
 8005358:	065f      	lsls	r7, r3, #25
 800535a:	bf48      	it	mi
 800535c:	b2ad      	uxthmi	r5, r5
 800535e:	6031      	str	r1, [r6, #0]
 8005360:	07d9      	lsls	r1, r3, #31
 8005362:	bf44      	itt	mi
 8005364:	f043 0320 	orrmi.w	r3, r3, #32
 8005368:	6023      	strmi	r3, [r4, #0]
 800536a:	b11d      	cbz	r5, 8005374 <_printf_i+0x19c>
 800536c:	2310      	movs	r3, #16
 800536e:	e7ad      	b.n	80052cc <_printf_i+0xf4>
 8005370:	4826      	ldr	r0, [pc, #152]	@ (800540c <_printf_i+0x234>)
 8005372:	e7e9      	b.n	8005348 <_printf_i+0x170>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	f023 0320 	bic.w	r3, r3, #32
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	e7f6      	b.n	800536c <_printf_i+0x194>
 800537e:	4616      	mov	r6, r2
 8005380:	e7bd      	b.n	80052fe <_printf_i+0x126>
 8005382:	6833      	ldr	r3, [r6, #0]
 8005384:	6825      	ldr	r5, [r4, #0]
 8005386:	6961      	ldr	r1, [r4, #20]
 8005388:	1d18      	adds	r0, r3, #4
 800538a:	6030      	str	r0, [r6, #0]
 800538c:	062e      	lsls	r6, r5, #24
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	d501      	bpl.n	8005396 <_printf_i+0x1be>
 8005392:	6019      	str	r1, [r3, #0]
 8005394:	e002      	b.n	800539c <_printf_i+0x1c4>
 8005396:	0668      	lsls	r0, r5, #25
 8005398:	d5fb      	bpl.n	8005392 <_printf_i+0x1ba>
 800539a:	8019      	strh	r1, [r3, #0]
 800539c:	2300      	movs	r3, #0
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	4616      	mov	r6, r2
 80053a2:	e7bc      	b.n	800531e <_printf_i+0x146>
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	6032      	str	r2, [r6, #0]
 80053aa:	681e      	ldr	r6, [r3, #0]
 80053ac:	6862      	ldr	r2, [r4, #4]
 80053ae:	2100      	movs	r1, #0
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7fa ff35 	bl	8000220 <memchr>
 80053b6:	b108      	cbz	r0, 80053bc <_printf_i+0x1e4>
 80053b8:	1b80      	subs	r0, r0, r6
 80053ba:	6060      	str	r0, [r4, #4]
 80053bc:	6863      	ldr	r3, [r4, #4]
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	2300      	movs	r3, #0
 80053c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c6:	e7aa      	b.n	800531e <_printf_i+0x146>
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	4632      	mov	r2, r6
 80053cc:	4649      	mov	r1, r9
 80053ce:	4640      	mov	r0, r8
 80053d0:	47d0      	blx	sl
 80053d2:	3001      	adds	r0, #1
 80053d4:	d0ad      	beq.n	8005332 <_printf_i+0x15a>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	079b      	lsls	r3, r3, #30
 80053da:	d413      	bmi.n	8005404 <_printf_i+0x22c>
 80053dc:	68e0      	ldr	r0, [r4, #12]
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	4298      	cmp	r0, r3
 80053e2:	bfb8      	it	lt
 80053e4:	4618      	movlt	r0, r3
 80053e6:	e7a6      	b.n	8005336 <_printf_i+0x15e>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4632      	mov	r2, r6
 80053ec:	4649      	mov	r1, r9
 80053ee:	4640      	mov	r0, r8
 80053f0:	47d0      	blx	sl
 80053f2:	3001      	adds	r0, #1
 80053f4:	d09d      	beq.n	8005332 <_printf_i+0x15a>
 80053f6:	3501      	adds	r5, #1
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	9903      	ldr	r1, [sp, #12]
 80053fc:	1a5b      	subs	r3, r3, r1
 80053fe:	42ab      	cmp	r3, r5
 8005400:	dcf2      	bgt.n	80053e8 <_printf_i+0x210>
 8005402:	e7eb      	b.n	80053dc <_printf_i+0x204>
 8005404:	2500      	movs	r5, #0
 8005406:	f104 0619 	add.w	r6, r4, #25
 800540a:	e7f5      	b.n	80053f8 <_printf_i+0x220>
 800540c:	08005dfc 	.word	0x08005dfc
 8005410:	08005e0d 	.word	0x08005e0d

08005414 <__sflush_r>:
 8005414:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541c:	0716      	lsls	r6, r2, #28
 800541e:	4605      	mov	r5, r0
 8005420:	460c      	mov	r4, r1
 8005422:	d454      	bmi.n	80054ce <__sflush_r+0xba>
 8005424:	684b      	ldr	r3, [r1, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	dc02      	bgt.n	8005430 <__sflush_r+0x1c>
 800542a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	dd48      	ble.n	80054c2 <__sflush_r+0xae>
 8005430:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005432:	2e00      	cmp	r6, #0
 8005434:	d045      	beq.n	80054c2 <__sflush_r+0xae>
 8005436:	2300      	movs	r3, #0
 8005438:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800543c:	682f      	ldr	r7, [r5, #0]
 800543e:	6a21      	ldr	r1, [r4, #32]
 8005440:	602b      	str	r3, [r5, #0]
 8005442:	d030      	beq.n	80054a6 <__sflush_r+0x92>
 8005444:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	0759      	lsls	r1, r3, #29
 800544a:	d505      	bpl.n	8005458 <__sflush_r+0x44>
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005452:	b10b      	cbz	r3, 8005458 <__sflush_r+0x44>
 8005454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	2300      	movs	r3, #0
 800545a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	4628      	mov	r0, r5
 8005460:	47b0      	blx	r6
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	d106      	bne.n	8005476 <__sflush_r+0x62>
 8005468:	6829      	ldr	r1, [r5, #0]
 800546a:	291d      	cmp	r1, #29
 800546c:	d82b      	bhi.n	80054c6 <__sflush_r+0xb2>
 800546e:	4a2a      	ldr	r2, [pc, #168]	@ (8005518 <__sflush_r+0x104>)
 8005470:	40ca      	lsrs	r2, r1
 8005472:	07d6      	lsls	r6, r2, #31
 8005474:	d527      	bpl.n	80054c6 <__sflush_r+0xb2>
 8005476:	2200      	movs	r2, #0
 8005478:	6062      	str	r2, [r4, #4]
 800547a:	04d9      	lsls	r1, r3, #19
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	6022      	str	r2, [r4, #0]
 8005480:	d504      	bpl.n	800548c <__sflush_r+0x78>
 8005482:	1c42      	adds	r2, r0, #1
 8005484:	d101      	bne.n	800548a <__sflush_r+0x76>
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	b903      	cbnz	r3, 800548c <__sflush_r+0x78>
 800548a:	6560      	str	r0, [r4, #84]	@ 0x54
 800548c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800548e:	602f      	str	r7, [r5, #0]
 8005490:	b1b9      	cbz	r1, 80054c2 <__sflush_r+0xae>
 8005492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005496:	4299      	cmp	r1, r3
 8005498:	d002      	beq.n	80054a0 <__sflush_r+0x8c>
 800549a:	4628      	mov	r0, r5
 800549c:	f7ff fbd6 	bl	8004c4c <_free_r>
 80054a0:	2300      	movs	r3, #0
 80054a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80054a4:	e00d      	b.n	80054c2 <__sflush_r+0xae>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b0      	blx	r6
 80054ac:	4602      	mov	r2, r0
 80054ae:	1c50      	adds	r0, r2, #1
 80054b0:	d1c9      	bne.n	8005446 <__sflush_r+0x32>
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0c6      	beq.n	8005446 <__sflush_r+0x32>
 80054b8:	2b1d      	cmp	r3, #29
 80054ba:	d001      	beq.n	80054c0 <__sflush_r+0xac>
 80054bc:	2b16      	cmp	r3, #22
 80054be:	d11e      	bne.n	80054fe <__sflush_r+0xea>
 80054c0:	602f      	str	r7, [r5, #0]
 80054c2:	2000      	movs	r0, #0
 80054c4:	e022      	b.n	800550c <__sflush_r+0xf8>
 80054c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ca:	b21b      	sxth	r3, r3
 80054cc:	e01b      	b.n	8005506 <__sflush_r+0xf2>
 80054ce:	690f      	ldr	r7, [r1, #16]
 80054d0:	2f00      	cmp	r7, #0
 80054d2:	d0f6      	beq.n	80054c2 <__sflush_r+0xae>
 80054d4:	0793      	lsls	r3, r2, #30
 80054d6:	680e      	ldr	r6, [r1, #0]
 80054d8:	bf08      	it	eq
 80054da:	694b      	ldreq	r3, [r1, #20]
 80054dc:	600f      	str	r7, [r1, #0]
 80054de:	bf18      	it	ne
 80054e0:	2300      	movne	r3, #0
 80054e2:	eba6 0807 	sub.w	r8, r6, r7
 80054e6:	608b      	str	r3, [r1, #8]
 80054e8:	f1b8 0f00 	cmp.w	r8, #0
 80054ec:	dde9      	ble.n	80054c2 <__sflush_r+0xae>
 80054ee:	6a21      	ldr	r1, [r4, #32]
 80054f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054f2:	4643      	mov	r3, r8
 80054f4:	463a      	mov	r2, r7
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b0      	blx	r6
 80054fa:	2800      	cmp	r0, #0
 80054fc:	dc08      	bgt.n	8005510 <__sflush_r+0xfc>
 80054fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005510:	4407      	add	r7, r0
 8005512:	eba8 0800 	sub.w	r8, r8, r0
 8005516:	e7e7      	b.n	80054e8 <__sflush_r+0xd4>
 8005518:	20400001 	.word	0x20400001

0800551c <_fflush_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	690b      	ldr	r3, [r1, #16]
 8005520:	4605      	mov	r5, r0
 8005522:	460c      	mov	r4, r1
 8005524:	b913      	cbnz	r3, 800552c <_fflush_r+0x10>
 8005526:	2500      	movs	r5, #0
 8005528:	4628      	mov	r0, r5
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	b118      	cbz	r0, 8005536 <_fflush_r+0x1a>
 800552e:	6a03      	ldr	r3, [r0, #32]
 8005530:	b90b      	cbnz	r3, 8005536 <_fflush_r+0x1a>
 8005532:	f7ff fa55 	bl	80049e0 <__sinit>
 8005536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f3      	beq.n	8005526 <_fflush_r+0xa>
 800553e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005540:	07d0      	lsls	r0, r2, #31
 8005542:	d404      	bmi.n	800554e <_fflush_r+0x32>
 8005544:	0599      	lsls	r1, r3, #22
 8005546:	d402      	bmi.n	800554e <_fflush_r+0x32>
 8005548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800554a:	f7ff fb5e 	bl	8004c0a <__retarget_lock_acquire_recursive>
 800554e:	4628      	mov	r0, r5
 8005550:	4621      	mov	r1, r4
 8005552:	f7ff ff5f 	bl	8005414 <__sflush_r>
 8005556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005558:	07da      	lsls	r2, r3, #31
 800555a:	4605      	mov	r5, r0
 800555c:	d4e4      	bmi.n	8005528 <_fflush_r+0xc>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	059b      	lsls	r3, r3, #22
 8005562:	d4e1      	bmi.n	8005528 <_fflush_r+0xc>
 8005564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005566:	f7ff fb51 	bl	8004c0c <__retarget_lock_release_recursive>
 800556a:	e7dd      	b.n	8005528 <_fflush_r+0xc>

0800556c <fiprintf>:
 800556c:	b40e      	push	{r1, r2, r3}
 800556e:	b503      	push	{r0, r1, lr}
 8005570:	4601      	mov	r1, r0
 8005572:	ab03      	add	r3, sp, #12
 8005574:	4805      	ldr	r0, [pc, #20]	@ (800558c <fiprintf+0x20>)
 8005576:	f853 2b04 	ldr.w	r2, [r3], #4
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	f000 f89d 	bl	80056bc <_vfiprintf_r>
 8005582:	b002      	add	sp, #8
 8005584:	f85d eb04 	ldr.w	lr, [sp], #4
 8005588:	b003      	add	sp, #12
 800558a:	4770      	bx	lr
 800558c:	200000a8 	.word	0x200000a8

08005590 <memmove>:
 8005590:	4288      	cmp	r0, r1
 8005592:	b510      	push	{r4, lr}
 8005594:	eb01 0402 	add.w	r4, r1, r2
 8005598:	d902      	bls.n	80055a0 <memmove+0x10>
 800559a:	4284      	cmp	r4, r0
 800559c:	4623      	mov	r3, r4
 800559e:	d807      	bhi.n	80055b0 <memmove+0x20>
 80055a0:	1e43      	subs	r3, r0, #1
 80055a2:	42a1      	cmp	r1, r4
 80055a4:	d008      	beq.n	80055b8 <memmove+0x28>
 80055a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ae:	e7f8      	b.n	80055a2 <memmove+0x12>
 80055b0:	4402      	add	r2, r0
 80055b2:	4601      	mov	r1, r0
 80055b4:	428a      	cmp	r2, r1
 80055b6:	d100      	bne.n	80055ba <memmove+0x2a>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055c2:	e7f7      	b.n	80055b4 <memmove+0x24>

080055c4 <_sbrk_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4d06      	ldr	r5, [pc, #24]	@ (80055e0 <_sbrk_r+0x1c>)
 80055c8:	2300      	movs	r3, #0
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	f7fb fa44 	bl	8000a5c <_sbrk>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_sbrk_r+0x1a>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_sbrk_r+0x1a>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000554 	.word	0x20000554

080055e4 <memcpy>:
 80055e4:	440a      	add	r2, r1
 80055e6:	4291      	cmp	r1, r2
 80055e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055ec:	d100      	bne.n	80055f0 <memcpy+0xc>
 80055ee:	4770      	bx	lr
 80055f0:	b510      	push	{r4, lr}
 80055f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055fa:	4291      	cmp	r1, r2
 80055fc:	d1f9      	bne.n	80055f2 <memcpy+0xe>
 80055fe:	bd10      	pop	{r4, pc}

08005600 <abort>:
 8005600:	b508      	push	{r3, lr}
 8005602:	2006      	movs	r0, #6
 8005604:	f000 fa2e 	bl	8005a64 <raise>
 8005608:	2001      	movs	r0, #1
 800560a:	f7fb f9af 	bl	800096c <_exit>

0800560e <_realloc_r>:
 800560e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005612:	4607      	mov	r7, r0
 8005614:	4614      	mov	r4, r2
 8005616:	460d      	mov	r5, r1
 8005618:	b921      	cbnz	r1, 8005624 <_realloc_r+0x16>
 800561a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	4611      	mov	r1, r2
 8005620:	f7ff bb88 	b.w	8004d34 <_malloc_r>
 8005624:	b92a      	cbnz	r2, 8005632 <_realloc_r+0x24>
 8005626:	f7ff fb11 	bl	8004c4c <_free_r>
 800562a:	4625      	mov	r5, r4
 800562c:	4628      	mov	r0, r5
 800562e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005632:	f000 fa33 	bl	8005a9c <_malloc_usable_size_r>
 8005636:	4284      	cmp	r4, r0
 8005638:	4606      	mov	r6, r0
 800563a:	d802      	bhi.n	8005642 <_realloc_r+0x34>
 800563c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005640:	d8f4      	bhi.n	800562c <_realloc_r+0x1e>
 8005642:	4621      	mov	r1, r4
 8005644:	4638      	mov	r0, r7
 8005646:	f7ff fb75 	bl	8004d34 <_malloc_r>
 800564a:	4680      	mov	r8, r0
 800564c:	b908      	cbnz	r0, 8005652 <_realloc_r+0x44>
 800564e:	4645      	mov	r5, r8
 8005650:	e7ec      	b.n	800562c <_realloc_r+0x1e>
 8005652:	42b4      	cmp	r4, r6
 8005654:	4622      	mov	r2, r4
 8005656:	4629      	mov	r1, r5
 8005658:	bf28      	it	cs
 800565a:	4632      	movcs	r2, r6
 800565c:	f7ff ffc2 	bl	80055e4 <memcpy>
 8005660:	4629      	mov	r1, r5
 8005662:	4638      	mov	r0, r7
 8005664:	f7ff faf2 	bl	8004c4c <_free_r>
 8005668:	e7f1      	b.n	800564e <_realloc_r+0x40>

0800566a <__sfputc_r>:
 800566a:	6893      	ldr	r3, [r2, #8]
 800566c:	3b01      	subs	r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	b410      	push	{r4}
 8005672:	6093      	str	r3, [r2, #8]
 8005674:	da08      	bge.n	8005688 <__sfputc_r+0x1e>
 8005676:	6994      	ldr	r4, [r2, #24]
 8005678:	42a3      	cmp	r3, r4
 800567a:	db01      	blt.n	8005680 <__sfputc_r+0x16>
 800567c:	290a      	cmp	r1, #10
 800567e:	d103      	bne.n	8005688 <__sfputc_r+0x1e>
 8005680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005684:	f000 b932 	b.w	80058ec <__swbuf_r>
 8005688:	6813      	ldr	r3, [r2, #0]
 800568a:	1c58      	adds	r0, r3, #1
 800568c:	6010      	str	r0, [r2, #0]
 800568e:	7019      	strb	r1, [r3, #0]
 8005690:	4608      	mov	r0, r1
 8005692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005696:	4770      	bx	lr

08005698 <__sfputs_r>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	4606      	mov	r6, r0
 800569c:	460f      	mov	r7, r1
 800569e:	4614      	mov	r4, r2
 80056a0:	18d5      	adds	r5, r2, r3
 80056a2:	42ac      	cmp	r4, r5
 80056a4:	d101      	bne.n	80056aa <__sfputs_r+0x12>
 80056a6:	2000      	movs	r0, #0
 80056a8:	e007      	b.n	80056ba <__sfputs_r+0x22>
 80056aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ae:	463a      	mov	r2, r7
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7ff ffda 	bl	800566a <__sfputc_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d1f3      	bne.n	80056a2 <__sfputs_r+0xa>
 80056ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056bc <_vfiprintf_r>:
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c0:	460d      	mov	r5, r1
 80056c2:	b09d      	sub	sp, #116	@ 0x74
 80056c4:	4614      	mov	r4, r2
 80056c6:	4698      	mov	r8, r3
 80056c8:	4606      	mov	r6, r0
 80056ca:	b118      	cbz	r0, 80056d4 <_vfiprintf_r+0x18>
 80056cc:	6a03      	ldr	r3, [r0, #32]
 80056ce:	b90b      	cbnz	r3, 80056d4 <_vfiprintf_r+0x18>
 80056d0:	f7ff f986 	bl	80049e0 <__sinit>
 80056d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056d6:	07d9      	lsls	r1, r3, #31
 80056d8:	d405      	bmi.n	80056e6 <_vfiprintf_r+0x2a>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	059a      	lsls	r2, r3, #22
 80056de:	d402      	bmi.n	80056e6 <_vfiprintf_r+0x2a>
 80056e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056e2:	f7ff fa92 	bl	8004c0a <__retarget_lock_acquire_recursive>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	071b      	lsls	r3, r3, #28
 80056ea:	d501      	bpl.n	80056f0 <_vfiprintf_r+0x34>
 80056ec:	692b      	ldr	r3, [r5, #16]
 80056ee:	b99b      	cbnz	r3, 8005718 <_vfiprintf_r+0x5c>
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f000 f938 	bl	8005968 <__swsetup_r>
 80056f8:	b170      	cbz	r0, 8005718 <_vfiprintf_r+0x5c>
 80056fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056fc:	07dc      	lsls	r4, r3, #31
 80056fe:	d504      	bpl.n	800570a <_vfiprintf_r+0x4e>
 8005700:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005704:	b01d      	add	sp, #116	@ 0x74
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	0598      	lsls	r0, r3, #22
 800570e:	d4f7      	bmi.n	8005700 <_vfiprintf_r+0x44>
 8005710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005712:	f7ff fa7b 	bl	8004c0c <__retarget_lock_release_recursive>
 8005716:	e7f3      	b.n	8005700 <_vfiprintf_r+0x44>
 8005718:	2300      	movs	r3, #0
 800571a:	9309      	str	r3, [sp, #36]	@ 0x24
 800571c:	2320      	movs	r3, #32
 800571e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005722:	f8cd 800c 	str.w	r8, [sp, #12]
 8005726:	2330      	movs	r3, #48	@ 0x30
 8005728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80058d8 <_vfiprintf_r+0x21c>
 800572c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005730:	f04f 0901 	mov.w	r9, #1
 8005734:	4623      	mov	r3, r4
 8005736:	469a      	mov	sl, r3
 8005738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800573c:	b10a      	cbz	r2, 8005742 <_vfiprintf_r+0x86>
 800573e:	2a25      	cmp	r2, #37	@ 0x25
 8005740:	d1f9      	bne.n	8005736 <_vfiprintf_r+0x7a>
 8005742:	ebba 0b04 	subs.w	fp, sl, r4
 8005746:	d00b      	beq.n	8005760 <_vfiprintf_r+0xa4>
 8005748:	465b      	mov	r3, fp
 800574a:	4622      	mov	r2, r4
 800574c:	4629      	mov	r1, r5
 800574e:	4630      	mov	r0, r6
 8005750:	f7ff ffa2 	bl	8005698 <__sfputs_r>
 8005754:	3001      	adds	r0, #1
 8005756:	f000 80a7 	beq.w	80058a8 <_vfiprintf_r+0x1ec>
 800575a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800575c:	445a      	add	r2, fp
 800575e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005760:	f89a 3000 	ldrb.w	r3, [sl]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 809f 	beq.w	80058a8 <_vfiprintf_r+0x1ec>
 800576a:	2300      	movs	r3, #0
 800576c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005774:	f10a 0a01 	add.w	sl, sl, #1
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	9307      	str	r3, [sp, #28]
 800577c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005780:	931a      	str	r3, [sp, #104]	@ 0x68
 8005782:	4654      	mov	r4, sl
 8005784:	2205      	movs	r2, #5
 8005786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578a:	4853      	ldr	r0, [pc, #332]	@ (80058d8 <_vfiprintf_r+0x21c>)
 800578c:	f7fa fd48 	bl	8000220 <memchr>
 8005790:	9a04      	ldr	r2, [sp, #16]
 8005792:	b9d8      	cbnz	r0, 80057cc <_vfiprintf_r+0x110>
 8005794:	06d1      	lsls	r1, r2, #27
 8005796:	bf44      	itt	mi
 8005798:	2320      	movmi	r3, #32
 800579a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800579e:	0713      	lsls	r3, r2, #28
 80057a0:	bf44      	itt	mi
 80057a2:	232b      	movmi	r3, #43	@ 0x2b
 80057a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057a8:	f89a 3000 	ldrb.w	r3, [sl]
 80057ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ae:	d015      	beq.n	80057dc <_vfiprintf_r+0x120>
 80057b0:	9a07      	ldr	r2, [sp, #28]
 80057b2:	4654      	mov	r4, sl
 80057b4:	2000      	movs	r0, #0
 80057b6:	f04f 0c0a 	mov.w	ip, #10
 80057ba:	4621      	mov	r1, r4
 80057bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c0:	3b30      	subs	r3, #48	@ 0x30
 80057c2:	2b09      	cmp	r3, #9
 80057c4:	d94b      	bls.n	800585e <_vfiprintf_r+0x1a2>
 80057c6:	b1b0      	cbz	r0, 80057f6 <_vfiprintf_r+0x13a>
 80057c8:	9207      	str	r2, [sp, #28]
 80057ca:	e014      	b.n	80057f6 <_vfiprintf_r+0x13a>
 80057cc:	eba0 0308 	sub.w	r3, r0, r8
 80057d0:	fa09 f303 	lsl.w	r3, r9, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	9304      	str	r3, [sp, #16]
 80057d8:	46a2      	mov	sl, r4
 80057da:	e7d2      	b.n	8005782 <_vfiprintf_r+0xc6>
 80057dc:	9b03      	ldr	r3, [sp, #12]
 80057de:	1d19      	adds	r1, r3, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	9103      	str	r1, [sp, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bfbb      	ittet	lt
 80057e8:	425b      	neglt	r3, r3
 80057ea:	f042 0202 	orrlt.w	r2, r2, #2
 80057ee:	9307      	strge	r3, [sp, #28]
 80057f0:	9307      	strlt	r3, [sp, #28]
 80057f2:	bfb8      	it	lt
 80057f4:	9204      	strlt	r2, [sp, #16]
 80057f6:	7823      	ldrb	r3, [r4, #0]
 80057f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80057fa:	d10a      	bne.n	8005812 <_vfiprintf_r+0x156>
 80057fc:	7863      	ldrb	r3, [r4, #1]
 80057fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005800:	d132      	bne.n	8005868 <_vfiprintf_r+0x1ac>
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	9203      	str	r2, [sp, #12]
 800580a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800580e:	3402      	adds	r4, #2
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80058e8 <_vfiprintf_r+0x22c>
 8005816:	7821      	ldrb	r1, [r4, #0]
 8005818:	2203      	movs	r2, #3
 800581a:	4650      	mov	r0, sl
 800581c:	f7fa fd00 	bl	8000220 <memchr>
 8005820:	b138      	cbz	r0, 8005832 <_vfiprintf_r+0x176>
 8005822:	9b04      	ldr	r3, [sp, #16]
 8005824:	eba0 000a 	sub.w	r0, r0, sl
 8005828:	2240      	movs	r2, #64	@ 0x40
 800582a:	4082      	lsls	r2, r0
 800582c:	4313      	orrs	r3, r2
 800582e:	3401      	adds	r4, #1
 8005830:	9304      	str	r3, [sp, #16]
 8005832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005836:	4829      	ldr	r0, [pc, #164]	@ (80058dc <_vfiprintf_r+0x220>)
 8005838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800583c:	2206      	movs	r2, #6
 800583e:	f7fa fcef 	bl	8000220 <memchr>
 8005842:	2800      	cmp	r0, #0
 8005844:	d03f      	beq.n	80058c6 <_vfiprintf_r+0x20a>
 8005846:	4b26      	ldr	r3, [pc, #152]	@ (80058e0 <_vfiprintf_r+0x224>)
 8005848:	bb1b      	cbnz	r3, 8005892 <_vfiprintf_r+0x1d6>
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	3307      	adds	r3, #7
 800584e:	f023 0307 	bic.w	r3, r3, #7
 8005852:	3308      	adds	r3, #8
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005858:	443b      	add	r3, r7
 800585a:	9309      	str	r3, [sp, #36]	@ 0x24
 800585c:	e76a      	b.n	8005734 <_vfiprintf_r+0x78>
 800585e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005862:	460c      	mov	r4, r1
 8005864:	2001      	movs	r0, #1
 8005866:	e7a8      	b.n	80057ba <_vfiprintf_r+0xfe>
 8005868:	2300      	movs	r3, #0
 800586a:	3401      	adds	r4, #1
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	4619      	mov	r1, r3
 8005870:	f04f 0c0a 	mov.w	ip, #10
 8005874:	4620      	mov	r0, r4
 8005876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800587a:	3a30      	subs	r2, #48	@ 0x30
 800587c:	2a09      	cmp	r2, #9
 800587e:	d903      	bls.n	8005888 <_vfiprintf_r+0x1cc>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0c6      	beq.n	8005812 <_vfiprintf_r+0x156>
 8005884:	9105      	str	r1, [sp, #20]
 8005886:	e7c4      	b.n	8005812 <_vfiprintf_r+0x156>
 8005888:	fb0c 2101 	mla	r1, ip, r1, r2
 800588c:	4604      	mov	r4, r0
 800588e:	2301      	movs	r3, #1
 8005890:	e7f0      	b.n	8005874 <_vfiprintf_r+0x1b8>
 8005892:	ab03      	add	r3, sp, #12
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	462a      	mov	r2, r5
 8005898:	4b12      	ldr	r3, [pc, #72]	@ (80058e4 <_vfiprintf_r+0x228>)
 800589a:	a904      	add	r1, sp, #16
 800589c:	4630      	mov	r0, r6
 800589e:	f3af 8000 	nop.w
 80058a2:	4607      	mov	r7, r0
 80058a4:	1c78      	adds	r0, r7, #1
 80058a6:	d1d6      	bne.n	8005856 <_vfiprintf_r+0x19a>
 80058a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058aa:	07d9      	lsls	r1, r3, #31
 80058ac:	d405      	bmi.n	80058ba <_vfiprintf_r+0x1fe>
 80058ae:	89ab      	ldrh	r3, [r5, #12]
 80058b0:	059a      	lsls	r2, r3, #22
 80058b2:	d402      	bmi.n	80058ba <_vfiprintf_r+0x1fe>
 80058b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058b6:	f7ff f9a9 	bl	8004c0c <__retarget_lock_release_recursive>
 80058ba:	89ab      	ldrh	r3, [r5, #12]
 80058bc:	065b      	lsls	r3, r3, #25
 80058be:	f53f af1f 	bmi.w	8005700 <_vfiprintf_r+0x44>
 80058c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058c4:	e71e      	b.n	8005704 <_vfiprintf_r+0x48>
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <_vfiprintf_r+0x228>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7ff fc81 	bl	80051d8 <_printf_i>
 80058d6:	e7e4      	b.n	80058a2 <_vfiprintf_r+0x1e6>
 80058d8:	08005deb 	.word	0x08005deb
 80058dc:	08005df5 	.word	0x08005df5
 80058e0:	00000000 	.word	0x00000000
 80058e4:	08005699 	.word	0x08005699
 80058e8:	08005df1 	.word	0x08005df1

080058ec <__swbuf_r>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	460e      	mov	r6, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	4605      	mov	r5, r0
 80058f4:	b118      	cbz	r0, 80058fe <__swbuf_r+0x12>
 80058f6:	6a03      	ldr	r3, [r0, #32]
 80058f8:	b90b      	cbnz	r3, 80058fe <__swbuf_r+0x12>
 80058fa:	f7ff f871 	bl	80049e0 <__sinit>
 80058fe:	69a3      	ldr	r3, [r4, #24]
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	071a      	lsls	r2, r3, #28
 8005906:	d501      	bpl.n	800590c <__swbuf_r+0x20>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b943      	cbnz	r3, 800591e <__swbuf_r+0x32>
 800590c:	4621      	mov	r1, r4
 800590e:	4628      	mov	r0, r5
 8005910:	f000 f82a 	bl	8005968 <__swsetup_r>
 8005914:	b118      	cbz	r0, 800591e <__swbuf_r+0x32>
 8005916:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800591a:	4638      	mov	r0, r7
 800591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	1a98      	subs	r0, r3, r2
 8005924:	6963      	ldr	r3, [r4, #20]
 8005926:	b2f6      	uxtb	r6, r6
 8005928:	4283      	cmp	r3, r0
 800592a:	4637      	mov	r7, r6
 800592c:	dc05      	bgt.n	800593a <__swbuf_r+0x4e>
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f7ff fdf3 	bl	800551c <_fflush_r>
 8005936:	2800      	cmp	r0, #0
 8005938:	d1ed      	bne.n	8005916 <__swbuf_r+0x2a>
 800593a:	68a3      	ldr	r3, [r4, #8]
 800593c:	3b01      	subs	r3, #1
 800593e:	60a3      	str	r3, [r4, #8]
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	6022      	str	r2, [r4, #0]
 8005946:	701e      	strb	r6, [r3, #0]
 8005948:	6962      	ldr	r2, [r4, #20]
 800594a:	1c43      	adds	r3, r0, #1
 800594c:	429a      	cmp	r2, r3
 800594e:	d004      	beq.n	800595a <__swbuf_r+0x6e>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	07db      	lsls	r3, r3, #31
 8005954:	d5e1      	bpl.n	800591a <__swbuf_r+0x2e>
 8005956:	2e0a      	cmp	r6, #10
 8005958:	d1df      	bne.n	800591a <__swbuf_r+0x2e>
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f7ff fddd 	bl	800551c <_fflush_r>
 8005962:	2800      	cmp	r0, #0
 8005964:	d0d9      	beq.n	800591a <__swbuf_r+0x2e>
 8005966:	e7d6      	b.n	8005916 <__swbuf_r+0x2a>

08005968 <__swsetup_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4b29      	ldr	r3, [pc, #164]	@ (8005a10 <__swsetup_r+0xa8>)
 800596c:	4605      	mov	r5, r0
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	460c      	mov	r4, r1
 8005972:	b118      	cbz	r0, 800597c <__swsetup_r+0x14>
 8005974:	6a03      	ldr	r3, [r0, #32]
 8005976:	b90b      	cbnz	r3, 800597c <__swsetup_r+0x14>
 8005978:	f7ff f832 	bl	80049e0 <__sinit>
 800597c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005980:	0719      	lsls	r1, r3, #28
 8005982:	d422      	bmi.n	80059ca <__swsetup_r+0x62>
 8005984:	06da      	lsls	r2, r3, #27
 8005986:	d407      	bmi.n	8005998 <__swsetup_r+0x30>
 8005988:	2209      	movs	r2, #9
 800598a:	602a      	str	r2, [r5, #0]
 800598c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005990:	81a3      	strh	r3, [r4, #12]
 8005992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005996:	e033      	b.n	8005a00 <__swsetup_r+0x98>
 8005998:	0758      	lsls	r0, r3, #29
 800599a:	d512      	bpl.n	80059c2 <__swsetup_r+0x5a>
 800599c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800599e:	b141      	cbz	r1, 80059b2 <__swsetup_r+0x4a>
 80059a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059a4:	4299      	cmp	r1, r3
 80059a6:	d002      	beq.n	80059ae <__swsetup_r+0x46>
 80059a8:	4628      	mov	r0, r5
 80059aa:	f7ff f94f 	bl	8004c4c <_free_r>
 80059ae:	2300      	movs	r3, #0
 80059b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	2300      	movs	r3, #0
 80059bc:	6063      	str	r3, [r4, #4]
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f043 0308 	orr.w	r3, r3, #8
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	b94b      	cbnz	r3, 80059e2 <__swsetup_r+0x7a>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d8:	d003      	beq.n	80059e2 <__swsetup_r+0x7a>
 80059da:	4621      	mov	r1, r4
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 f88b 	bl	8005af8 <__smakebuf_r>
 80059e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e6:	f013 0201 	ands.w	r2, r3, #1
 80059ea:	d00a      	beq.n	8005a02 <__swsetup_r+0x9a>
 80059ec:	2200      	movs	r2, #0
 80059ee:	60a2      	str	r2, [r4, #8]
 80059f0:	6962      	ldr	r2, [r4, #20]
 80059f2:	4252      	negs	r2, r2
 80059f4:	61a2      	str	r2, [r4, #24]
 80059f6:	6922      	ldr	r2, [r4, #16]
 80059f8:	b942      	cbnz	r2, 8005a0c <__swsetup_r+0xa4>
 80059fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059fe:	d1c5      	bne.n	800598c <__swsetup_r+0x24>
 8005a00:	bd38      	pop	{r3, r4, r5, pc}
 8005a02:	0799      	lsls	r1, r3, #30
 8005a04:	bf58      	it	pl
 8005a06:	6962      	ldrpl	r2, [r4, #20]
 8005a08:	60a2      	str	r2, [r4, #8]
 8005a0a:	e7f4      	b.n	80059f6 <__swsetup_r+0x8e>
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e7f7      	b.n	8005a00 <__swsetup_r+0x98>
 8005a10:	200000a8 	.word	0x200000a8

08005a14 <_raise_r>:
 8005a14:	291f      	cmp	r1, #31
 8005a16:	b538      	push	{r3, r4, r5, lr}
 8005a18:	4605      	mov	r5, r0
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	d904      	bls.n	8005a28 <_raise_r+0x14>
 8005a1e:	2316      	movs	r3, #22
 8005a20:	6003      	str	r3, [r0, #0]
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a2a:	b112      	cbz	r2, 8005a32 <_raise_r+0x1e>
 8005a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a30:	b94b      	cbnz	r3, 8005a46 <_raise_r+0x32>
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 f830 	bl	8005a98 <_getpid_r>
 8005a38:	4622      	mov	r2, r4
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a42:	f000 b817 	b.w	8005a74 <_kill_r>
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d00a      	beq.n	8005a60 <_raise_r+0x4c>
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	d103      	bne.n	8005a56 <_raise_r+0x42>
 8005a4e:	2316      	movs	r3, #22
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	2001      	movs	r0, #1
 8005a54:	e7e7      	b.n	8005a26 <_raise_r+0x12>
 8005a56:	2100      	movs	r1, #0
 8005a58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4798      	blx	r3
 8005a60:	2000      	movs	r0, #0
 8005a62:	e7e0      	b.n	8005a26 <_raise_r+0x12>

08005a64 <raise>:
 8005a64:	4b02      	ldr	r3, [pc, #8]	@ (8005a70 <raise+0xc>)
 8005a66:	4601      	mov	r1, r0
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	f7ff bfd3 	b.w	8005a14 <_raise_r>
 8005a6e:	bf00      	nop
 8005a70:	200000a8 	.word	0x200000a8

08005a74 <_kill_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	@ (8005a94 <_kill_r+0x20>)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	4611      	mov	r1, r2
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f7fa ff63 	bl	800094c <_kill>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d102      	bne.n	8005a90 <_kill_r+0x1c>
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	b103      	cbz	r3, 8005a90 <_kill_r+0x1c>
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	bd38      	pop	{r3, r4, r5, pc}
 8005a92:	bf00      	nop
 8005a94:	20000554 	.word	0x20000554

08005a98 <_getpid_r>:
 8005a98:	f7fa bf50 	b.w	800093c <_getpid>

08005a9c <_malloc_usable_size_r>:
 8005a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa0:	1f18      	subs	r0, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfbc      	itt	lt
 8005aa6:	580b      	ldrlt	r3, [r1, r0]
 8005aa8:	18c0      	addlt	r0, r0, r3
 8005aaa:	4770      	bx	lr

08005aac <__swhatbuf_r>:
 8005aac:	b570      	push	{r4, r5, r6, lr}
 8005aae:	460c      	mov	r4, r1
 8005ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	b096      	sub	sp, #88	@ 0x58
 8005ab8:	4615      	mov	r5, r2
 8005aba:	461e      	mov	r6, r3
 8005abc:	da0d      	bge.n	8005ada <__swhatbuf_r+0x2e>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ac4:	f04f 0100 	mov.w	r1, #0
 8005ac8:	bf14      	ite	ne
 8005aca:	2340      	movne	r3, #64	@ 0x40
 8005acc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	6031      	str	r1, [r6, #0]
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	b016      	add	sp, #88	@ 0x58
 8005ad8:	bd70      	pop	{r4, r5, r6, pc}
 8005ada:	466a      	mov	r2, sp
 8005adc:	f000 f848 	bl	8005b70 <_fstat_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	dbec      	blt.n	8005abe <__swhatbuf_r+0x12>
 8005ae4:	9901      	ldr	r1, [sp, #4]
 8005ae6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005aea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005aee:	4259      	negs	r1, r3
 8005af0:	4159      	adcs	r1, r3
 8005af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005af6:	e7eb      	b.n	8005ad0 <__swhatbuf_r+0x24>

08005af8 <__smakebuf_r>:
 8005af8:	898b      	ldrh	r3, [r1, #12]
 8005afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005afc:	079d      	lsls	r5, r3, #30
 8005afe:	4606      	mov	r6, r0
 8005b00:	460c      	mov	r4, r1
 8005b02:	d507      	bpl.n	8005b14 <__smakebuf_r+0x1c>
 8005b04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	6123      	str	r3, [r4, #16]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	6163      	str	r3, [r4, #20]
 8005b10:	b003      	add	sp, #12
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b14:	ab01      	add	r3, sp, #4
 8005b16:	466a      	mov	r2, sp
 8005b18:	f7ff ffc8 	bl	8005aac <__swhatbuf_r>
 8005b1c:	9f00      	ldr	r7, [sp, #0]
 8005b1e:	4605      	mov	r5, r0
 8005b20:	4639      	mov	r1, r7
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7ff f906 	bl	8004d34 <_malloc_r>
 8005b28:	b948      	cbnz	r0, 8005b3e <__smakebuf_r+0x46>
 8005b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2e:	059a      	lsls	r2, r3, #22
 8005b30:	d4ee      	bmi.n	8005b10 <__smakebuf_r+0x18>
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	f043 0302 	orr.w	r3, r3, #2
 8005b3a:	81a3      	strh	r3, [r4, #12]
 8005b3c:	e7e2      	b.n	8005b04 <__smakebuf_r+0xc>
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	6020      	str	r0, [r4, #0]
 8005b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	9b01      	ldr	r3, [sp, #4]
 8005b4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b4e:	b15b      	cbz	r3, 8005b68 <__smakebuf_r+0x70>
 8005b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b54:	4630      	mov	r0, r6
 8005b56:	f000 f81d 	bl	8005b94 <_isatty_r>
 8005b5a:	b128      	cbz	r0, 8005b68 <__smakebuf_r+0x70>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	431d      	orrs	r5, r3
 8005b6c:	81a5      	strh	r5, [r4, #12]
 8005b6e:	e7cf      	b.n	8005b10 <__smakebuf_r+0x18>

08005b70 <_fstat_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4d07      	ldr	r5, [pc, #28]	@ (8005b90 <_fstat_r+0x20>)
 8005b74:	2300      	movs	r3, #0
 8005b76:	4604      	mov	r4, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	602b      	str	r3, [r5, #0]
 8005b7e:	f7fa ff45 	bl	8000a0c <_fstat>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	d102      	bne.n	8005b8c <_fstat_r+0x1c>
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	b103      	cbz	r3, 8005b8c <_fstat_r+0x1c>
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	bd38      	pop	{r3, r4, r5, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000554 	.word	0x20000554

08005b94 <_isatty_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d06      	ldr	r5, [pc, #24]	@ (8005bb0 <_isatty_r+0x1c>)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	f7fa ff44 	bl	8000a2c <_isatty>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_isatty_r+0x1a>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_isatty_r+0x1a>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000554 	.word	0x20000554

08005bb4 <_init>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr

08005bc0 <_fini>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr
