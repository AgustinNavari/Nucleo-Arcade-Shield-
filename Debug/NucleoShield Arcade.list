
NucleoShield Arcade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003028  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080031ec  080031ec  000041ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f4  080032f4  0000509c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080032f4  080032f4  000042f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032fc  080032fc  0000509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032fc  080032fc  000042fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003300  08003300  00004300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08003304  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000009c  080033a0  0000509c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080033a0  0000517c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdfb  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b4  00000000  00000000  00010ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00013180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e7  00000000  00000000  00013bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c87  00000000  00000000  000143a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db06  00000000  00000000  0003602e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f1f  00000000  00000000  00043b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010da53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  0010da98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00110308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000009c 	.word	0x2000009c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031d4 	.word	0x080031d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000a0 	.word	0x200000a0
 8000200:	080031d4 	.word	0x080031d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fe41 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f86d 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART2_UART_Init();
 800053e:	f000 f90f 	bl	8000760 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000542:	f000 f8d7 	bl	80006f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000546:	f000 fb41 	bl	8000bcc <systemInit>
  updateDisplay16();
 800054a:	f000 fc2d 	bl	8000da8 <updateDisplay16>
  while (1)
  {



	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 800054e:	2300      	movs	r3, #0
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	e00c      	b.n	800056e <main+0x3e>
	  	debounceFSM_update(&buttons[i]);
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	4a2d      	ldr	r2, [pc, #180]	@ (8000614 <main+0xe4>)
 8000560:	4413      	add	r3, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fd62 	bl	800102c <debounceFSM_update>
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	3301      	adds	r3, #1
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b05      	cmp	r3, #5
 8000572:	d9ef      	bls.n	8000554 <main+0x24>
	  }

	  if (readKey(0)) { drawChar16(0,0,'B'); updateDisplay16();}
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fdfb 	bl	8001170 <readKey>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d006      	beq.n	800058e <main+0x5e>
 8000580:	2242      	movs	r2, #66	@ 0x42
 8000582:	2100      	movs	r1, #0
 8000584:	2000      	movs	r0, #0
 8000586:	f000 fc79 	bl	8000e7c <drawChar16>
 800058a:	f000 fc0d 	bl	8000da8 <updateDisplay16>
	  if (readKey(1)) { drawChar16(0,0,'S'); updateDisplay16();}
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fdee 	bl	8001170 <readKey>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <main+0x78>
 800059a:	2253      	movs	r2, #83	@ 0x53
 800059c:	2100      	movs	r1, #0
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fc6c 	bl	8000e7c <drawChar16>
 80005a4:	f000 fc00 	bl	8000da8 <updateDisplay16>
	  if (readKey(2)) { drawChar16(0,0,'R'); updateDisplay16();}
 80005a8:	2002      	movs	r0, #2
 80005aa:	f000 fde1 	bl	8001170 <readKey>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d006      	beq.n	80005c2 <main+0x92>
 80005b4:	2252      	movs	r2, #82	@ 0x52
 80005b6:	2100      	movs	r1, #0
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 fc5f 	bl	8000e7c <drawChar16>
 80005be:	f000 fbf3 	bl	8000da8 <updateDisplay16>
	  if (readKey(3)) { drawChar16(0,0,'U'); updateDisplay16();}
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 fdd4 	bl	8001170 <readKey>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d006      	beq.n	80005dc <main+0xac>
 80005ce:	2255      	movs	r2, #85	@ 0x55
 80005d0:	2100      	movs	r1, #0
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fc52 	bl	8000e7c <drawChar16>
 80005d8:	f000 fbe6 	bl	8000da8 <updateDisplay16>
	  if (readKey(4)) { drawChar16(0,0,'L'); updateDisplay16();}
 80005dc:	2004      	movs	r0, #4
 80005de:	f000 fdc7 	bl	8001170 <readKey>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d006      	beq.n	80005f6 <main+0xc6>
 80005e8:	224c      	movs	r2, #76	@ 0x4c
 80005ea:	2100      	movs	r1, #0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fc45 	bl	8000e7c <drawChar16>
 80005f2:	f000 fbd9 	bl	8000da8 <updateDisplay16>
	  if (readKey(5)) { drawChar16(0,0,'D'); updateDisplay16();}
 80005f6:	2005      	movs	r0, #5
 80005f8:	f000 fdba 	bl	8001170 <readKey>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0a5      	beq.n	800054e <main+0x1e>
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fc38 	bl	8000e7c <drawChar16>
 800060c:	f000 fbcc 	bl	8000da8 <updateDisplay16>
	  for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8000610:	e79d      	b.n	800054e <main+0x1e>
 8000612:	bf00      	nop
 8000614:	20000004 	.word	0x20000004

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	@ 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fda8 	bl	800317c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b2a      	ldr	r3, [pc, #168]	@ (80006ec <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <SystemClock_Config+0xd4>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000664:	4a22      	ldr	r2, [pc, #136]	@ (80006f0 <SystemClock_Config+0xd8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000694:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fc3e 	bl	8001f28 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006b2:	f000 f87f 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8de 	bl	8001894 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006de:	f000 f869 	bl	80007b4 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_SPI2_Init+0x64>)
 80006fa:	4a18      	ldr	r2, [pc, #96]	@ (800075c <MX_SPI2_Init+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_SPI2_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_SPI2_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000724:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_SPI2_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <MX_SPI2_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000740:	220a      	movs	r2, #10
 8000742:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_SPI2_Init+0x64>)
 8000746:	f001 fe8d 	bl	8002464 <HAL_SPI_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 f830 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000b8 	.word	0x200000b8
 800075c:	40003800 	.word	0x40003800

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f002 fa2c 	bl	8002bf4 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f807 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000110 	.word	0x20000110
 80007b0:	40004400 	.word	0x40004400

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <HAL_MspInit+0x4c>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007fe:	2007      	movs	r0, #7
 8000800:	f000 fe1e 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800

08000810 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a2c      	ldr	r2, [pc, #176]	@ (80008e0 <HAL_SPI_MspInit+0xd0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d152      	bne.n	80008d8 <HAL_SPI_MspInit+0xc8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a2a      	ldr	r2, [pc, #168]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <HAL_SPI_MspInit+0xd4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <HAL_SPI_MspInit+0xd8>)
 80008a2:	f000 fe31 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b8:	2305      	movs	r3, #5
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	480a      	ldr	r0, [pc, #40]	@ (80008ec <HAL_SPI_MspInit+0xdc>)
 80008c4:	f000 fe20 	bl	8001508 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2024      	movs	r0, #36	@ 0x24
 80008ce:	f000 fdc2 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008d2:	2024      	movs	r0, #36	@ 0x24
 80008d4:	f000 fddb 	bl	800148e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40003800 	.word	0x40003800
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020400 	.word	0x40020400

080008f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	@ (8000974 <HAL_UART_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12b      	bne.n	800096a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_UART_MspInit+0x88>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094a:	230c      	movs	r3, #12
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <HAL_UART_MspInit+0x8c>)
 8000966:	f000 fdcf 	bl	8001508 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40004400 	.word	0x40004400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 fc43 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <SPI2_IRQHandler+0x10>)
 80009e6:	f001 ff0b 	bl	8002800 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000b8 	.word	0x200000b8

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a1c:	f7ff ffea 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	@ (8000a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	@ (8000a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 fba1 	bl	800318c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fd71 	bl	8000530 <main>
  bx  lr    
 8000a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000a5c:	08003304 	.word	0x08003304
  ldr r2, =_sbss
 8000a60:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000a64:	2000017c 	.word	0x2000017c

08000a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <board_gpio_init>:
#include "boardConfig.h"

void board_gpio_init(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b4d      	ldr	r3, [pc, #308]	@ (8000bbc <board_gpio_init+0x150>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8000bbc <board_gpio_init+0x150>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b4a      	ldr	r3, [pc, #296]	@ (8000bbc <board_gpio_init+0x150>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b46      	ldr	r3, [pc, #280]	@ (8000bbc <board_gpio_init+0x150>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a45      	ldr	r2, [pc, #276]	@ (8000bbc <board_gpio_init+0x150>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b43      	ldr	r3, [pc, #268]	@ (8000bbc <board_gpio_init+0x150>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b3f      	ldr	r3, [pc, #252]	@ (8000bbc <board_gpio_init+0x150>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bbc <board_gpio_init+0x150>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b3c      	ldr	r3, [pc, #240]	@ (8000bbc <board_gpio_init+0x150>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <board_gpio_init+0x150>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a37      	ldr	r2, [pc, #220]	@ (8000bbc <board_gpio_init+0x150>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <board_gpio_init+0x150>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2120      	movs	r1, #32
 8000af6:	4832      	ldr	r0, [pc, #200]	@ (8000bc0 <board_gpio_init+0x154>)
 8000af8:	f000 feb2 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b02:	4830      	ldr	r0, [pc, #192]	@ (8000bc4 <board_gpio_init+0x158>)
 8000b04:	f000 feac 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4829      	ldr	r0, [pc, #164]	@ (8000bc4 <board_gpio_init+0x158>)
 8000b20:	f000 fcf2 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b24:	2320      	movs	r3, #32
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4821      	ldr	r0, [pc, #132]	@ (8000bc0 <board_gpio_init+0x154>)
 8000b3c:	f000 fce4 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <board_gpio_init+0x158>)
 8000b5a:	f000 fcd5 	bl	8001508 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b64:	4817      	ldr	r0, [pc, #92]	@ (8000bc4 <board_gpio_init+0x158>)
 8000b66:	f000 fe7b 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <board_gpio_init+0x158>)
 8000b7e:	f000 fcc3 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480a      	ldr	r0, [pc, #40]	@ (8000bc0 <board_gpio_init+0x154>)
 8000b98:	f000 fcb6 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b9c:	2370      	movs	r3, #112	@ 0x70
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <board_gpio_init+0x15c>)
 8000bb0:	f000 fcaa 	bl	8001508 <HAL_GPIO_Init>


}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	@ 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <systemInit>:
            break;
    }
}

void systemInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    // Inicializa el hardware necesario
	board_gpio_init();
 8000bd0:	f7ff ff4c 	bl	8000a6c <board_gpio_init>
	MAX7219_InitAll();
 8000bd4:	f000 f802 	bl	8000bdc <MAX7219_InitAll>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MAX7219_InitAll>:
static uint8_t frameBuffer16[DISPLAY_ROWS][DISPLAY_COLS/8]; // representacion del display en RAM

// Se inicializan los 4 displays

void MAX7219_InitAll(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8

    MAX7219_WriteRowAll(MAX7219_SHUTDOWN, 0x01, 0x01, 0x01, 0x01); // 0x0C -> Shutdown | 0x01 -> Operacion Normal
 8000be2:	2301      	movs	r3, #1
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	2201      	movs	r2, #1
 8000bea:	2101      	movs	r1, #1
 8000bec:	200c      	movs	r0, #12
 8000bee:	f000 f9a1 	bl	8000f34 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_SCAN, 0x07, 0x07, 0x07, 0x07); // 0x0B -> Escaneo del Display (filas) | 0x07 -> Habilita las 8 filas
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	2107      	movs	r1, #7
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f000 f999 	bl	8000f34 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_MODE, 0x00, 0x00, 0x00, 0x00); // 0x09 -> Modo del Display (Matriz, 7 segmentos) | 0x00 -> Sin Decode (Matriz)
 8000c02:	2300      	movs	r3, #0
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2300      	movs	r3, #0
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f000 f991 	bl	8000f34 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_BRIGHTNESS, 0x02, 0x02, 0x02, 0x02); // 0x0A -> Brillo del Display | 0x02 -> Configurable de 0 a 15 (PWM)
 8000c12:	2302      	movs	r3, #2
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2302      	movs	r3, #2
 8000c18:	2202      	movs	r2, #2
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f000 f989 	bl	8000f34 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_TEST, 0x00, 0x00, 0x00, 0x00); // 0x0F -> Test del Display | 0x00 -> Test Apagado
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	200f      	movs	r0, #15
 8000c2e:	f000 f981 	bl	8000f34 <MAX7219_WriteRowAll>

    // Limpia la pantalla
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 8000c32:	2301      	movs	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e00a      	b.n	8000c4e <MAX7219_InitAll+0x72>
        MAX7219_WriteRowAll(row, 0xFF, 0xFF, 0xFF, 0xFF);
 8000c38:	79f8      	ldrb	r0, [r7, #7]
 8000c3a:	23ff      	movs	r3, #255	@ 0xff
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	23ff      	movs	r3, #255	@ 0xff
 8000c40:	22ff      	movs	r2, #255	@ 0xff
 8000c42:	21ff      	movs	r1, #255	@ 0xff
 8000c44:	f000 f976 	bl	8000f34 <MAX7219_WriteRowAll>
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	d9f1      	bls.n	8000c38 <MAX7219_InitAll+0x5c>
    }

    // Limpia el frameBuffer
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	71bb      	strb	r3, [r7, #6]
 8000c58:	e00d      	b.n	8000c76 <MAX7219_InitAll+0x9a>
    	frameBuffer16[row][0] = 0;
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <MAX7219_InitAll+0xac>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    	frameBuffer16[row][1] = 0;
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <MAX7219_InitAll+0xac>)
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	705a      	strb	r2, [r3, #1]
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	3301      	adds	r3, #1
 8000c74:	71bb      	strb	r3, [r7, #6]
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d9ee      	bls.n	8000c5a <MAX7219_InitAll+0x7e>
    }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000158 	.word	0x20000158

08000c8c <setPixel16>:


// enciende o apaga un pixel de la matriz
void setPixel16(uint8_t x, uint8_t y, bool on) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	460b      	mov	r3, r1
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	717b      	strb	r3, [r7, #5]
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d840      	bhi.n	8000d26 <setPixel16+0x9a>
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d83d      	bhi.n	8000d26 <setPixel16+0x9a>

    uint8_t byteIndex = x / 8;       // 0 o 1
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	73fb      	strb	r3, [r7, #15]
    uint8_t bitIndex  = x % 8;       // 0 a 7
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	73bb      	strb	r3, [r7, #14]

    if (on)
 8000cb8:	797b      	ldrb	r3, [r7, #5]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d018      	beq.n	8000cf0 <setPixel16+0x64>
        frameBuffer16[y][byteIndex] |=  (1 << bitIndex);
 8000cbe:	79ba      	ldrb	r2, [r7, #6]
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	491c      	ldr	r1, [pc, #112]	@ (8000d34 <setPixel16+0xa8>)
 8000cc4:	0052      	lsls	r2, r2, #1
 8000cc6:	440a      	add	r2, r1
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b259      	sxtb	r1, r3
 8000cdc:	79ba      	ldrb	r2, [r7, #6]
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	b2c8      	uxtb	r0, r1
 8000ce2:	4914      	ldr	r1, [pc, #80]	@ (8000d34 <setPixel16+0xa8>)
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	440a      	add	r2, r1
 8000ce8:	4413      	add	r3, r2
 8000cea:	4602      	mov	r2, r0
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e01b      	b.n	8000d28 <setPixel16+0x9c>
    else
        frameBuffer16[y][byteIndex] &= ~(1 << bitIndex);
 8000cf0:	79ba      	ldrb	r2, [r7, #6]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	490f      	ldr	r1, [pc, #60]	@ (8000d34 <setPixel16+0xa8>)
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	440a      	add	r2, r1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	4013      	ands	r3, r2
 8000d10:	b259      	sxtb	r1, r3
 8000d12:	79ba      	ldrb	r2, [r7, #6]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	b2c8      	uxtb	r0, r1
 8000d18:	4906      	ldr	r1, [pc, #24]	@ (8000d34 <setPixel16+0xa8>)
 8000d1a:	0052      	lsls	r2, r2, #1
 8000d1c:	440a      	add	r2, r1
 8000d1e:	4413      	add	r3, r2
 8000d20:	4602      	mov	r2, r0
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	e000      	b.n	8000d28 <setPixel16+0x9c>
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 8000d26:	bf00      	nop
}
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000158 	.word	0x20000158

08000d38 <reverseBits>:

// funcion auxiliar para "dar vuelta" los displays de abajo
static uint8_t reverseBits(uint8_t b) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	b25a      	sxtb	r2, r3
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	109b      	asrs	r3, r3, #2
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 8000d62:	b25a      	sxtb	r2, r3
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	105b      	asrs	r3, r3, #1
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 8000d82:	b25a      	sxtb	r2, r3
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	71fb      	strb	r3, [r7, #7]
    return b;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <updateDisplay16>:

// actualiza el display con lo que hay en el frameBuffer
void updateDisplay16(void)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af02      	add	r7, sp, #8
    for (uint8_t y = 0; y < 8; y++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e02f      	b.n	8000e14 <updateDisplay16+0x6c>
        uint8_t TL = frameBuffer16[y][1];
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <updateDisplay16+0x7c>)
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	785b      	ldrb	r3, [r3, #1]
 8000dbe:	71bb      	strb	r3, [r7, #6]
        uint8_t TR = frameBuffer16[y][0];
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a18      	ldr	r2, [pc, #96]	@ (8000e24 <updateDisplay16+0x7c>)
 8000dc4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000dc8:	717b      	strb	r3, [r7, #5]
        uint8_t BL = reverseBits(frameBuffer16[15-y][1]);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f1c3 030f 	rsb	r3, r3, #15
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <updateDisplay16+0x7c>)
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	785b      	ldrb	r3, [r3, #1]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffad 	bl	8000d38 <reverseBits>
 8000dde:	4603      	mov	r3, r0
 8000de0:	713b      	strb	r3, [r7, #4]
        uint8_t BR = reverseBits(frameBuffer16[15-y][0]);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f1c3 030f 	rsb	r3, r3, #15
 8000de8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e24 <updateDisplay16+0x7c>)
 8000dea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ffa2 	bl	8000d38 <reverseBits>
 8000df4:	4603      	mov	r3, r0
 8000df6:	70fb      	strb	r3, [r7, #3]

        MAX7219_WriteRowAll(y + 1, TR, TL, BL, BR);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b2d8      	uxtb	r0, r3
 8000dfe:	793c      	ldrb	r4, [r7, #4]
 8000e00:	79ba      	ldrb	r2, [r7, #6]
 8000e02:	7979      	ldrb	r1, [r7, #5]
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4623      	mov	r3, r4
 8000e0a:	f000 f893 	bl	8000f34 <MAX7219_WriteRowAll>
    for (uint8_t y = 0; y < 8; y++) {
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	3301      	adds	r3, #1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	d9cc      	bls.n	8000db4 <updateDisplay16+0xc>
    }
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	20000158 	.word	0x20000158

08000e28 <findChar>:
		frameBuffer16[y][1] =  combined & 0xFF;
	}
}

// funcion auxiliar que busca un caracter en la lista de caracteres y devuelve un puntero a ese caracter
static const Chars5x7* findChar(char character){
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]

	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e015      	b.n	8000e64 <findChar+0x3c>
		if(font5x7[k].ch == character){
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	490f      	ldr	r1, [pc, #60]	@ (8000e78 <findChar+0x50>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	440b      	add	r3, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d107      	bne.n	8000e5e <findChar+0x36>
			return &font5x7[k];
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <findChar+0x50>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	e006      	b.n	8000e6c <findChar+0x44>
	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	3301      	adds	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b27      	cmp	r3, #39	@ 0x27
 8000e68:	d9e6      	bls.n	8000e38 <findChar+0x10>
		}
	}
	return &font5x7[0];
 8000e6a:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <findChar+0x50>)
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	08003204 	.word	0x08003204

08000e7c <drawChar16>:

// dibuja un caracter con la esquina superior izquierda ubicada en (x,y)

void drawChar16(uint8_t x, uint8_t y, char character) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	460b      	mov	r3, r1
 8000e88:	71bb      	strb	r3, [r7, #6]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	717b      	strb	r3, [r7, #5]

	const Chars5x7* symbol = findChar(character);
 8000e8e:	797b      	ldrb	r3, [r7, #5]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ffc9 	bl	8000e28 <findChar>
 8000e96:	6138      	str	r0, [r7, #16]

    for (uint8_t column = 0; column < 5; column++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
 8000e9c:	e029      	b.n	8000ef2 <drawChar16+0x76>
        uint8_t columnBits = symbol->col[column];
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	73fb      	strb	r3, [r7, #15]

        for (uint8_t row = 0; row < 7; row++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	75bb      	strb	r3, [r7, #22]
 8000eac:	e01b      	b.n	8000ee6 <drawChar16+0x6a>
            bool on = columnBits & (1 << row);
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	7dbb      	ldrb	r3, [r7, #22]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf14      	ite	ne
 8000ebe:	2301      	movne	r3, #1
 8000ec0:	2300      	moveq	r3, #0
 8000ec2:	73bb      	strb	r3, [r7, #14]
            setPixel16(x + (4- column), y + row, on);
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3304      	adds	r3, #4
 8000ece:	b2d8      	uxtb	r0, r3
 8000ed0:	79ba      	ldrb	r2, [r7, #6]
 8000ed2:	7dbb      	ldrb	r3, [r7, #22]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	7bba      	ldrb	r2, [r7, #14]
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fed6 	bl	8000c8c <setPixel16>
        for (uint8_t row = 0; row < 7; row++) {
 8000ee0:	7dbb      	ldrb	r3, [r7, #22]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	75bb      	strb	r3, [r7, #22]
 8000ee6:	7dbb      	ldrb	r3, [r7, #22]
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d9e0      	bls.n	8000eae <drawChar16+0x32>
    for (uint8_t column = 0; column < 5; column++) {
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d9d2      	bls.n	8000e9e <drawChar16+0x22>
        }
    }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <MAX7219_Select>:
#include "max7219_port_stm32.h"
#include "boardConfig.h"

static void MAX7219_Select(void)   { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET); }
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0e:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <MAX7219_Select+0x14>)
 8000f10:	f000 fca6 	bl	8001860 <HAL_GPIO_WritePin>
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020800 	.word	0x40020800

08000f1c <MAX7219_Deselect>:
static void MAX7219_Deselect(void) { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f26:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <MAX7219_Deselect+0x14>)
 8000f28:	f000 fc9a 	bl	8001860 <HAL_GPIO_WritePin>
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020800 	.word	0x40020800

08000f34 <MAX7219_WriteRowAll>:

void MAX7219_WriteRowAll(uint8_t row, uint8_t TR, uint8_t TL, uint8_t BL, uint8_t BR)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	4603      	mov	r3, r0
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	717b      	strb	r3, [r7, #5]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	713b      	strb	r3, [r7, #4]
    // Recordá: el primer par de bytes que mandamos termina en el módulo más LEJANO (BL)
    uint8_t frame[8] = {
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	723b      	strb	r3, [r7, #8]
 8000f56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f5a:	727b      	strb	r3, [r7, #9]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	72bb      	strb	r3, [r7, #10]
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	72fb      	strb	r3, [r7, #11]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	733b      	strb	r3, [r7, #12]
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	737b      	strb	r3, [r7, #13]
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	73bb      	strb	r3, [r7, #14]
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	73fb      	strb	r3, [r7, #15]
        row, BL,   // Display 3
        row, TL,   // Display 2
        row, TR    // Display 1 (más cercano al micro)
    };

    MAX7219_Select();
 8000f74:	f7ff ffc6 	bl	8000f04 <MAX7219_Select>
    HAL_SPI_Transmit(&hspi2, frame, sizeof(frame), HAL_MAX_DELAY);
 8000f78:	f107 0108 	add.w	r1, r7, #8
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f80:	2208      	movs	r2, #8
 8000f82:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MAX7219_WriteRowAll+0x60>)
 8000f84:	f001 faf7 	bl	8002576 <HAL_SPI_Transmit>
    MAX7219_Deselect();
 8000f88:	f7ff ffc8 	bl	8000f1c <MAX7219_Deselect>
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	200000b8 	.word	0x200000b8

08000f98 <delayInit>:

static bool_t delayIsRunning(delay_t * delay){
	return delay->running;
}

void delayInit(delay_t * delay, tick_t duration){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]

	delay->duration = duration;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	721a      	strb	r2, [r3, #8]

}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <delayRead>:

bool_t delayRead(delay_t * delay){
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]

	if (delay->running == false){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7a1b      	ldrb	r3, [r3, #8]
 8000fc6:	f083 0301 	eor.w	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <delayRead+0x26>
		delay->startTime = HAL_GetTick();
 8000fd0:	f000 f95a 	bl	8001288 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	721a      	strb	r2, [r3, #8]
	}

	if ((delay->running == true) && (HAL_GetTick() - delay->startTime > delay->duration)){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7a1b      	ldrb	r3, [r3, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00e      	beq.n	8001006 <delayRead+0x4c>
 8000fe8:	f000 f94e 	bl	8001288 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d904      	bls.n	8001006 <delayRead+0x4c>

		delay->running = false;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	721a      	strb	r2, [r3, #8]
		return true; //si paso el tiempo devuelve "true"
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <delayRead+0x4e>

	}else{
		return false; //si aun no paso el tiempo devuelve "false"
 8001006:	2300      	movs	r3, #0
	}
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <debounceFSM_init>:
		delay->duration = duration;
	}
}

// debounceFSM_init carga el estado inicial en BUTTON_UP
void debounceFSM_init(button_t * btn){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	btn -> state = BUTTON_UP;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <debounceFSM_update>:

// debounceFSM_update maneja los cambios de estado
void debounceFSM_update(button_t * btn){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

	bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin); // lee el estado del pin
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	889b      	ldrh	r3, [r3, #4]
 800103c:	4619      	mov	r1, r3
 800103e:	4610      	mov	r0, r2
 8001040:	f000 fbf6 	bl	8001830 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	bf14      	ite	ne
 800104a:	2301      	movne	r3, #1
 800104c:	2300      	moveq	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

	switch(btn -> state){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	799b      	ldrb	r3, [r3, #6]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d87c      	bhi.n	8001152 <debounceFSM_update+0x126>
 8001058:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <debounceFSM_update+0x34>)
 800105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105e:	bf00      	nop
 8001060:	08001071 	.word	0x08001071
 8001064:	0800109d 	.word	0x0800109d
 8001068:	080010eb 	.word	0x080010eb
 800106c:	08001111 	.word	0x08001111
		case BUTTON_UP:

			if(!pin){
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d06e      	beq.n	800115a <debounceFSM_update+0x12e>
				btn -> state = BUTTON_FALLING;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	719a      	strb	r2, [r3, #6]
				delayInit(&btn->delay,debounceDelay);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3308      	adds	r3, #8
 8001086:	2228      	movs	r2, #40	@ 0x28
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff84 	bl	8000f98 <delayInit>
				delayRead(&btn->delay);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3308      	adds	r3, #8
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff90 	bl	8000fba <delayRead>
			}
			break;
 800109a:	e05e      	b.n	800115a <debounceFSM_update+0x12e>

		case BUTTON_FALLING:

			if(delayRead(&btn->delay)==true){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff8a 	bl	8000fba <delayRead>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d058      	beq.n	800115e <debounceFSM_update+0x132>
				bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	889b      	ldrh	r3, [r3, #4]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f000 fbba 	bl	8001830 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	737b      	strb	r3, [r7, #13]
				if(!pin){										// si paso el tiempo y el boton continua apretado, se enciende el LED y cambia al estado BUTTON_DOWN
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	f083 0301 	eor.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <debounceFSM_update+0xb6>
					btn->pressed = true; 						// buttonState se hace true cuando se confirma que el boton esta presionado
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	751a      	strb	r2, [r3, #20]
					btn -> state = BUTTON_DOWN;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	719a      	strb	r2, [r3, #6]
				}else{btn -> state = BUTTON_UP;}
			}

			break;
 80010e0:	e03d      	b.n	800115e <debounceFSM_update+0x132>
				}else{btn -> state = BUTTON_UP;}
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	719a      	strb	r2, [r3, #6]
			break;
 80010e8:	e039      	b.n	800115e <debounceFSM_update+0x132>

		case BUTTON_DOWN:

			if(pin){
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d038      	beq.n	8001162 <debounceFSM_update+0x136>
				btn -> state = BUTTON_RAISING;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	719a      	strb	r2, [r3, #6]
				delayInit(&btn->delay,debounceDelay);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3308      	adds	r3, #8
 80010fa:	2228      	movs	r2, #40	@ 0x28
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff4a 	bl	8000f98 <delayInit>
				delayRead(&btn->delay);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3308      	adds	r3, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff56 	bl	8000fba <delayRead>
			}

			break;
 800110e:	e028      	b.n	8001162 <debounceFSM_update+0x136>

		case BUTTON_RAISING:

			if(delayRead(&btn->delay)==true){
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3308      	adds	r3, #8
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff50 	bl	8000fba <delayRead>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d022      	beq.n	8001166 <debounceFSM_update+0x13a>
				bool pin = HAL_GPIO_ReadPin(btn -> port, btn -> pin);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	889b      	ldrh	r3, [r3, #4]
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f000 fb80 	bl	8001830 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	73bb      	strb	r3, [r7, #14]
				if(pin){										// si paso el tiempo y el boton continua suelto, se apaga el LED y cambia al estado BUTTON_UP
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <debounceFSM_update+0x11e>
					btn -> state = BUTTON_UP;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	719a      	strb	r2, [r3, #6]
				}else{
					btn -> state = BUTTON_DOWN;
				}
			}

			break;
 8001148:	e00d      	b.n	8001166 <debounceFSM_update+0x13a>
					btn -> state = BUTTON_DOWN;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2202      	movs	r2, #2
 800114e:	719a      	strb	r2, [r3, #6]
			break;
 8001150:	e009      	b.n	8001166 <debounceFSM_update+0x13a>

		default:
			debounceFSM_init(btn);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff5c 	bl	8001010 <debounceFSM_init>
			break;
 8001158:	e006      	b.n	8001168 <debounceFSM_update+0x13c>
			break;
 800115a:	bf00      	nop
 800115c:	e004      	b.n	8001168 <debounceFSM_update+0x13c>
			break;
 800115e:	bf00      	nop
 8001160:	e002      	b.n	8001168 <debounceFSM_update+0x13c>
			break;
 8001162:	bf00      	nop
 8001164:	e000      	b.n	8001168 <debounceFSM_update+0x13c>
			break;
 8001166:	bf00      	nop
	}
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <readKey>:

bool readKey(uint8_t i){												// readKey es una funcion publica a la que se le puede consultar por el estado del boton
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	if(buttons[i].pressed){
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <readKey+0x48>)
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3314      	adds	r3, #20
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <readKey+0x38>
		buttons[i].pressed = false;
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	4909      	ldr	r1, [pc, #36]	@ (80011b8 <readKey+0x48>)
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	3314      	adds	r3, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		return true;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <readKey+0x3a>
	}else{
		return false;
 80011a8:	2300      	movs	r3, #0
	}
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f92b 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fae6 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f943 	bl	80014aa <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800123c:	f000 f90b 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000000 	.word	0x20000000
 8001258:	20000098 	.word	0x20000098
 800125c:	20000094 	.word	0x20000094

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000098 	.word	0x20000098
 8001284:	20000178 	.word	0x20000178

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000178 	.word	0x20000178

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	@ (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	@ (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	@ (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d004      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2280      	movs	r2, #128	@ 0x80
 80014da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e00c      	b.n	80014fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2205      	movs	r2, #5
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e165      	b.n	80017f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 8154 	bne.w	80017ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d005      	beq.n	800155a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001556:	2b02      	cmp	r3, #2
 8001558:	d130      	bne.n	80015bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 0201 	and.w	r2, r3, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d017      	beq.n	80015f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80ae 	beq.w	80017ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b5d      	ldr	r3, [pc, #372]	@ (8001808 <HAL_GPIO_Init+0x300>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a5c      	ldr	r2, [pc, #368]	@ (8001808 <HAL_GPIO_Init+0x300>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b5a      	ldr	r3, [pc, #360]	@ (8001808 <HAL_GPIO_Init+0x300>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016aa:	4a58      	ldr	r2, [pc, #352]	@ (800180c <HAL_GPIO_Init+0x304>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001810 <HAL_GPIO_Init+0x308>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d025      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001814 <HAL_GPIO_Init+0x30c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01f      	beq.n	800171e <HAL_GPIO_Init+0x216>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001818 <HAL_GPIO_Init+0x310>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d019      	beq.n	800171a <HAL_GPIO_Init+0x212>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4c      	ldr	r2, [pc, #304]	@ (800181c <HAL_GPIO_Init+0x314>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001820 <HAL_GPIO_Init+0x318>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x20a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001824 <HAL_GPIO_Init+0x31c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x206>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a49      	ldr	r2, [pc, #292]	@ (8001828 <HAL_GPIO_Init+0x320>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x202>
 8001706:	2306      	movs	r3, #6
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x21c>
 800170a:	2307      	movs	r3, #7
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x21c>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x21c>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x21c>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x21c>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x21c>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x21c>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	4935      	ldr	r1, [pc, #212]	@ (800180c <HAL_GPIO_Init+0x304>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b3a      	ldr	r3, [pc, #232]	@ (800182c <HAL_GPIO_Init+0x324>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001766:	4a31      	ldr	r2, [pc, #196]	@ (800182c <HAL_GPIO_Init+0x324>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176c:	4b2f      	ldr	r3, [pc, #188]	@ (800182c <HAL_GPIO_Init+0x324>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001790:	4a26      	ldr	r2, [pc, #152]	@ (800182c <HAL_GPIO_Init+0x324>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001796:	4b25      	ldr	r3, [pc, #148]	@ (800182c <HAL_GPIO_Init+0x324>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ba:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <HAL_GPIO_Init+0x324>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_GPIO_Init+0x324>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e4:	4a11      	ldr	r2, [pc, #68]	@ (800182c <HAL_GPIO_Init+0x324>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f ae96 	bls.w	8001524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40013800 	.word	0x40013800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0cc      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b68      	ldr	r3, [pc, #416]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d90c      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b65      	ldr	r3, [pc, #404]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a52      	ldr	r2, [pc, #328]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800190a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d044      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d119      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d003      	beq.n	8001952 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e067      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001972:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 0203 	bic.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4934      	ldr	r1, [pc, #208]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001984:	f7ff fc80 	bl	8001288 <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff fc7c 	bl	8001288 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e04f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 020c 	and.w	r2, r3, #12
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1eb      	bne.n	800198c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d20c      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f855 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fbe0 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	080031ec 	.word	0x080031ec
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000094 	.word	0x20000094

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a7c:	f7ff fff0 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	0a9b      	lsrs	r3, r3, #10
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	@ (8001a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	080031fc 	.word	0x080031fc

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa4:	f7ff ffdc 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0b5b      	lsrs	r3, r3, #13
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	@ (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	080031fc 	.word	0x080031fc

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b0ae      	sub	sp, #184	@ 0xb8
 8001ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aee:	4bcb      	ldr	r3, [pc, #812]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	f200 8206 	bhi.w	8001f08 <HAL_RCC_GetSysClockFreq+0x440>
 8001afc:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b02:	bf00      	nop
 8001b04:	08001b39 	.word	0x08001b39
 8001b08:	08001f09 	.word	0x08001f09
 8001b0c:	08001f09 	.word	0x08001f09
 8001b10:	08001f09 	.word	0x08001f09
 8001b14:	08001b41 	.word	0x08001b41
 8001b18:	08001f09 	.word	0x08001f09
 8001b1c:	08001f09 	.word	0x08001f09
 8001b20:	08001f09 	.word	0x08001f09
 8001b24:	08001b49 	.word	0x08001b49
 8001b28:	08001f09 	.word	0x08001f09
 8001b2c:	08001f09 	.word	0x08001f09
 8001b30:	08001f09 	.word	0x08001f09
 8001b34:	08001d39 	.word	0x08001d39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4bb9      	ldr	r3, [pc, #740]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b3e:	e1e7      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b40:	4bb8      	ldr	r3, [pc, #736]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b46:	e1e3      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b48:	4bb4      	ldr	r3, [pc, #720]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b54:	4bb1      	ldr	r3, [pc, #708]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d071      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4bae      	ldr	r3, [pc, #696]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	2200      	movs	r2, #0
 8001b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b86:	4622      	mov	r2, r4
 8001b88:	462b      	mov	r3, r5
 8001b8a:	f04f 0000 	mov.w	r0, #0
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	0159      	lsls	r1, r3, #5
 8001b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b98:	0150      	lsls	r0, r2, #5
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	1a51      	subs	r1, r2, r1
 8001ba2:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8001baa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001bb8:	4649      	mov	r1, r9
 8001bba:	018b      	lsls	r3, r1, #6
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bc2:	4641      	mov	r1, r8
 8001bc4:	018a      	lsls	r2, r1, #6
 8001bc6:	4641      	mov	r1, r8
 8001bc8:	1a51      	subs	r1, r2, r1
 8001bca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001bcc:	4649      	mov	r1, r9
 8001bce:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001be0:	4649      	mov	r1, r9
 8001be2:	00cb      	lsls	r3, r1, #3
 8001be4:	4641      	mov	r1, r8
 8001be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bea:	4641      	mov	r1, r8
 8001bec:	00ca      	lsls	r2, r1, #3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	189b      	adds	r3, r3, r2
 8001bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	eb42 0303 	adc.w	r3, r2, r3
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c10:	4629      	mov	r1, r5
 8001c12:	024b      	lsls	r3, r1, #9
 8001c14:	4621      	mov	r1, r4
 8001c16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	024a      	lsls	r2, r1, #9
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c26:	2200      	movs	r2, #0
 8001c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c34:	f7fe fae6 	bl	8000204 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c42:	e067      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c44:	4b75      	ldr	r3, [pc, #468]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	099b      	lsrs	r3, r3, #6
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c5e:	2300      	movs	r3, #0
 8001c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c66:	4622      	mov	r2, r4
 8001c68:	462b      	mov	r3, r5
 8001c6a:	f04f 0000 	mov.w	r0, #0
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	0159      	lsls	r1, r3, #5
 8001c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c78:	0150      	lsls	r0, r2, #5
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4621      	mov	r1, r4
 8001c80:	1a51      	subs	r1, r2, r1
 8001c82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c84:	4629      	mov	r1, r5
 8001c86:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001c98:	4649      	mov	r1, r9
 8001c9a:	018b      	lsls	r3, r1, #6
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	018a      	lsls	r2, r1, #6
 8001ca6:	4641      	mov	r1, r8
 8001ca8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cac:	4649      	mov	r1, r9
 8001cae:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cc6:	4692      	mov	sl, r2
 8001cc8:	469b      	mov	fp, r3
 8001cca:	4623      	mov	r3, r4
 8001ccc:	eb1a 0303 	adds.w	r3, sl, r3
 8001cd0:	623b      	str	r3, [r7, #32]
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	028b      	lsls	r3, r1, #10
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	028a      	lsls	r2, r1, #10
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d00:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d06:	f7fe fa7d 	bl	8000204 <__aeabi_uldivmod>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4613      	mov	r3, r2
 8001d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d14:	4b41      	ldr	r3, [pc, #260]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d36:	e0eb      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d38:	4b38      	ldr	r3, [pc, #224]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d44:	4b35      	ldr	r3, [pc, #212]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d06b      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d50:	4b32      	ldr	r3, [pc, #200]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	2200      	movs	r2, #0
 8001d58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d62:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d64:	2300      	movs	r3, #0
 8001d66:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	462b      	mov	r3, r5
 8001d70:	f04f 0000 	mov.w	r0, #0
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	0159      	lsls	r1, r3, #5
 8001d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d7e:	0150      	lsls	r0, r2, #5
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4621      	mov	r1, r4
 8001d86:	1a51      	subs	r1, r2, r1
 8001d88:	61b9      	str	r1, [r7, #24]
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d9e:	4659      	mov	r1, fp
 8001da0:	018b      	lsls	r3, r1, #6
 8001da2:	4651      	mov	r1, sl
 8001da4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001da8:	4651      	mov	r1, sl
 8001daa:	018a      	lsls	r2, r1, #6
 8001dac:	4651      	mov	r1, sl
 8001dae:	ebb2 0801 	subs.w	r8, r2, r1
 8001db2:	4659      	mov	r1, fp
 8001db4:	eb63 0901 	sbc.w	r9, r3, r1
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dcc:	4690      	mov	r8, r2
 8001dce:	4699      	mov	r9, r3
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	eb18 0303 	adds.w	r3, r8, r3
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	462b      	mov	r3, r5
 8001dda:	eb49 0303 	adc.w	r3, r9, r3
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001dec:	4629      	mov	r1, r5
 8001dee:	024b      	lsls	r3, r1, #9
 8001df0:	4621      	mov	r1, r4
 8001df2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001df6:	4621      	mov	r1, r4
 8001df8:	024a      	lsls	r2, r1, #9
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e02:	2200      	movs	r2, #0
 8001e04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e0c:	f7fe f9fa 	bl	8000204 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e1a:	e065      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x420>
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e28:	4b3d      	ldr	r3, [pc, #244]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	4611      	mov	r1, r2
 8001e34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e38:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001e42:	4642      	mov	r2, r8
 8001e44:	464b      	mov	r3, r9
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	0159      	lsls	r1, r3, #5
 8001e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e54:	0150      	lsls	r0, r2, #5
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	1a51      	subs	r1, r2, r1
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	4649      	mov	r1, r9
 8001e62:	eb63 0301 	sbc.w	r3, r3, r1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e74:	4659      	mov	r1, fp
 8001e76:	018b      	lsls	r3, r1, #6
 8001e78:	4651      	mov	r1, sl
 8001e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e7e:	4651      	mov	r1, sl
 8001e80:	018a      	lsls	r2, r1, #6
 8001e82:	4651      	mov	r1, sl
 8001e84:	1a54      	subs	r4, r2, r1
 8001e86:	4659      	mov	r1, fp
 8001e88:	eb63 0501 	sbc.w	r5, r3, r1
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	00eb      	lsls	r3, r5, #3
 8001e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e9a:	00e2      	lsls	r2, r4, #3
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	461d      	mov	r5, r3
 8001ea0:	4643      	mov	r3, r8
 8001ea2:	18e3      	adds	r3, r4, r3
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	eb45 0303 	adc.w	r3, r5, r3
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	028b      	lsls	r3, r1, #10
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	028a      	lsls	r2, r1, #10
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ed4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001ed6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001eda:	f7fe f993 	bl	8000204 <__aeabi_uldivmod>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x458>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0f1b      	lsrs	r3, r3, #28
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f06:	e003      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	37b8      	adds	r7, #184	@ 0xb8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	00f42400 	.word	0x00f42400

08001f28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e28d      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8083 	beq.w	800204e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f48:	4b94      	ldr	r3, [pc, #592]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d019      	beq.n	8001f88 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f54:	4b91      	ldr	r3, [pc, #580]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f60:	4b8e      	ldr	r3, [pc, #568]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f6c:	d00c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d112      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7a:	4b88      	ldr	r3, [pc, #544]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f86:	d10b      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	4b84      	ldr	r3, [pc, #528]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d05b      	beq.n	800204c <HAL_RCC_OscConfig+0x124>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d157      	bne.n	800204c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e25a      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x90>
 8001faa:	4b7c      	ldr	r3, [pc, #496]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7b      	ldr	r2, [pc, #492]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xcc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0xb4>
 8001fc2:	4b76      	ldr	r3, [pc, #472]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a75      	ldr	r2, [pc, #468]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b73      	ldr	r3, [pc, #460]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a72      	ldr	r2, [pc, #456]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xcc>
 8001fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6b      	ldr	r2, [pc, #428]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f944 	bl	8001288 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff f940 	bl	8001288 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e21f      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b61      	ldr	r3, [pc, #388]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xdc>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f930 	bl	8001288 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f92c 	bl	8001288 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e20b      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b57      	ldr	r3, [pc, #348]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x104>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06f      	beq.n	800213a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800205a:	4b50      	ldr	r3, [pc, #320]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002066:	4b4d      	ldr	r3, [pc, #308]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
        || \
 800206e:	2b08      	cmp	r3, #8
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002072:	4b4a      	ldr	r3, [pc, #296]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207e:	4b47      	ldr	r3, [pc, #284]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b44      	ldr	r3, [pc, #272]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x186>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e1d3      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4937      	ldr	r1, [pc, #220]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	e03a      	b.n	800213a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020cc:	4b34      	ldr	r3, [pc, #208]	@ (80021a0 <HAL_RCC_OscConfig+0x278>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7ff f8d9 	bl	8001288 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff f8d5 	bl	8001288 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1b4      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b28      	ldr	r3, [pc, #160]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4925      	ldr	r1, [pc, #148]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_RCC_OscConfig+0x278>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f8b8 	bl	8001288 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff f8b4 	bl	8001288 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e193      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d036      	beq.n	80021b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d016      	beq.n	800217c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_RCC_OscConfig+0x27c>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff f898 	bl	8001288 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7ff f894 	bl	8001288 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e173      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_OscConfig+0x274>)
 8002170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x234>
 800217a:	e01b      	b.n	80021b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_OscConfig+0x27c>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff f881 	bl	8001288 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	e00e      	b.n	80021a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218a:	f7ff f87d 	bl	8001288 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d907      	bls.n	80021a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e15c      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
 800219c:	40023800 	.word	0x40023800
 80021a0:	42470000 	.word	0x42470000
 80021a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	4b8a      	ldr	r3, [pc, #552]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80021aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ea      	bne.n	800218a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8097 	beq.w	80022f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b83      	ldr	r3, [pc, #524]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b7f      	ldr	r3, [pc, #508]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	4a7e      	ldr	r2, [pc, #504]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e2:	4b7c      	ldr	r3, [pc, #496]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ee:	2301      	movs	r3, #1
 80021f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b79      	ldr	r3, [pc, #484]	@ (80023d8 <HAL_RCC_OscConfig+0x4b0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d118      	bne.n	8002230 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fe:	4b76      	ldr	r3, [pc, #472]	@ (80023d8 <HAL_RCC_OscConfig+0x4b0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a75      	ldr	r2, [pc, #468]	@ (80023d8 <HAL_RCC_OscConfig+0x4b0>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220a:	f7ff f83d 	bl	8001288 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002212:	f7ff f839 	bl	8001288 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e118      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	4b6c      	ldr	r3, [pc, #432]	@ (80023d8 <HAL_RCC_OscConfig+0x4b0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x31e>
 8002238:	4b66      	ldr	r3, [pc, #408]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	4a65      	ldr	r2, [pc, #404]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6713      	str	r3, [r2, #112]	@ 0x70
 8002244:	e01c      	b.n	8002280 <HAL_RCC_OscConfig+0x358>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b05      	cmp	r3, #5
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x340>
 800224e:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	4a60      	ldr	r2, [pc, #384]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6713      	str	r3, [r2, #112]	@ 0x70
 800225a:	4b5e      	ldr	r3, [pc, #376]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	4a5d      	ldr	r2, [pc, #372]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6713      	str	r3, [r2, #112]	@ 0x70
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0x358>
 8002268:	4b5a      	ldr	r3, [pc, #360]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4a59      	ldr	r2, [pc, #356]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	@ 0x70
 8002274:	4b57      	ldr	r3, [pc, #348]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	4a56      	ldr	r2, [pc, #344]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 800227a:	f023 0304 	bic.w	r3, r3, #4
 800227e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d015      	beq.n	80022b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe fffe 	bl	8001288 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7fe fffa 	bl	8001288 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0d7      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	4b4b      	ldr	r3, [pc, #300]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0ee      	beq.n	8002290 <HAL_RCC_OscConfig+0x368>
 80022b2:	e014      	b.n	80022de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7fe ffe8 	bl	8001288 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7fe ffe4 	bl	8001288 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0c1      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ee      	bne.n	80022bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022de:	7dfb      	ldrb	r3, [r7, #23]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	4a3a      	ldr	r2, [pc, #232]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80022ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80ad 	beq.w	8002454 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022fa:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d060      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d145      	bne.n	800239a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b33      	ldr	r3, [pc, #204]	@ (80023dc <HAL_RCC_OscConfig+0x4b4>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe ffb8 	bl	8001288 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe ffb4 	bl	8001288 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e093      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	4b29      	ldr	r3, [pc, #164]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	071b      	lsls	r3, r3, #28
 8002366:	491b      	ldr	r1, [pc, #108]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x4b4>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe ff89 	bl	8001288 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe ff85 	bl	8001288 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e064      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x452>
 8002398:	e05c      	b.n	8002454 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_RCC_OscConfig+0x4b4>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe ff72 	bl	8001288 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe ff6e 	bl	8001288 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04d      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_RCC_OscConfig+0x4ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x480>
 80023c6:	e045      	b.n	8002454 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e040      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40007000 	.word	0x40007000
 80023dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <HAL_RCC_OscConfig+0x538>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d030      	beq.n	8002450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d129      	bne.n	8002450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d122      	bne.n	8002450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002418:	4293      	cmp	r3, r2
 800241a:	d119      	bne.n	8002450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d10f      	bne.n	8002450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07b      	b.n	800256e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002486:	d009      	beq.n	800249c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
 800248e:	e005      	b.n	800249c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe f9aa 	bl	8000810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002520:	ea42 0103 	orr.w	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	f003 0104 	and.w	r1, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	f003 0210 	and.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800255c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b088      	sub	sp, #32
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002586:	f7fe fe7f 	bl	8001288 <HAL_GetTick>
 800258a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d001      	beq.n	80025a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
 800259e:	e12a      	b.n	80027f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_SPI_Transmit+0x36>
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e122      	b.n	80027f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_SPI_Transmit+0x48>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e11b      	b.n	80027f6 <HAL_SPI_Transmit+0x280>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2203      	movs	r2, #3
 80025ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	88fa      	ldrh	r2, [r7, #6]
 80025de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800260c:	d10f      	bne.n	800262e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800261c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800262c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002638:	2b40      	cmp	r3, #64	@ 0x40
 800263a:	d007      	beq.n	800264c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800264a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002654:	d152      	bne.n	80026fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_SPI_Transmit+0xee>
 800265e:	8b7b      	ldrh	r3, [r7, #26]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d145      	bne.n	80026f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	1c9a      	adds	r2, r3, #2
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002688:	e032      	b.n	80026f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d112      	bne.n	80026be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	1c9a      	adds	r2, r3, #2
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026bc:	e018      	b.n	80026f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026be:	f7fe fde3 	bl	8001288 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d803      	bhi.n	80026d6 <HAL_SPI_Transmit+0x160>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026d4:	d102      	bne.n	80026dc <HAL_SPI_Transmit+0x166>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e082      	b.n	80027f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1c7      	bne.n	800268a <HAL_SPI_Transmit+0x114>
 80026fa:	e053      	b.n	80027a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_SPI_Transmit+0x194>
 8002704:	8b7b      	ldrh	r3, [r7, #26]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d147      	bne.n	800279a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002730:	e033      	b.n	800279a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d113      	bne.n	8002768 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002766:	e018      	b.n	800279a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002768:	f7fe fd8e 	bl	8001288 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d803      	bhi.n	8002780 <HAL_SPI_Transmit+0x20a>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Transmit+0x210>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e02d      	b.n	80027f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1c6      	bne.n	8002732 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f9cf 	bl	8002b4c <SPI_EndRxTxTransaction>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10a      	bne.n	80027d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10f      	bne.n	8002844 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
    return;
 8002842:	e0d7      	b.n	80029f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_SPI_IRQHandler+0x66>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	09db      	lsrs	r3, r3, #7
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
    return;
 8002864:	e0c6      	b.n	80029f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_SPI_IRQHandler+0x8c>
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80b4 	beq.w	80029f4 <HAL_SPI_IRQHandler+0x1f4>
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80ad 	beq.w	80029f4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d023      	beq.n	80028ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d011      	beq.n	80028d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	e00b      	b.n	80028ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]
        return;
 80028ec:	e082      	b.n	80029f4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d014      	beq.n	8002924 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f043 0208 	orr.w	r2, r3, #8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294e:	2b00      	cmp	r3, #0
 8002950:	d04f      	beq.n	80029f2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002960:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d104      	bne.n	800297e <HAL_SPI_IRQHandler+0x17e>
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d034      	beq.n	80029e8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0203 	bic.w	r2, r2, #3
 800298c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d011      	beq.n	80029ba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <HAL_SPI_IRQHandler+0x1fc>)
 800299c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fd8d 	bl	80014c2 <HAL_DMA_Abort_IT>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <HAL_SPI_IRQHandler+0x1fc>)
 80029c8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fd77 	bl	80014c2 <HAL_DMA_Abort_IT>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80029e6:	e003      	b.n	80029f0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f809 	bl	8002a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80029ee:	e000      	b.n	80029f2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80029f0:	bf00      	nop
    return;
 80029f2:	bf00      	nop
  }
}
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	08002a15 	.word	0x08002a15

08002a00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff ffe6 	bl	8002a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a4c:	f7fe fc1c 	bl	8001288 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a5c:	f7fe fc14 	bl	8001288 <HAL_GetTick>
 8002a60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a62:	4b39      	ldr	r3, [pc, #228]	@ (8002b48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	015b      	lsls	r3, r3, #5
 8002a68:	0d1b      	lsrs	r3, r3, #20
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a72:	e055      	b.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a7a:	d051      	beq.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a7c:	f7fe fc04 	bl	8001288 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d902      	bls.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d13d      	bne.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aaa:	d111      	bne.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ab4:	d004      	beq.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002abe:	d107      	bne.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ad8:	d10f      	bne.n	8002afa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e018      	b.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	e002      	b.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d19a      	bne.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000000 	.word	0x20000000

08002b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	2102      	movs	r1, #2
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff ff6a 	bl	8002a3c <SPI_WaitFlagStateUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e032      	b.n	8002be4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <SPI_EndRxTxTransaction+0xa0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf0 <SPI_EndRxTxTransaction+0xa4>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	0d5b      	lsrs	r3, r3, #21
 8002b8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b9c:	d112      	bne.n	8002bc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	@ 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff ff47 	bl	8002a3c <SPI_WaitFlagStateUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d016      	beq.n	8002be2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e00f      	b.n	8002be4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	2b80      	cmp	r3, #128	@ 0x80
 8002bdc:	d0f2      	beq.n	8002bc4 <SPI_EndRxTxTransaction+0x78>
 8002bde:	e000      	b.n	8002be2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002be0:	bf00      	nop
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	165e9f81 	.word	0x165e9f81

08002bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e042      	b.n	8002c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fe68 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	@ 0x24
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f82b 	bl	8002c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b0c0      	sub	sp, #256	@ 0x100
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	ea40 0301 	orr.w	r3, r0, r1
 8002cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cec:	f021 010c 	bic.w	r1, r1, #12
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0e:	6999      	ldr	r1, [r3, #24]
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	ea40 0301 	orr.w	r3, r0, r1
 8002d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b8f      	ldr	r3, [pc, #572]	@ (8002f60 <UART_SetConfig+0x2cc>)
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d005      	beq.n	8002d34 <UART_SetConfig+0xa0>
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f64 <UART_SetConfig+0x2d0>)
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d104      	bne.n	8002d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d34:	f7fe feb4 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 8002d38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d3c:	e003      	b.n	8002d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3e:	f7fe fe9b 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8002d42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d50:	f040 810c 	bne.w	8002f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d66:	4622      	mov	r2, r4
 8002d68:	462b      	mov	r3, r5
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d76:	4621      	mov	r1, r4
 8002d78:	eb12 0801 	adds.w	r8, r2, r1
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	eb43 0901 	adc.w	r9, r3, r1
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	eb18 0303 	adds.w	r3, r8, r3
 8002da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002da4:	462b      	mov	r3, r5
 8002da6:	eb49 0303 	adc.w	r3, r9, r3
 8002daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	18db      	adds	r3, r3, r3
 8002dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc8:	4613      	mov	r3, r2
 8002dca:	eb42 0303 	adc.w	r3, r2, r3
 8002dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd8:	f7fd fa14 	bl	8000204 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4b61      	ldr	r3, [pc, #388]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002de2:	fba3 2302 	umull	r2, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	011c      	lsls	r4, r3, #4
 8002dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	1891      	adds	r1, r2, r2
 8002e02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e04:	415b      	adcs	r3, r3
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e12:	4649      	mov	r1, r9
 8002e14:	eb43 0b01 	adc.w	fp, r3, r1
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e2c:	4692      	mov	sl, r2
 8002e2e:	469b      	mov	fp, r3
 8002e30:	4643      	mov	r3, r8
 8002e32:	eb1a 0303 	adds.w	r3, sl, r3
 8002e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	18db      	adds	r3, r3, r3
 8002e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e5e:	4613      	mov	r3, r2
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e6e:	f7fd f9c9 	bl	8000204 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	4b3b      	ldr	r3, [pc, #236]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2264      	movs	r2, #100	@ 0x64
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	1acb      	subs	r3, r1, r3
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e8e:	4b36      	ldr	r3, [pc, #216]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002e90:	fba3 2302 	umull	r2, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e9c:	441c      	add	r4, r3
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	1891      	adds	r1, r2, r2
 8002eb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	1851      	adds	r1, r2, r1
 8002ec4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	414b      	adcs	r3, r1
 8002eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed8:	4659      	mov	r1, fp
 8002eda:	00cb      	lsls	r3, r1, #3
 8002edc:	4651      	mov	r1, sl
 8002ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	00ca      	lsls	r2, r1, #3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	4642      	mov	r2, r8
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	eb42 0303 	adc.w	r3, r2, r3
 8002efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f14:	460b      	mov	r3, r1
 8002f16:	18db      	adds	r3, r3, r3
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	eb42 0303 	adc.w	r3, r2, r3
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f2a:	f7fd f96b 	bl	8000204 <__aeabi_uldivmod>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	@ 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	3332      	adds	r3, #50	@ 0x32
 8002f46:	4a08      	ldr	r2, [pc, #32]	@ (8002f68 <UART_SetConfig+0x2d4>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4422      	add	r2, r4
 8002f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f5c:	e106      	b.n	800316c <UART_SetConfig+0x4d8>
 8002f5e:	bf00      	nop
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40011400 	.word	0x40011400
 8002f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f7e:	4642      	mov	r2, r8
 8002f80:	464b      	mov	r3, r9
 8002f82:	1891      	adds	r1, r2, r2
 8002f84:	6239      	str	r1, [r7, #32]
 8002f86:	415b      	adcs	r3, r3
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8e:	4641      	mov	r1, r8
 8002f90:	1854      	adds	r4, r2, r1
 8002f92:	4649      	mov	r1, r9
 8002f94:	eb43 0501 	adc.w	r5, r3, r1
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	00eb      	lsls	r3, r5, #3
 8002fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa6:	00e2      	lsls	r2, r4, #3
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	18e3      	adds	r3, r4, r3
 8002fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	eb45 0303 	adc.w	r3, r5, r3
 8002fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fda:	4629      	mov	r1, r5
 8002fdc:	008b      	lsls	r3, r1, #2
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	008a      	lsls	r2, r1, #2
 8002fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fec:	f7fd f90a 	bl	8000204 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4b60      	ldr	r3, [pc, #384]	@ (8003178 <UART_SetConfig+0x4e4>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	011c      	lsls	r4, r3, #4
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800300c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003010:	4642      	mov	r2, r8
 8003012:	464b      	mov	r3, r9
 8003014:	1891      	adds	r1, r2, r2
 8003016:	61b9      	str	r1, [r7, #24]
 8003018:	415b      	adcs	r3, r3
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003020:	4641      	mov	r1, r8
 8003022:	1851      	adds	r1, r2, r1
 8003024:	6139      	str	r1, [r7, #16]
 8003026:	4649      	mov	r1, r9
 8003028:	414b      	adcs	r3, r1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003038:	4659      	mov	r1, fp
 800303a:	00cb      	lsls	r3, r1, #3
 800303c:	4651      	mov	r1, sl
 800303e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003042:	4651      	mov	r1, sl
 8003044:	00ca      	lsls	r2, r1, #3
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	4603      	mov	r3, r0
 800304c:	4642      	mov	r2, r8
 800304e:	189b      	adds	r3, r3, r2
 8003050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003054:	464b      	mov	r3, r9
 8003056:	460a      	mov	r2, r1
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800306a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003078:	4649      	mov	r1, r9
 800307a:	008b      	lsls	r3, r1, #2
 800307c:	4641      	mov	r1, r8
 800307e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003082:	4641      	mov	r1, r8
 8003084:	008a      	lsls	r2, r1, #2
 8003086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800308a:	f7fd f8bb 	bl	8000204 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4611      	mov	r1, r2
 8003094:	4b38      	ldr	r3, [pc, #224]	@ (8003178 <UART_SetConfig+0x4e4>)
 8003096:	fba3 2301 	umull	r2, r3, r3, r1
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2264      	movs	r2, #100	@ 0x64
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	@ 0x32
 80030a8:	4a33      	ldr	r2, [pc, #204]	@ (8003178 <UART_SetConfig+0x4e4>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b4:	441c      	add	r4, r3
 80030b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ba:	2200      	movs	r2, #0
 80030bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80030be:	677a      	str	r2, [r7, #116]	@ 0x74
 80030c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030c4:	4642      	mov	r2, r8
 80030c6:	464b      	mov	r3, r9
 80030c8:	1891      	adds	r1, r2, r2
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	415b      	adcs	r3, r3
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d4:	4641      	mov	r1, r8
 80030d6:	1851      	adds	r1, r2, r1
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	4649      	mov	r1, r9
 80030dc:	414b      	adcs	r3, r1
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030ec:	4659      	mov	r1, fp
 80030ee:	00cb      	lsls	r3, r1, #3
 80030f0:	4651      	mov	r1, sl
 80030f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f6:	4651      	mov	r1, sl
 80030f8:	00ca      	lsls	r2, r1, #3
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	4642      	mov	r2, r8
 8003102:	189b      	adds	r3, r3, r2
 8003104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003106:	464b      	mov	r3, r9
 8003108:	460a      	mov	r2, r1
 800310a:	eb42 0303 	adc.w	r3, r2, r3
 800310e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	663b      	str	r3, [r7, #96]	@ 0x60
 800311a:	667a      	str	r2, [r7, #100]	@ 0x64
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003128:	4649      	mov	r1, r9
 800312a:	008b      	lsls	r3, r1, #2
 800312c:	4641      	mov	r1, r8
 800312e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003132:	4641      	mov	r1, r8
 8003134:	008a      	lsls	r2, r1, #2
 8003136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800313a:	f7fd f863 	bl	8000204 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <UART_SetConfig+0x4e4>)
 8003144:	fba3 1302 	umull	r1, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	2164      	movs	r1, #100	@ 0x64
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	3332      	adds	r3, #50	@ 0x32
 8003156:	4a08      	ldr	r2, [pc, #32]	@ (8003178 <UART_SetConfig+0x4e4>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4422      	add	r2, r4
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003172:	46bd      	mov	sp, r7
 8003174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003178:	51eb851f 	.word	0x51eb851f

0800317c <memset>:
 800317c:	4402      	add	r2, r0
 800317e:	4603      	mov	r3, r0
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <memset+0xa>
 8003184:	4770      	bx	lr
 8003186:	f803 1b01 	strb.w	r1, [r3], #1
 800318a:	e7f9      	b.n	8003180 <memset+0x4>

0800318c <__libc_init_array>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4d0d      	ldr	r5, [pc, #52]	@ (80031c4 <__libc_init_array+0x38>)
 8003190:	4c0d      	ldr	r4, [pc, #52]	@ (80031c8 <__libc_init_array+0x3c>)
 8003192:	1b64      	subs	r4, r4, r5
 8003194:	10a4      	asrs	r4, r4, #2
 8003196:	2600      	movs	r6, #0
 8003198:	42a6      	cmp	r6, r4
 800319a:	d109      	bne.n	80031b0 <__libc_init_array+0x24>
 800319c:	4d0b      	ldr	r5, [pc, #44]	@ (80031cc <__libc_init_array+0x40>)
 800319e:	4c0c      	ldr	r4, [pc, #48]	@ (80031d0 <__libc_init_array+0x44>)
 80031a0:	f000 f818 	bl	80031d4 <_init>
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	2600      	movs	r6, #0
 80031aa:	42a6      	cmp	r6, r4
 80031ac:	d105      	bne.n	80031ba <__libc_init_array+0x2e>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b4:	4798      	blx	r3
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7ee      	b.n	8003198 <__libc_init_array+0xc>
 80031ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80031be:	4798      	blx	r3
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <__libc_init_array+0x1e>
 80031c4:	080032fc 	.word	0x080032fc
 80031c8:	080032fc 	.word	0x080032fc
 80031cc:	080032fc 	.word	0x080032fc
 80031d0:	08003300 	.word	0x08003300

080031d4 <_init>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	bf00      	nop
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr

080031e0 <_fini>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr
