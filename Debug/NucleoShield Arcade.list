
NucleoShield Arcade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003074  08003074  00004074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800307c  0800307c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003084  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08003090  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003090  000050ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b713  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f43  00000000  00000000  0001074f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00012698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077e  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217e0  00000000  00000000  000137de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c99f  00000000  00000000  00034fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d92  00000000  00000000  0004195d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b6ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002704  00000000  00000000  0010b734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0010de38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f44 	.word	0x08002f44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f44 	.word	0x08002f44

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fcee 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f818 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART2_UART_Init();
 800053c:	f000 f8ba 	bl	80006b4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000540:	f000 f882 	bl	8000648 <MX_SPI2_Init>
  board_gpio_init();
 8000544:	f000 fa3c 	bl	80009c0 <board_gpio_init>
  MAX7219_InitAll();
 8000548:	f000 fa9a 	bl	8000a80 <MAX7219_InitAll>



  scrollText16("HOLA JUAMPI ", 120);
 800054c:	2178      	movs	r1, #120	@ 0x78
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <main+0x38>)
 8000550:	f000 fc28 	bl	8000da4 <scrollText16>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  shiftLeft16();
 8000554:	f000 fbba 	bl	8000ccc <shiftLeft16>
	  updateDisplay16();
 8000558:	f000 fb78 	bl	8000c4c <updateDisplay16>
	  HAL_Delay(200);
 800055c:	20c8      	movs	r0, #200	@ 0xc8
 800055e:	f000 fd4b 	bl	8000ff8 <HAL_Delay>
	  shiftLeft16();
 8000562:	bf00      	nop
 8000564:	e7f6      	b.n	8000554 <main+0x24>
 8000566:	bf00      	nop
 8000568:	08002f5c 	.word	0x08002f5c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	@ 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fcb6 	bl	8002eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage  */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <SystemClock_Config+0xd4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a29      	ldr	r2, [pc, #164]	@ (8000640 <SystemClock_Config+0xd4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <SystemClock_Config+0xd4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <SystemClock_Config+0xd8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b8:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <SystemClock_Config+0xd8>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <SystemClock_Config+0xd8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e0:	2310      	movs	r3, #16
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fb4c 	bl	8001c98 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000606:	f000 f87f 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 ffec 	bl	8001604 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000632:	f000 f869 	bl	8000708 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_SPI2_Init+0x64>)
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <MX_SPI2_Init+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <MX_SPI2_Init+0x64>)
 8000654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_SPI2_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_SPI2_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_SPI2_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_SPI2_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_SPI2_Init+0x64>)
 8000674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000678:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_SPI2_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <MX_SPI2_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_SPI2_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <MX_SPI2_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_SPI2_Init+0x64>)
 8000694:	220a      	movs	r2, #10
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	@ (80006ac <MX_SPI2_Init+0x64>)
 800069a:	f001 fd9b 	bl	80021d4 <HAL_SPI_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006a4:	f000 f830 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40003800 	.word	0x40003800

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <MX_USART2_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ec:	f002 f93a 	bl	8002964 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f807 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000080 	.word	0x20000080
 8000704:	40004400 	.word	0x40004400

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <HAL_MspInit+0x4c>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000728:	6453      	str	r3, [r2, #68]	@ 0x44
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <HAL_MspInit+0x4c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	@ 0x40
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000752:	2007      	movs	r0, #7
 8000754:	f000 fd44 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800

08000764 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a2c      	ldr	r2, [pc, #176]	@ (8000834 <HAL_SPI_MspInit+0xd0>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d152      	bne.n	800082c <HAL_SPI_MspInit+0xc8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	4a2a      	ldr	r2, [pc, #168]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000794:	6413      	str	r3, [r2, #64]	@ 0x40
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <HAL_SPI_MspInit+0xd4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80007ea:	2307      	movs	r3, #7
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4811      	ldr	r0, [pc, #68]	@ (800083c <HAL_SPI_MspInit+0xd8>)
 80007f6:	f000 fd57 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080c:	2305      	movs	r3, #5
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480a      	ldr	r0, [pc, #40]	@ (8000840 <HAL_SPI_MspInit+0xdc>)
 8000818:	f000 fd46 	bl	80012a8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2024      	movs	r0, #36	@ 0x24
 8000822:	f000 fce8 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000826:	2024      	movs	r0, #36	@ 0x24
 8000828:	f000 fd01 	bl	800122e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40003800 	.word	0x40003800
 8000838:	40023800 	.word	0x40023800
 800083c:	40020800 	.word	0x40020800
 8000840:	40020400 	.word	0x40020400

08000844 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a19      	ldr	r2, [pc, #100]	@ (80008c8 <HAL_UART_MspInit+0x84>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d12b      	bne.n	80008be <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <HAL_UART_MspInit+0x88>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a17      	ldr	r2, [pc, #92]	@ (80008cc <HAL_UART_MspInit+0x88>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <HAL_UART_MspInit+0x88>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_UART_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a10      	ldr	r2, [pc, #64]	@ (80008cc <HAL_UART_MspInit+0x88>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_UART_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800089e:	230c      	movs	r3, #12
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ae:	2307      	movs	r3, #7
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <HAL_UART_MspInit+0x8c>)
 80008ba:	f000 fcf5 	bl	80012a8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	@ 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 fb45 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <SPI2_IRQHandler+0x10>)
 800093a:	f001 fe19 	bl	8002570 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000028 	.word	0x20000028

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000970:	f7ff ffea 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	@ (80009ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	@ (80009b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800099a:	f002 faaf 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099e:	f7ff fdc7 	bl	8000530 <main>
  bx  lr    
 80009a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b0:	08003084 	.word	0x08003084
  ldr r2, =_sbss
 80009b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b8:	200000ec 	.word	0x200000ec

080009bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC_IRQHandler>
	...

080009c0 <board_gpio_init>:
#include "boardConfig.h"

void board_gpio_init(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <board_gpio_init+0xb8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a26      	ldr	r2, [pc, #152]	@ (8000a78 <board_gpio_init+0xb8>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <board_gpio_init+0xb8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <board_gpio_init+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <board_gpio_init+0xb8>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <board_gpio_init+0xb8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <board_gpio_init+0xb8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <board_gpio_init+0xb8>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <board_gpio_init+0xb8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <board_gpio_init+0xb8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a11      	ldr	r2, [pc, #68]	@ (8000a78 <board_gpio_init+0xb8>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <board_gpio_init+0xb8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <board_gpio_init+0xbc>)
 8000a60:	f000 fc22 	bl	80012a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a6a:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <board_gpio_init+0xbc>)
 8000a6c:	f000 fdb0 	bl	80015d0 <HAL_GPIO_WritePin>


}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	@ 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020800 	.word	0x40020800

08000a80 <MAX7219_InitAll>:
static uint8_t frameBuffer16[DISPLAY_ROWS][DISPLAY_COLS/8]; // representacion del display en RAM

// Se inicializan los 4 displays

void MAX7219_InitAll(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af02      	add	r7, sp, #8

    MAX7219_WriteRowAll(MAX7219_SHUTDOWN, 0x01, 0x01, 0x01, 0x01); // 0x0C -> Shutdown | 0x01 -> Operacion Normal
 8000a86:	2301      	movs	r3, #1
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2101      	movs	r1, #1
 8000a90:	200c      	movs	r0, #12
 8000a92:	f000 fa0d 	bl	8000eb0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_SCAN, 0x07, 0x07, 0x07, 0x07); // 0x0B -> Escaneo del Display (filas) | 0x07 -> Habilita las 8 filas
 8000a96:	2307      	movs	r3, #7
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	2107      	movs	r1, #7
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f000 fa05 	bl	8000eb0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_MODE, 0x00, 0x00, 0x00, 0x00); // 0x09 -> Modo del Display (Matriz, 7 segmentos) | 0x00 -> Sin Decode (Matriz)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2009      	movs	r0, #9
 8000ab2:	f000 f9fd 	bl	8000eb0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_BRIGHTNESS, 0x02, 0x02, 0x02, 0x02); // 0x0A -> Brillo del Display | 0x02 -> Configurable de 0 a 15 (PWM)
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2302      	movs	r3, #2
 8000abc:	2202      	movs	r2, #2
 8000abe:	2102      	movs	r1, #2
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 f9f5 	bl	8000eb0 <MAX7219_WriteRowAll>

    MAX7219_WriteRowAll(MAX7219_TEST, 0x00, 0x00, 0x00, 0x00); // 0x0F -> Test del Display | 0x00 -> Test Apagado
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f000 f9ed 	bl	8000eb0 <MAX7219_WriteRowAll>

    // Limpia la pantalla
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	e00a      	b.n	8000af2 <MAX7219_InitAll+0x72>
        MAX7219_WriteRowAll(row, 0xFF, 0xFF, 0xFF, 0xFF);
 8000adc:	79f8      	ldrb	r0, [r7, #7]
 8000ade:	23ff      	movs	r3, #255	@ 0xff
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	23ff      	movs	r3, #255	@ 0xff
 8000ae4:	22ff      	movs	r2, #255	@ 0xff
 8000ae6:	21ff      	movs	r1, #255	@ 0xff
 8000ae8:	f000 f9e2 	bl	8000eb0 <MAX7219_WriteRowAll>
    for (uint8_t row = 1; row <= MAX7219_ROWS; row++) {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	3301      	adds	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d9f1      	bls.n	8000adc <MAX7219_InitAll+0x5c>
    }

    // Limpia el frameBuffer
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	71bb      	strb	r3, [r7, #6]
 8000afc:	e00d      	b.n	8000b1a <MAX7219_InitAll+0x9a>
    	frameBuffer16[row][0] = 0;
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <MAX7219_InitAll+0xac>)
 8000b02:	2100      	movs	r1, #0
 8000b04:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    	frameBuffer16[row][1] = 0;
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <MAX7219_InitAll+0xac>)
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	2200      	movs	r2, #0
 8000b12:	705a      	strb	r2, [r3, #1]
    for (uint8_t row = 0; row < DISPLAY_ROWS ; row++){
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	3301      	adds	r3, #1
 8000b18:	71bb      	strb	r3, [r7, #6]
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d9ee      	bls.n	8000afe <MAX7219_InitAll+0x7e>
    }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000c8 	.word	0x200000c8

08000b30 <setPixel16>:


// enciende o apaga un pixel de la matriz
void setPixel16(uint8_t x, uint8_t y, bool on) {
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	71bb      	strb	r3, [r7, #6]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	717b      	strb	r3, [r7, #5]
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d840      	bhi.n	8000bca <setPixel16+0x9a>
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d83d      	bhi.n	8000bca <setPixel16+0x9a>

    uint8_t byteIndex = x / 8;       // 0 o 1
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	73fb      	strb	r3, [r7, #15]
    uint8_t bitIndex  = x % 8;       // 0 a 7
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	73bb      	strb	r3, [r7, #14]

    if (on)
 8000b5c:	797b      	ldrb	r3, [r7, #5]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d018      	beq.n	8000b94 <setPixel16+0x64>
        frameBuffer16[y][byteIndex] |=  (1 << bitIndex);
 8000b62:	79ba      	ldrb	r2, [r7, #6]
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	491c      	ldr	r1, [pc, #112]	@ (8000bd8 <setPixel16+0xa8>)
 8000b68:	0052      	lsls	r2, r2, #1
 8000b6a:	440a      	add	r2, r1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b25a      	sxtb	r2, r3
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b259      	sxtb	r1, r3
 8000b80:	79ba      	ldrb	r2, [r7, #6]
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	b2c8      	uxtb	r0, r1
 8000b86:	4914      	ldr	r1, [pc, #80]	@ (8000bd8 <setPixel16+0xa8>)
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	440a      	add	r2, r1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4602      	mov	r2, r0
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e01b      	b.n	8000bcc <setPixel16+0x9c>
    else
        frameBuffer16[y][byteIndex] &= ~(1 << bitIndex);
 8000b94:	79ba      	ldrb	r2, [r7, #6]
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	490f      	ldr	r1, [pc, #60]	@ (8000bd8 <setPixel16+0xa8>)
 8000b9a:	0052      	lsls	r2, r2, #1
 8000b9c:	440a      	add	r2, r1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25a      	sxtb	r2, r3
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	b259      	sxtb	r1, r3
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	b2c8      	uxtb	r0, r1
 8000bbc:	4906      	ldr	r1, [pc, #24]	@ (8000bd8 <setPixel16+0xa8>)
 8000bbe:	0052      	lsls	r2, r2, #1
 8000bc0:	440a      	add	r2, r1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e000      	b.n	8000bcc <setPixel16+0x9c>
    if (x >= DISPLAY_COLS || y >= DISPLAY_ROWS) return;  // fuera de rango
 8000bca:	bf00      	nop
}
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200000c8 	.word	0x200000c8

08000bdc <reverseBits>:

// funcion auxiliar para "dar vuelta" los displays de abajo
static uint8_t reverseBits(uint8_t b) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	b25a      	sxtb	r2, r3
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	109b      	asrs	r3, r3, #2
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 8000c06:	b25a      	sxtb	r2, r3
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	71fb      	strb	r3, [r7, #7]
    b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	105b      	asrs	r3, r3, #1
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	71fb      	strb	r3, [r7, #7]
    return b;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <updateDisplay16>:

// actualiza el display con lo que hay en el frameBuffer
void updateDisplay16(void)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af02      	add	r7, sp, #8
    for (uint8_t y = 0; y < 8; y++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	e02f      	b.n	8000cb8 <updateDisplay16+0x6c>
        uint8_t TL = frameBuffer16[y][1];
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc8 <updateDisplay16+0x7c>)
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	71bb      	strb	r3, [r7, #6]
        uint8_t TR = frameBuffer16[y][0];
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <updateDisplay16+0x7c>)
 8000c68:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000c6c:	717b      	strb	r3, [r7, #5]
        uint8_t BL = reverseBits(frameBuffer16[15-y][1]);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f1c3 030f 	rsb	r3, r3, #15
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <updateDisplay16+0x7c>)
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffad 	bl	8000bdc <reverseBits>
 8000c82:	4603      	mov	r3, r0
 8000c84:	713b      	strb	r3, [r7, #4]
        uint8_t BR = reverseBits(frameBuffer16[15-y][0]);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f1c3 030f 	rsb	r3, r3, #15
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc8 <updateDisplay16+0x7c>)
 8000c8e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ffa2 	bl	8000bdc <reverseBits>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	70fb      	strb	r3, [r7, #3]

        MAX7219_WriteRowAll(y + 1, TR, TL, BL, BR);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	793c      	ldrb	r4, [r7, #4]
 8000ca4:	79ba      	ldrb	r2, [r7, #6]
 8000ca6:	7979      	ldrb	r1, [r7, #5]
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	4623      	mov	r3, r4
 8000cae:	f000 f8ff 	bl	8000eb0 <MAX7219_WriteRowAll>
    for (uint8_t y = 0; y < 8; y++) {
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	d9cc      	bls.n	8000c58 <updateDisplay16+0xc>
    }
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	200000c8 	.word	0x200000c8

08000ccc <shiftLeft16>:

// desplaza lo que hay en el frameBuffer una posicion a la izquierda
void shiftLeft16(void){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0

	for(uint8_t y = 0 ; y < DISPLAY_ROWS ; y++){
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	e02e      	b.n	8000d36 <shiftLeft16+0x6a>

		uint16_t combined = ((uint16_t)frameBuffer16[y][0] << 8) | frameBuffer16[y][1];
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <shiftLeft16+0x80>)
 8000cdc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4918      	ldr	r1, [pc, #96]	@ (8000d4c <shiftLeft16+0x80>)
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	440b      	add	r3, r1
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	80bb      	strh	r3, [r7, #4]

		uint16_t msb = (combined & 0x8000) >> 15;
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	0bdb      	lsrs	r3, r3, #15
 8000cfc:	807b      	strh	r3, [r7, #2]

		combined = (combined << 1) | msb;
 8000cfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	80bb      	strh	r3, [r7, #4]

		frameBuffer16[y][0] =  combined >> 8 & 0xFF;
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	b2d1      	uxtb	r1, r2
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d4c <shiftLeft16+0x80>)
 8000d1c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		frameBuffer16[y][1] =  combined & 0xFF;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	88ba      	ldrh	r2, [r7, #4]
 8000d24:	b2d1      	uxtb	r1, r2
 8000d26:	4a09      	ldr	r2, [pc, #36]	@ (8000d4c <shiftLeft16+0x80>)
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	705a      	strb	r2, [r3, #1]
	for(uint8_t y = 0 ; y < DISPLAY_ROWS ; y++){
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	3301      	adds	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d9cd      	bls.n	8000cd8 <shiftLeft16+0xc>
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200000c8 	.word	0x200000c8

08000d50 <findChar>:

// funcion auxiliar que busca un caracter en la lista de caracteres y devuelve un puntero a ese caracter
static const Chars5x7* findChar(char character){
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]

	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e015      	b.n	8000d8c <findChar+0x3c>
		if(font5x7[k].ch == character){
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	490f      	ldr	r1, [pc, #60]	@ (8000da0 <findChar+0x50>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	440b      	add	r3, r1
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d107      	bne.n	8000d86 <findChar+0x36>
			return &font5x7[k];
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <findChar+0x50>)
 8000d82:	4413      	add	r3, r2
 8000d84:	e006      	b.n	8000d94 <findChar+0x44>
	for(uint8_t k = 0 ; k < sizeof(font5x7) / sizeof(font5x7[0]) ; k++){
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b27      	cmp	r3, #39	@ 0x27
 8000d90:	d9e6      	bls.n	8000d60 <findChar+0x10>
		}
	}
	return &font5x7[0];
 8000d92:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <findChar+0x50>)
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	08002f84 	.word	0x08002f84

08000da4 <scrollText16>:
void fill16(bool on)
{
    memset(frameBuffer16, on ? 0xFF : 0x00, sizeof(frameBuffer16));
}

void scrollText16(const char *text, uint32_t delayMs) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]

    while (1) { // bucle infinito → marquesina continua
        for (uint8_t c = 0; text[c] != '\0'; c++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	75fb      	strb	r3, [r7, #23]
 8000db2:	e05e      	b.n	8000e72 <scrollText16+0xce>

            const Chars5x7 *glyph = findChar(text[c]);
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ffc7 	bl	8000d50 <findChar>
 8000dc2:	60f8      	str	r0, [r7, #12]

            // recorrer las 5 columnas del caracter
            for (uint8_t col = 0; col < 5; col++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	75bb      	strb	r3, [r7, #22]
 8000dc8:	e037      	b.n	8000e3a <scrollText16+0x96>
                uint8_t bits = glyph->col[col];
 8000dca:	7dbb      	ldrb	r3, [r7, #22]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	72fb      	strb	r3, [r7, #11]

                // desplazar una columna a la izquierda
                shiftLeft16();
 8000dd4:	f7ff ff7a 	bl	8000ccc <shiftLeft16>

                // limpiar la columna derecha antes de escribir
                for (uint8_t y = 0; y < 16; y++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	757b      	strb	r3, [r7, #21]
 8000ddc:	e008      	b.n	8000df0 <scrollText16+0x4c>
                    setPixel16(15, y, 0);
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	200f      	movs	r0, #15
 8000de6:	f7ff fea3 	bl	8000b30 <setPixel16>
                for (uint8_t y = 0; y < 16; y++)
 8000dea:	7d7b      	ldrb	r3, [r7, #21]
 8000dec:	3301      	adds	r3, #1
 8000dee:	757b      	strb	r3, [r7, #21]
 8000df0:	7d7b      	ldrb	r3, [r7, #21]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	d9f3      	bls.n	8000dde <scrollText16+0x3a>

                // dibujar la nueva columna en la derecha
                for (uint8_t row = 0; row < 7; row++) {
 8000df6:	2300      	movs	r3, #0
 8000df8:	753b      	strb	r3, [r7, #20]
 8000dfa:	e013      	b.n	8000e24 <scrollText16+0x80>
                    bool on = bits & (1 << row);
 8000dfc:	7afa      	ldrb	r2, [r7, #11]
 8000dfe:	7d3b      	ldrb	r3, [r7, #20]
 8000e00:	2101      	movs	r1, #1
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	72bb      	strb	r3, [r7, #10]
                    setPixel16(15, row, on);  // igual que drawChar16
 8000e12:	7aba      	ldrb	r2, [r7, #10]
 8000e14:	7d3b      	ldrb	r3, [r7, #20]
 8000e16:	4619      	mov	r1, r3
 8000e18:	200f      	movs	r0, #15
 8000e1a:	f7ff fe89 	bl	8000b30 <setPixel16>
                for (uint8_t row = 0; row < 7; row++) {
 8000e1e:	7d3b      	ldrb	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	753b      	strb	r3, [r7, #20]
 8000e24:	7d3b      	ldrb	r3, [r7, #20]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d9e8      	bls.n	8000dfc <scrollText16+0x58>
                }

                updateDisplay16();
 8000e2a:	f7ff ff0f 	bl	8000c4c <updateDisplay16>
                HAL_Delay(delayMs);
 8000e2e:	6838      	ldr	r0, [r7, #0]
 8000e30:	f000 f8e2 	bl	8000ff8 <HAL_Delay>
            for (uint8_t col = 0; col < 5; col++) {
 8000e34:	7dbb      	ldrb	r3, [r7, #22]
 8000e36:	3301      	adds	r3, #1
 8000e38:	75bb      	strb	r3, [r7, #22]
 8000e3a:	7dbb      	ldrb	r3, [r7, #22]
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d9c4      	bls.n	8000dca <scrollText16+0x26>
            }

            // columna vacía entre caracteres
            shiftLeft16();
 8000e40:	f7ff ff44 	bl	8000ccc <shiftLeft16>
            for (uint8_t y = 0; y < 16; y++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	74fb      	strb	r3, [r7, #19]
 8000e48:	e008      	b.n	8000e5c <scrollText16+0xb8>
                setPixel16(15, y, 0);
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	200f      	movs	r0, #15
 8000e52:	f7ff fe6d 	bl	8000b30 <setPixel16>
            for (uint8_t y = 0; y < 16; y++)
 8000e56:	7cfb      	ldrb	r3, [r7, #19]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	74fb      	strb	r3, [r7, #19]
 8000e5c:	7cfb      	ldrb	r3, [r7, #19]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d9f3      	bls.n	8000e4a <scrollText16+0xa6>

            updateDisplay16();
 8000e62:	f7ff fef3 	bl	8000c4c <updateDisplay16>
            HAL_Delay(delayMs);
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f000 f8c6 	bl	8000ff8 <HAL_Delay>
        for (uint8_t c = 0; text[c] != '\0'; c++) {
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	75fb      	strb	r3, [r7, #23]
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d19a      	bne.n	8000db4 <scrollText16+0x10>
 8000e7e:	e796      	b.n	8000dae <scrollText16+0xa>

08000e80 <MAX7219_Select>:
#include "max7219_port_stm32.h"
#include "boardConfig.h"

static void MAX7219_Select(void)   { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET); }
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e8a:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <MAX7219_Select+0x14>)
 8000e8c:	f000 fba0 	bl	80015d0 <HAL_GPIO_WritePin>
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40020800 	.word	0x40020800

08000e98 <MAX7219_Deselect>:
static void MAX7219_Deselect(void) { HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET); }
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea2:	4802      	ldr	r0, [pc, #8]	@ (8000eac <MAX7219_Deselect+0x14>)
 8000ea4:	f000 fb94 	bl	80015d0 <HAL_GPIO_WritePin>
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020800 	.word	0x40020800

08000eb0 <MAX7219_WriteRowAll>:

void MAX7219_WriteRowAll(uint8_t row, uint8_t TR, uint8_t TL, uint8_t BL, uint8_t BR)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	717b      	strb	r3, [r7, #5]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	713b      	strb	r3, [r7, #4]
    // Recordá: el primer par de bytes que mandamos termina en el módulo más LEJANO (BL)
    uint8_t frame[8] = {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	723b      	strb	r3, [r7, #8]
 8000ed2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ed6:	727b      	strb	r3, [r7, #9]
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	72bb      	strb	r3, [r7, #10]
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	72fb      	strb	r3, [r7, #11]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	733b      	strb	r3, [r7, #12]
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	737b      	strb	r3, [r7, #13]
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	73bb      	strb	r3, [r7, #14]
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	73fb      	strb	r3, [r7, #15]
        row, BL,   // Display 3
        row, TL,   // Display 2
        row, TR    // Display 1 (más cercano al micro)
    };

    MAX7219_Select();
 8000ef0:	f7ff ffc6 	bl	8000e80 <MAX7219_Select>
    HAL_SPI_Transmit(&hspi2, frame, sizeof(frame), HAL_MAX_DELAY);
 8000ef4:	f107 0108 	add.w	r1, r7, #8
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000efc:	2208      	movs	r2, #8
 8000efe:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MAX7219_WriteRowAll+0x60>)
 8000f00:	f001 f9f1 	bl	80022e6 <HAL_SPI_Transmit>
    MAX7219_Deselect();
 8000f04:	f7ff ffc8 	bl	8000e98 <MAX7219_Deselect>
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	20000028 	.word	0x20000028

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f94f 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fbe4 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f967 	bl	800124a <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f94:	f000 f92f 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	200000e8 	.word	0x200000e8

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200000e8 	.word	0x200000e8

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	@ (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff3e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff31 	bl	80010a4 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d004      	beq.n	8001280 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e00c      	b.n	800129a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2205      	movs	r2, #5
 8001284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e165      	b.n	8001590 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	429a      	cmp	r2, r3
 80012de:	f040 8154 	bne.w	800158a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d005      	beq.n	80012fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d130      	bne.n	800135c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b03      	cmp	r3, #3
 8001366:	d017      	beq.n	8001398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d123      	bne.n	80013ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0203 	and.w	r2, r3, #3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80ae 	beq.w	800158a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b5d      	ldr	r3, [pc, #372]	@ (80015a8 <HAL_GPIO_Init+0x300>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a5c      	ldr	r2, [pc, #368]	@ (80015a8 <HAL_GPIO_Init+0x300>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b5a      	ldr	r3, [pc, #360]	@ (80015a8 <HAL_GPIO_Init+0x300>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144a:	4a58      	ldr	r2, [pc, #352]	@ (80015ac <HAL_GPIO_Init+0x304>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4f      	ldr	r2, [pc, #316]	@ (80015b0 <HAL_GPIO_Init+0x308>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x21a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4e      	ldr	r2, [pc, #312]	@ (80015b4 <HAL_GPIO_Init+0x30c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x216>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4d      	ldr	r2, [pc, #308]	@ (80015b8 <HAL_GPIO_Init+0x310>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x212>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4c      	ldr	r2, [pc, #304]	@ (80015bc <HAL_GPIO_Init+0x314>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x20e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4b      	ldr	r2, [pc, #300]	@ (80015c0 <HAL_GPIO_Init+0x318>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x20a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4a      	ldr	r2, [pc, #296]	@ (80015c4 <HAL_GPIO_Init+0x31c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x206>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a49      	ldr	r2, [pc, #292]	@ (80015c8 <HAL_GPIO_Init+0x320>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x202>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e00c      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00a      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x21c>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	@ (80015ac <HAL_GPIO_Init+0x304>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <HAL_GPIO_Init+0x324>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a31      	ldr	r2, [pc, #196]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_GPIO_Init+0x324>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a26      	ldr	r2, [pc, #152]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155a:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <HAL_GPIO_Init+0x324>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001584:	4a11      	ldr	r2, [pc, #68]	@ (80015cc <HAL_GPIO_Init+0x324>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f ae96 	bls.w	80012c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40013c00 	.word	0x40013c00

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ec:	e003      	b.n	80015f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cc      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b68      	ldr	r3, [pc, #416]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d90c      	bls.n	8001640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b65      	ldr	r3, [pc, #404]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b63      	ldr	r3, [pc, #396]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b8      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b59      	ldr	r3, [pc, #356]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a58      	ldr	r2, [pc, #352]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800167a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b50      	ldr	r3, [pc, #320]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	494d      	ldr	r1, [pc, #308]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d044      	beq.n	8001724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b47      	ldr	r3, [pc, #284]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b3b      	ldr	r3, [pc, #236]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e067      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4934      	ldr	r1, [pc, #208]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fc74 	bl	8000fe0 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff fc70 	bl	8000fe0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e04f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d20c      	bcs.n	800174c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4916      	ldr	r1, [pc, #88]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490e      	ldr	r1, [pc, #56]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800178a:	f000 f855 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490a      	ldr	r1, [pc, #40]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fbd4 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08002f6c 	.word	0x08002f6c
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000000 	.word	0x20000000

080017e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0a9b      	lsrs	r3, r3, #10
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4903      	ldr	r1, [pc, #12]	@ (800180c <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	08002f7c 	.word	0x08002f7c

08001810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001814:	f7ff ffdc 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	0b5b      	lsrs	r3, r3, #13
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4903      	ldr	r1, [pc, #12]	@ (8001834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	08002f7c 	.word	0x08002f7c

08001838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800183c:	b0ae      	sub	sp, #184	@ 0xb8
 800183e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185e:	4bcb      	ldr	r3, [pc, #812]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b0c      	cmp	r3, #12
 8001868:	f200 8206 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x440>
 800186c:	a201      	add	r2, pc, #4	@ (adr r2, 8001874 <HAL_RCC_GetSysClockFreq+0x3c>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	080018a9 	.word	0x080018a9
 8001878:	08001c79 	.word	0x08001c79
 800187c:	08001c79 	.word	0x08001c79
 8001880:	08001c79 	.word	0x08001c79
 8001884:	080018b1 	.word	0x080018b1
 8001888:	08001c79 	.word	0x08001c79
 800188c:	08001c79 	.word	0x08001c79
 8001890:	08001c79 	.word	0x08001c79
 8001894:	080018b9 	.word	0x080018b9
 8001898:	08001c79 	.word	0x08001c79
 800189c:	08001c79 	.word	0x08001c79
 80018a0:	08001c79 	.word	0x08001c79
 80018a4:	08001aa9 	.word	0x08001aa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x358>)
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018ae:	e1e7      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x35c>)
 80018b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018b6:	e1e3      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b8:	4bb4      	ldr	r3, [pc, #720]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c4:	4bb1      	ldr	r3, [pc, #708]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d071      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d0:	4bae      	ldr	r3, [pc, #696]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018f6:	4622      	mov	r2, r4
 80018f8:	462b      	mov	r3, r5
 80018fa:	f04f 0000 	mov.w	r0, #0
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	0159      	lsls	r1, r3, #5
 8001904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001908:	0150      	lsls	r0, r2, #5
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4621      	mov	r1, r4
 8001910:	1a51      	subs	r1, r2, r1
 8001912:	6439      	str	r1, [r7, #64]	@ 0x40
 8001914:	4629      	mov	r1, r5
 8001916:	eb63 0301 	sbc.w	r3, r3, r1
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001928:	4649      	mov	r1, r9
 800192a:	018b      	lsls	r3, r1, #6
 800192c:	4641      	mov	r1, r8
 800192e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001932:	4641      	mov	r1, r8
 8001934:	018a      	lsls	r2, r1, #6
 8001936:	4641      	mov	r1, r8
 8001938:	1a51      	subs	r1, r2, r1
 800193a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800193c:	4649      	mov	r1, r9
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001950:	4649      	mov	r1, r9
 8001952:	00cb      	lsls	r3, r1, #3
 8001954:	4641      	mov	r1, r8
 8001956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800195a:	4641      	mov	r1, r8
 800195c:	00ca      	lsls	r2, r1, #3
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	4603      	mov	r3, r0
 8001964:	4622      	mov	r2, r4
 8001966:	189b      	adds	r3, r3, r2
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
 800196a:	462b      	mov	r3, r5
 800196c:	460a      	mov	r2, r1
 800196e:	eb42 0303 	adc.w	r3, r2, r3
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001980:	4629      	mov	r1, r5
 8001982:	024b      	lsls	r3, r1, #9
 8001984:	4621      	mov	r1, r4
 8001986:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800198a:	4621      	mov	r1, r4
 800198c:	024a      	lsls	r2, r1, #9
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001996:	2200      	movs	r2, #0
 8001998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800199c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80019a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80019a4:	f7fe fc2e 	bl	8000204 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019b2:	e067      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b4:	4b75      	ldr	r3, [pc, #468]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	2200      	movs	r2, #0
 80019bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80019c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80019ce:	2300      	movs	r3, #0
 80019d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80019d6:	4622      	mov	r2, r4
 80019d8:	462b      	mov	r3, r5
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e8:	0150      	lsls	r0, r2, #5
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80019f4:	4629      	mov	r1, r5
 80019f6:	eb63 0301 	sbc.w	r3, r3, r1
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001a08:	4649      	mov	r1, r9
 8001a0a:	018b      	lsls	r3, r1, #6
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a12:	4641      	mov	r1, r8
 8001a14:	018a      	lsls	r2, r1, #6
 8001a16:	4641      	mov	r1, r8
 8001a18:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a36:	4692      	mov	sl, r2
 8001a38:	469b      	mov	fp, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	eb1a 0303 	adds.w	r3, sl, r3
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	462b      	mov	r3, r5
 8001a44:	eb4b 0303 	adc.w	r3, fp, r3
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a56:	4629      	mov	r1, r5
 8001a58:	028b      	lsls	r3, r1, #10
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a60:	4621      	mov	r1, r4
 8001a62:	028a      	lsls	r2, r1, #10
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a70:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a76:	f7fe fbc5 	bl	8000204 <__aeabi_uldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4613      	mov	r3, r2
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a84:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001aa6:	e0eb      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab4:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d06b      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac0:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ad8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001adc:	4622      	mov	r2, r4
 8001ade:	462b      	mov	r3, r5
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0159      	lsls	r1, r3, #5
 8001aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aee:	0150      	lsls	r0, r2, #5
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4621      	mov	r1, r4
 8001af6:	1a51      	subs	r1, r2, r1
 8001af8:	61b9      	str	r1, [r7, #24]
 8001afa:	4629      	mov	r1, r5
 8001afc:	eb63 0301 	sbc.w	r3, r3, r1
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b0e:	4659      	mov	r1, fp
 8001b10:	018b      	lsls	r3, r1, #6
 8001b12:	4651      	mov	r1, sl
 8001b14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b18:	4651      	mov	r1, sl
 8001b1a:	018a      	lsls	r2, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ebb2 0801 	subs.w	r8, r2, r1
 8001b22:	4659      	mov	r1, fp
 8001b24:	eb63 0901 	sbc.w	r9, r3, r1
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3c:	4690      	mov	r8, r2
 8001b3e:	4699      	mov	r9, r3
 8001b40:	4623      	mov	r3, r4
 8001b42:	eb18 0303 	adds.w	r3, r8, r3
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	462b      	mov	r3, r5
 8001b4a:	eb49 0303 	adc.w	r3, r9, r3
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	024b      	lsls	r3, r1, #9
 8001b60:	4621      	mov	r1, r4
 8001b62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b66:	4621      	mov	r1, r4
 8001b68:	024a      	lsls	r2, r1, #9
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b72:	2200      	movs	r2, #0
 8001b74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b7c:	f7fe fb42 	bl	8000204 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b8a:	e065      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x420>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b98:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001baa:	2300      	movs	r3, #0
 8001bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	0159      	lsls	r1, r3, #5
 8001bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc4:	0150      	lsls	r0, r2, #5
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4641      	mov	r1, r8
 8001bcc:	1a51      	subs	r1, r2, r1
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001be4:	4659      	mov	r1, fp
 8001be6:	018b      	lsls	r3, r1, #6
 8001be8:	4651      	mov	r1, sl
 8001bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bee:	4651      	mov	r1, sl
 8001bf0:	018a      	lsls	r2, r1, #6
 8001bf2:	4651      	mov	r1, sl
 8001bf4:	1a54      	subs	r4, r2, r1
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	eb63 0501 	sbc.w	r5, r3, r1
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	18e3      	adds	r3, r4, r3
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	464b      	mov	r3, r9
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	028b      	lsls	r3, r1, #10
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c34:	4621      	mov	r1, r4
 8001c36:	028a      	lsls	r2, r1, #10
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c40:	2200      	movs	r2, #0
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c4a:	f7fe fadb 	bl	8000204 <__aeabi_uldivmod>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4613      	mov	r3, r2
 8001c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0f1b      	lsrs	r3, r3, #28
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c76:	e003      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	37b8      	adds	r7, #184	@ 0xb8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	00f42400 	.word	0x00f42400

08001c98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e28d      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8083 	beq.w	8001dbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cb8:	4b94      	ldr	r3, [pc, #592]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d019      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cc4:	4b91      	ldr	r3, [pc, #580]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cd0:	4b8e      	ldr	r3, [pc, #568]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cde:	4b8b      	ldr	r3, [pc, #556]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b88      	ldr	r3, [pc, #544]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cf6:	d10b      	bne.n	8001d10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	4b84      	ldr	r3, [pc, #528]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d05b      	beq.n	8001dbc <HAL_RCC_OscConfig+0x124>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d157      	bne.n	8001dbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e25a      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x90>
 8001d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e01d      	b.n	8001d64 <HAL_RCC_OscConfig+0xcc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0xb4>
 8001d32:	4b76      	ldr	r3, [pc, #472]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a75      	ldr	r2, [pc, #468]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b73      	ldr	r3, [pc, #460]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a72      	ldr	r2, [pc, #456]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0xcc>
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b6c      	ldr	r3, [pc, #432]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f938 	bl	8000fe0 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff f934 	bl	8000fe0 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	@ 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e21f      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b61      	ldr	r3, [pc, #388]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0xdc>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f924 	bl	8000fe0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f920 	bl	8000fe0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e20b      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x104>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06f      	beq.n	8001eaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dca:	4b50      	ldr	r3, [pc, #320]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d017      	beq.n	8001e06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
        || \
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001de2:	4b4a      	ldr	r3, [pc, #296]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dee:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b44      	ldr	r3, [pc, #272]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b41      	ldr	r3, [pc, #260]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x186>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1d3      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4937      	ldr	r1, [pc, #220]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e03a      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b34      	ldr	r3, [pc, #208]	@ (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f8cd 	bl	8000fe0 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f8c9 	bl	8000fe0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1b4      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4925      	ldr	r1, [pc, #148]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCC_OscConfig+0x278>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8ac 	bl	8000fe0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff f8a8 	bl	8000fe0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e193      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d036      	beq.n	8001f24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f88c 	bl	8000fe0 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff f888 	bl	8000fe0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e173      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x234>
 8001eea:	e01b      	b.n	8001f24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f875 	bl	8000fe0 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	e00e      	b.n	8001f18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efa:	f7ff f871 	bl	8000fe0 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d907      	bls.n	8001f18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e15c      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	42470000 	.word	0x42470000
 8001f14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b8a      	ldr	r3, [pc, #552]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ea      	bne.n	8001efa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 8097 	beq.w	8002060 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b83      	ldr	r3, [pc, #524]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b7f      	ldr	r3, [pc, #508]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b79      	ldr	r3, [pc, #484]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f831 	bl	8000fe0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7ff f82d 	bl	8000fe0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e118      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b6c      	ldr	r3, [pc, #432]	@ (8002148 <HAL_RCC_OscConfig+0x4b0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x31e>
 8001fa8:	4b66      	ldr	r3, [pc, #408]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4a65      	ldr	r2, [pc, #404]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb4:	e01c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x340>
 8001fbe:	4b61      	ldr	r3, [pc, #388]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc2:	4a60      	ldr	r2, [pc, #384]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fca:	4b5e      	ldr	r3, [pc, #376]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a5d      	ldr	r2, [pc, #372]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x358>
 8001fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fdc:	4a59      	ldr	r2, [pc, #356]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe4:	4b57      	ldr	r3, [pc, #348]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a56      	ldr	r2, [pc, #344]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	f023 0304 	bic.w	r3, r3, #4
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d015      	beq.n	8002024 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fff2 	bl	8000fe0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7fe ffee 	bl	8000fe0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0d7      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002016:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ee      	beq.n	8002000 <HAL_RCC_OscConfig+0x368>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe ffdc 	bl	8000fe0 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe ffd8 	bl	8000fe0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0c1      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	4b40      	ldr	r3, [pc, #256]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ee      	bne.n	800202c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4a3a      	ldr	r2, [pc, #232]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800205e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80ad 	beq.w	80021c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206a:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b08      	cmp	r3, #8
 8002074:	d060      	beq.n	8002138 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d145      	bne.n	800210a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_RCC_OscConfig+0x4b4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ffac 	bl	8000fe0 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe ffa8 	bl	8000fe0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e093      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	071b      	lsls	r3, r3, #28
 80020d6:	491b      	ldr	r1, [pc, #108]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <HAL_RCC_OscConfig+0x4b4>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe ff7d 	bl	8000fe0 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe ff79 	bl	8000fe0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e064      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x452>
 8002108:	e05c      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_RCC_OscConfig+0x4b4>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe ff66 	bl	8000fe0 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe ff62 	bl	8000fe0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e04d      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x480>
 8002136:	e045      	b.n	80021c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e040      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
 800214c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_RCC_OscConfig+0x538>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d030      	beq.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d129      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d122      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	4293      	cmp	r3, r2
 800218a:	d119      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	3b01      	subs	r3, #1
 800219a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d10f      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07b      	b.n	80022de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021f6:	d009      	beq.n	800220c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
 80021fe:	e005      	b.n	800220c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fa9c 	bl	8000764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	f003 0104 	and.w	r1, r3, #4
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	f003 0210 	and.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69da      	ldr	r2, [r3, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b088      	sub	sp, #32
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022f6:	f7fe fe73 	bl	8000fe0 <HAL_GetTick>
 80022fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800230c:	2302      	movs	r3, #2
 800230e:	e12a      	b.n	8002566 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_SPI_Transmit+0x36>
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e122      	b.n	8002566 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_SPI_Transmit+0x48>
 800232a:	2302      	movs	r3, #2
 800232c:	e11b      	b.n	8002566 <HAL_SPI_Transmit+0x280>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2203      	movs	r2, #3
 800233a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800237c:	d10f      	bne.n	800239e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800238c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800239c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b40      	cmp	r3, #64	@ 0x40
 80023aa:	d007      	beq.n	80023bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023c4:	d152      	bne.n	800246c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_SPI_Transmit+0xee>
 80023ce:	8b7b      	ldrh	r3, [r7, #26]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d145      	bne.n	8002460 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	881a      	ldrh	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	1c9a      	adds	r2, r3, #2
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023f8:	e032      	b.n	8002460 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b02      	cmp	r3, #2
 8002406:	d112      	bne.n	800242e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800242c:	e018      	b.n	8002460 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242e:	f7fe fdd7 	bl	8000fe0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d803      	bhi.n	8002446 <HAL_SPI_Transmit+0x160>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002444:	d102      	bne.n	800244c <HAL_SPI_Transmit+0x166>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e082      	b.n	8002566 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1c7      	bne.n	80023fa <HAL_SPI_Transmit+0x114>
 800246a:	e053      	b.n	8002514 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_SPI_Transmit+0x194>
 8002474:	8b7b      	ldrh	r3, [r7, #26]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d147      	bne.n	800250a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024a0:	e033      	b.n	800250a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d113      	bne.n	80024d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024d6:	e018      	b.n	800250a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024d8:	f7fe fd82 	bl	8000fe0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d803      	bhi.n	80024f0 <HAL_SPI_Transmit+0x20a>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024ee:	d102      	bne.n	80024f6 <HAL_SPI_Transmit+0x210>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e02d      	b.n	8002566 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1c6      	bne.n	80024a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f9cf 	bl	80028bc <SPI_EndRxTxTransaction>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002564:	2300      	movs	r3, #0
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10f      	bne.n	80025b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
    return;
 80025b2:	e0d7      	b.n	8002764 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_SPI_IRQHandler+0x66>
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	09db      	lsrs	r3, r3, #7
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
    return;
 80025d4:	e0c6      	b.n	8002764 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <HAL_SPI_IRQHandler+0x8c>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80b4 	beq.w	8002764 <HAL_SPI_IRQHandler+0x1f4>
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80ad 	beq.w	8002764 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d023      	beq.n	800265e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b03      	cmp	r3, #3
 8002620:	d011      	beq.n	8002646 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	e00b      	b.n	800265e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]
        return;
 800265c:	e082      	b.n	8002764 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d014      	beq.n	8002694 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00c      	beq.n	80026ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a4:	f043 0208 	orr.w	r2, r3, #8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d04f      	beq.n	8002762 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <HAL_SPI_IRQHandler+0x17e>
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d034      	beq.n	8002758 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0203 	bic.w	r2, r2, #3
 80026fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d011      	beq.n	800272a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	4a18      	ldr	r2, [pc, #96]	@ (800276c <HAL_SPI_IRQHandler+0x1fc>)
 800270c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fda5 	bl	8001262 <HAL_DMA_Abort_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002736:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <HAL_SPI_IRQHandler+0x1fc>)
 8002738:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fd8f 	bl	8001262 <HAL_DMA_Abort_IT>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002756:	e003      	b.n	8002760 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f809 	bl	8002770 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800275e:	e000      	b.n	8002762 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002760:	bf00      	nop
    return;
 8002762:	bf00      	nop
  }
}
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	08002785 	.word	0x08002785

08002770 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff ffe6 	bl	8002770 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027bc:	f7fe fc10 	bl	8000fe0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027cc:	f7fe fc08 	bl	8000fe0 <HAL_GetTick>
 80027d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027d2:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	015b      	lsls	r3, r3, #5
 80027d8:	0d1b      	lsrs	r3, r3, #20
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e2:	e055      	b.n	8002890 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027ea:	d051      	beq.n	8002890 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027ec:	f7fe fbf8 	bl	8000fe0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d902      	bls.n	8002802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d13d      	bne.n	800287e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800281a:	d111      	bne.n	8002840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002824:	d004      	beq.n	8002830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282e:	d107      	bne.n	8002840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800283e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002848:	d10f      	bne.n	800286a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e018      	b.n	80028b0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	e002      	b.n	8002890 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3b01      	subs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4013      	ands	r3, r2
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d19a      	bne.n	80027e4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000000 	.word	0x20000000

080028bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2201      	movs	r2, #1
 80028d0:	2102      	movs	r1, #2
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff ff6a 	bl	80027ac <SPI_WaitFlagStateUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e032      	b.n	8002954 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028ee:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <SPI_EndRxTxTransaction+0xa0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002960 <SPI_EndRxTxTransaction+0xa4>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	0d5b      	lsrs	r3, r3, #21
 80028fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290c:	d112      	bne.n	8002934 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	@ 0x80
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff ff47 	bl	80027ac <SPI_WaitFlagStateUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d016      	beq.n	8002952 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e00f      	b.n	8002954 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3b01      	subs	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b80      	cmp	r3, #128	@ 0x80
 800294c:	d0f2      	beq.n	8002934 <SPI_EndRxTxTransaction+0x78>
 800294e:	e000      	b.n	8002952 <SPI_EndRxTxTransaction+0x96>
        break;
 8002950:	bf00      	nop
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000000 	.word	0x20000000
 8002960:	165e9f81 	.word	0x165e9f81

08002964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e042      	b.n	80029fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fd ff5a 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2224      	movs	r2, #36	@ 0x24
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f82b 	bl	8002a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a08:	b0c0      	sub	sp, #256	@ 0x100
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	ea40 0301 	orr.w	r3, r0, r1
 8002a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a5c:	f021 010c 	bic.w	r1, r1, #12
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7e:	6999      	ldr	r1, [r3, #24]
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	ea40 0301 	orr.w	r3, r0, r1
 8002a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd0 <UART_SetConfig+0x2cc>)
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0xa0>
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd4 <UART_SetConfig+0x2d0>)
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d104      	bne.n	8002aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f7fe feb4 	bl	8001810 <HAL_RCC_GetPCLK2Freq>
 8002aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002aac:	e003      	b.n	8002ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aae:	f7fe fe9b 	bl	80017e8 <HAL_RCC_GetPCLK1Freq>
 8002ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ac0:	f040 810c 	bne.w	8002cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ace:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	1891      	adds	r1, r2, r2
 8002adc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ade:	415b      	adcs	r3, r3
 8002ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	eb12 0801 	adds.w	r8, r2, r1
 8002aec:	4629      	mov	r1, r5
 8002aee:	eb43 0901 	adc.w	r9, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb18 0303 	adds.w	r3, r8, r3
 8002b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b14:	462b      	mov	r3, r5
 8002b16:	eb49 0303 	adc.w	r3, r9, r3
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b32:	460b      	mov	r3, r1
 8002b34:	18db      	adds	r3, r3, r3
 8002b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b38:	4613      	mov	r3, r2
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b48:	f7fd fb5c 	bl	8000204 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4b61      	ldr	r3, [pc, #388]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002b52:	fba3 2302 	umull	r2, r3, r3, r2
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	011c      	lsls	r4, r3, #4
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b74:	415b      	adcs	r3, r3
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b82:	4649      	mov	r1, r9
 8002b84:	eb43 0b01 	adc.w	fp, r3, r1
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b9c:	4692      	mov	sl, r2
 8002b9e:	469b      	mov	fp, r3
 8002ba0:	4643      	mov	r3, r8
 8002ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002baa:	464b      	mov	r3, r9
 8002bac:	eb4b 0303 	adc.w	r3, fp, r3
 8002bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	18db      	adds	r3, r3, r3
 8002bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bce:	4613      	mov	r3, r2
 8002bd0:	eb42 0303 	adc.w	r3, r2, r3
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bde:	f7fd fb11 	bl	8000204 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002bea:	fba3 2301 	umull	r2, r3, r3, r1
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2264      	movs	r2, #100	@ 0x64
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bfe:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002c00:	fba3 2302 	umull	r2, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c0c:	441c      	add	r4, r3
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c84:	460b      	mov	r3, r1
 8002c86:	18db      	adds	r3, r3, r3
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c9a:	f7fd fab3 	bl	8000204 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	@ 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	@ 0x32
 8002cb6:	4a08      	ldr	r2, [pc, #32]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	f003 0207 	and.w	r2, r3, #7
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4422      	add	r2, r4
 8002cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ccc:	e106      	b.n	8002edc <UART_SetConfig+0x4d8>
 8002cce:	bf00      	nop
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002cee:	4642      	mov	r2, r8
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	1891      	adds	r1, r2, r2
 8002cf4:	6239      	str	r1, [r7, #32]
 8002cf6:	415b      	adcs	r3, r3
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cfe:	4641      	mov	r1, r8
 8002d00:	1854      	adds	r4, r2, r1
 8002d02:	4649      	mov	r1, r9
 8002d04:	eb43 0501 	adc.w	r5, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	00eb      	lsls	r3, r5, #3
 8002d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d16:	00e2      	lsls	r2, r4, #3
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	18e3      	adds	r3, r4, r3
 8002d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d24:	464b      	mov	r3, r9
 8002d26:	eb45 0303 	adc.w	r3, r5, r3
 8002d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	008b      	lsls	r3, r1, #2
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d54:	4621      	mov	r1, r4
 8002d56:	008a      	lsls	r2, r1, #2
 8002d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d5c:	f7fd fa52 	bl	8000204 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4b60      	ldr	r3, [pc, #384]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002d66:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	011c      	lsls	r4, r3, #4
 8002d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	1891      	adds	r1, r2, r2
 8002d86:	61b9      	str	r1, [r7, #24]
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d90:	4641      	mov	r1, r8
 8002d92:	1851      	adds	r1, r2, r1
 8002d94:	6139      	str	r1, [r7, #16]
 8002d96:	4649      	mov	r1, r9
 8002d98:	414b      	adcs	r3, r1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da8:	4659      	mov	r1, fp
 8002daa:	00cb      	lsls	r3, r1, #3
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db2:	4651      	mov	r1, sl
 8002db4:	00ca      	lsls	r2, r1, #3
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	eb42 0303 	adc.w	r3, r2, r3
 8002dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002de8:	4649      	mov	r1, r9
 8002dea:	008b      	lsls	r3, r1, #2
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df2:	4641      	mov	r1, r8
 8002df4:	008a      	lsls	r2, r1, #2
 8002df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dfa:	f7fd fa03 	bl	8000204 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	4b38      	ldr	r3, [pc, #224]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002e06:	fba3 2301 	umull	r2, r3, r3, r1
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2264      	movs	r2, #100	@ 0x64
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	1acb      	subs	r3, r1, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	@ 0x32
 8002e18:	4a33      	ldr	r2, [pc, #204]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e24:	441c      	add	r4, r3
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e44:	4641      	mov	r1, r8
 8002e46:	1851      	adds	r1, r2, r1
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	414b      	adcs	r3, r1
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4651      	mov	r1, sl
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4651      	mov	r1, sl
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4642      	mov	r2, r8
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e76:	464b      	mov	r3, r9
 8002e78:	460a      	mov	r2, r1
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e98:	4649      	mov	r1, r9
 8002e9a:	008b      	lsls	r3, r1, #2
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	008a      	lsls	r2, r1, #2
 8002ea6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002eaa:	f7fd f9ab 	bl	8000204 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	2164      	movs	r1, #100	@ 0x64
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	3332      	adds	r3, #50	@ 0x32
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4422      	add	r2, r4
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee8:	51eb851f 	.word	0x51eb851f

08002eec <memset>:
 8002eec:	4402      	add	r2, r0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <memset+0xa>
 8002ef4:	4770      	bx	lr
 8002ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8002efa:	e7f9      	b.n	8002ef0 <memset+0x4>

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	@ (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	@ (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8002f40 <__libc_init_array+0x44>)
 8002f10:	f000 f818 	bl	8002f44 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	0800307c 	.word	0x0800307c
 8002f38:	0800307c 	.word	0x0800307c
 8002f3c:	0800307c 	.word	0x0800307c
 8002f40:	08003080 	.word	0x08003080

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
